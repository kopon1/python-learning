        t.SeatManagementClient = class {
            constructor(e, n={}, p={}) {
                this.getUsers = (e, t, n, a, o) => r(this, void 0, void 0, (function*() {
                    const r = Boolean(null == t ? void 0 : t.completionStats)
                      , i = Object.assign({
                        "X-Auth-Token": e
                    }, null == t ? void 0 : t.headers)
                      , m = yield this.client.getUsers(new s.GetUsersRequest({
                        authToken: e,
                        groupId: n
                    }), {
                        headers: i
--
                      , p = new Map;
                    for (const e of m.userRoles)
                        p.set(e.apiKey, e);
--
        t.UserAnalyticsClient = class {
            constructor(e, t={}, n={}) {
                this.getUserAnalytics = (e, t) => r(this, void 0, void 0, (function*() {
                    const n = {
                        "X-Api-Key": (null == t ? void 0 : t.apiKey) || ""
                    };
                    return yield this.client.getAnalytics(e, {
                        headers: n
                    })
                }
                )),
                this.getPublicAnalytics = e => r(this, void 0, void 0, (function*() {
--
                }
                )),
                this.apiServerAddress = e,
--
        class s extends Error {
            constructor(e) {
                super(null != e ? e : "User not found."),
                this.name = "UserNotFoundError"
            }
        }
        t.UserNotFoundError = s;
        class l extends Error {
            constructor(e) {
                super(null != e ? e : "Preapproval not found."),
                this.name = "PreapprovalNotFoundError"
            }
        }
        t.PreapprovalNotFoundError = l
    }
    ,
    38886: (e, t, n) => {
        Object.defineProperty(t, "__esModule", {
            value: !0
--
        t.FormattedChatMessage = t.ChatExperimentStatus = t.GetChatMessageRequest_EnterpriseExternalModelConfig = t.GetChatMessageRequest = t.ChatMentionsSearchResponse = t.ChatMentionsSearchRequest = t.ChatToolChoice = t.ChatToolDefinition = t.PromptCacheOptions = t.ChatMessagePrompt = t.Conversation = t.ChatMessage = t.ChatMessageAction = t.ChatMessageError = t.ChatMessageStatus = t.ChatMessageStatusContextRelevancy = t.ChatMessageActionGeneric = t.ChatMessageActionEdit = t.ChatMessageActionSearch = t.ChatMessageIntent = t.IntentFastApply = t.IntentSearch = t.IntentGenerateCode = t.IntentProblemExplain = t.IntentCodeBlockRefactor = t.IntentCodeBlockExplain = t.IntentClassExplain = t.IntentFunctionDocstring = t.IntentFunctionUnitTests = t.IntentFunctionRefactor = t.IntentFunctionExplain = t.IntentGeneric = t.ChatMetrics = t.CodeBlockInfo = t.CacheControlType = t.ChatIntentType = t.ChatFeedbackType = void 0;
        const r = n(40270)
          , a = n(99726)
--
        class c extends r.Message {
            constructor(e) {
                super(),
                this.rawSource = "",
                this.startLine = 0,
                this.startCol = 0,
                this.endLine = 0,
                this.endCol = 0,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new c).fromBinary(e, t)
--
            static fromJson(e, t) {
                return (new c).fromJson(e, t)
            }
--
        class u extends r.Message {
            constructor(e) {
                super(),
                this.responseStreamLatencyMs = r.protoInt64.zero,
                this.refreshContextLatencyMs = r.protoInt64.zero,
                this.shouldGetLocalContextForChatLatencyMs = r.protoInt64.zero,
                this.shouldGetLocalContextForChat = !1,
                this.computeChangeEventsLatencyMs = r.protoInt64.zero,
                this.contextToChatPromptLatencyMs = r.protoInt64.zero,
                this.numPromptTokens = 0,
                this.numSystemPromptTokens = 0,
                this.numInputTokens = r.protoInt64.zero,
--
                this.numIndexedFiles = r.protoInt64.zero,
                this.numIndexedCodeContextItems = r.protoInt64.zero,
                this.model = a.Model.MODEL_UNSPECIFIED,
--
        class d extends r.Message {
            constructor(e) {
                super(),
                this.text = "",
                this.items = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new d).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new d).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new d).fromJsonString(e, t)
            }
--
        class m extends r.Message {
            constructor(e) {
                super(),
                this.language = a.Language.UNSPECIFIED,
                this.filePathMigrateMeToUri = "",
                this.uri = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new m).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new m).fromJsonString(e, t)
--
        class p extends r.Message {
            constructor(e) {
                super(),
                this.language = a.Language.UNSPECIFIED,
                this.filePathMigrateMeToUri = "",
                this.refactorDescription = "",
                this.uri = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new p).fromBinary(e, t)
            }
--
                return (new p).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class f extends r.Message {
            constructor(e) {
                super(),
                this.language = a.Language.UNSPECIFIED,
                this.filePathMigrateMeToUri = "",
                this.uri = "",
                this.instructions = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new f).fromBinary(e, t)
            }
--
                return (new f).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class h extends r.Message {
            constructor(e) {
                super(),
                this.language = a.Language.UNSPECIFIED,
                this.filePathMigrateMeToUri = "",
                this.uri = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new h).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new h).fromJsonString(e, t)
--
        class _ extends r.Message {
            constructor(e) {
                super(),
                this.language = a.Language.UNSPECIFIED,
                this.filePathMigrateMeToUri = "",
                this.uri = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new _).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new _).fromJsonString(e, t)
--
        class g extends r.Message {
            constructor(e) {
                super(),
                this.language = a.Language.UNSPECIFIED,
                this.filePathMigrateMeToUri = "",
                this.uri = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new g).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new g).fromJsonString(e, t)
--
        class y extends r.Message {
            constructor(e) {
                super(),
                this.language = a.Language.UNSPECIFIED,
                this.filePathMigrateMeToUri = "",
                this.uri = "",
                this.refactorDescription = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new y).fromBinary(e, t)
            }
--
                return (new y).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class A extends r.Message {
            constructor(e) {
                super(),
                this.diagnosticMessage = "",
                this.surroundingCodeSnippet = "",
                this.language = a.Language.UNSPECIFIED,
                this.filePathMigrateMeToUri = "",
                this.uri = "",
                this.lineNumber = 0,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
--
            }
            static fromJson(e, t) {
                return (new A).fromJson(e, t)
--
        class E extends r.Message {
            constructor(e) {
                super(),
                this.instruction = "",
                this.language = a.Language.UNSPECIFIED,
                this.filePathMigrateMeToUri = "",
                this.uri = "",
                this.lineNumber = 0,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new E).fromBinary(e, t)
--
            static fromJson(e, t) {
                return (new E).fromJson(e, t)
            }
--
        class b extends r.Message {
            constructor(e) {
                super(),
                this.query = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new b).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new b).fromJson(e, t)
            }
--
                return (new b).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class v extends r.Message {
            constructor(e) {
                super(),
                this.diffOutline = "",
                this.language = a.Language.UNSPECIFIED,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new v).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new v).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new v).fromJsonString(e, t)
            }
--
        class w extends r.Message {
            constructor(e) {
                super(),
                this.intent = {
                    case: void 0
                },
                this.numTokens = 0,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new w).fromBinary(e, t)
            }
--
                return (new w).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class S extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new S).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new S).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(S, e, t)
--
        class T extends r.Message {
            constructor(e) {
                super(),
                this.filePathMigrateMeToUri = "",
                this.uri = "",
                this.language = a.Language.UNSPECIFIED,
                this.textPre = "",
                this.textPost = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new T).fromBinary(e, t)
--
            static fromJson(e, t) {
                return (new T).fromJson(e, t)
            }
--
        class x extends r.Message {
            constructor(e) {
                super(),
                this.text = "",
                this.displayText = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new x).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new x).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new x).fromJsonString(e, t)
            }
--
        class C extends r.Message {
            constructor(e) {
                super(),
                this.isLoading = !1,
                this.isRelevant = !1,
                this.querySuggestions = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new C).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new C).fromJsonString(e, t)
--
        class k extends r.Message {
            constructor(e) {
                super(),
                this.status = {
                    case: void 0
                },
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new k).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new k).fromJsonString(e, t)
--
        class M extends r.Message {
            constructor(e) {
                super(),
                this.text = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new M).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new M).fromJson(e, t)
            }
--
                return (new M).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class L extends r.Message {
            constructor(e) {
                super(),
                this.action = {
                    case: void 0
                },
                this.numTokens = 0,
                this.contextItems = [],
                this.latestIntent = s.CHAT_INTENT_UNSPECIFIED,
                this.knowledgeBaseItems = [],
                r.proto3.util.initPartial(e, this)
            }
--
                return (new L).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
        class I extends r.Message {
            constructor(e) {
                super(),
                this.messageId = "",
                this.source = a.ChatMessageSource.UNSPECIFIED,
                this.conversationId = "",
                this.content = {
                    case: void 0
                },
                this.inProgress = !1,
                this.redact = !1,
                r.proto3.util.initPartial(e, this)
--
            static fromBinary(e, t) {
                return (new I).fromBinary(e, t)
            }
--
        class N extends r.Message {
            constructor(e) {
                super(),
                this.messages = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new N).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new N).fromJson(e, t)
            }
--
                return (new N).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class O extends r.Message {
            constructor(e) {
                super(),
                this.messageId = "",
                this.source = a.ChatMessageSource.UNSPECIFIED,
                this.prompt = "",
                this.numTokens = 0,
                this.safeForCodeTelemetry = !1,
                this.toolCalls = [],
                this.toolCallId = "",
                this.toolResultIsError = !1,
                this.images = [],
--
                this.signature = "",
                this.thinkingRedacted = !1,
                this.promptAnnotationRanges = [],
--
        class R extends r.Message {
            constructor(e) {
                super(),
                this.type = l.UNSPECIFIED,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new R).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new R).fromJson(e, t)
            }
--
                return (new R).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class D extends r.Message {
            constructor(e) {
                super(),
                this.name = "",
                this.description = "",
                this.jsonSchemaString = "",
                this.strict = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new D).fromBinary(e, t)
            }
--
                return (new D).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class P extends r.Message {
            constructor(e) {
                super(),
                this.choice = {
                    case: void 0
                },
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new P).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new P).fromJsonString(e, t)
--
        class B extends r.Message {
            constructor(e) {
                super(),
                this.query = "",
                this.allowedTypes = [],
                this.includeRepoInfo = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new B).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new B).fromJsonString(e, t)
--
        class F extends r.Message {
            constructor(e) {
                super(),
                this.cciItems = [],
                this.repoInfos = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new F).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new F).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new F).fromJsonString(e, t)
            }
--
        class j extends r.Message {
            constructor(e) {
                super(),
                this.chatMessages = [],
                this.openDocumentUris = [],
                this.workspaceUris = [],
                this.activeSelection = "",
                this.contextInclusionType = a.ContextInclusionType.UNSPECIFIED,
                this.chatModel = a.Model.MODEL_UNSPECIFIED,
                this.systemPromptOverride = "",
                this.chatModelName = "",
                this.openDocumentPathsMigrateMeToUris = [],
--
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
--
        class U extends r.Message {
            constructor(e) {
                super(),
                this.maxOutputTokens = 0,
                this.maxInputTokens = 0,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new U).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new U).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new U).fromJsonString(e, t)
            }
--
        class Y extends r.Message {
            constructor(e) {
                super(),
                this.experimentKey = a.ExperimentKey.UNSPECIFIED,
                this.enabled = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Y).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Y).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new Y).fromJsonString(e, t)
            }
--
        class H extends r.Message {
            constructor(e) {
                super(),
                this.role = a.ChatMessageSource.UNSPECIFIED,
                this.header = "",
                this.content = "",
                this.footer = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new H).fromBinary(e, t)
            }
--
                return (new H).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class ye extends r.Message {
            constructor(e) {
                super(),
                this.prompt = "",
                this.contextPrompt = "",
                this.uid = "",
                this.promptElementRanges = [],
                this.promptElementKindInfos = [],
                this.promptLatencyMs = r.protoInt64.zero,
                this.promptStageLatencies = [],
                this.numTokenizedBytes = r.protoInt64.zero,
                this.editorLanguage = "",
--
                this.absolutePathUriForTelemetry = "",
                this.relativePathForTelemetry = "",
                this.workspaceUriForTelemetry = "",
--
        class Ae extends r.Message {
            constructor(e) {
                super(),
                this.numCompletions = r.protoInt64.zero,
                this.maxTokens = r.protoInt64.zero,
                this.maxNewlines = r.protoInt64.zero,
                this.minLogProbability = 0,
                this.temperature = 0,
                this.firstTemperature = 0,
                this.topK = r.protoInt64.zero,
                this.topP = 0,
                this.stopPatterns = [],
--
                this.fimEotProbThreshold = 0,
                this.useFimEotThreshold = !1,
                this.doNotScoreStopTokens = !1,
--
        class Ee extends r.Message {
            constructor(e) {
                super(),
                this.kind = o.UNSPECIFIED,
                this.byteOffsetStart = r.protoInt64.zero,
                this.byteOffsetEnd = r.protoInt64.zero,
                this.tokenOffsetStart = r.protoInt64.zero,
                this.tokenOffsetEnd = r.protoInt64.zero,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ee).fromBinary(e, t)
--
            static fromJson(e, t) {
                return (new Ee).fromJson(e, t)
            }
--
        class be extends r.Message {
            constructor(e) {
                super(),
                this.cortexPlanId = "",
                this.codePlanId = "",
                this.actionIndex = 0,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new be).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new be).fromJsonString(e, t)
--
        class ve extends r.Message {
            constructor(e) {
                super(),
                this.kind = i.UNSPECIFIED,
                this.byteOffsetStart = r.protoInt64.zero,
                this.byteOffsetEnd = r.protoInt64.zero,
                this.suffix = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ve).fromBinary(e, t)
            }
--
                return (new ve).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class we extends r.Message {
            constructor(e) {
                super(),
                this.key = s.UNSPECIFIED,
                this.keyString = "",
                this.disabled = !1,
                this.payload = {
                    case: void 0
                },
                this.source = l.UNSPECIFIED,
                r.proto3.util.initPartial(e, this)
            }
--
                return (new we).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
        class Se extends r.Message {
            constructor(e) {
                super(),
                this.experiments = [],
                this.forceEnableExperiments = [],
                this.forceDisableExperiments = [],
                this.forceEnableExperimentsWithVariants = [],
                this.forceEnableExperimentStrings = [],
                this.forceDisableExperimentStrings = [],
                this.devMode = !1,
                r.proto3.util.initPartial(e, this)
            }
--
                return (new Se).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
        class Te extends r.Message {
            constructor(e) {
                super(),
                this.sha = "",
                this.crc32cLinuxX64 = "",
                this.crc32cLinuxArm = "",
                this.crc32cMacosX64 = "",
                this.crc32cMacosArm = "",
                this.crc32cWindowsX64 = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
--
            }
            static fromJson(e, t) {
                return (new Te).fromJson(e, t)
--
        class xe extends r.Message {
            constructor(e) {
                super(),
                this.modelName = "",
                this.contextCheckModelName = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new xe).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new xe).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new xe).fromJsonString(e, t)
            }
--
        class Ce extends r.Message {
            constructor(e) {
                super(),
                this.modeToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ce).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Ce).fromJson(e, t)
            }
--
                return (new Ce).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class ke extends r.Message {
            constructor(e) {
                super(),
                this.threshold = 0,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ke).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ke).fromJson(e, t)
            }
--
                return (new ke).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Me extends r.Message {
            constructor(e) {
                super(),
                this.sampleRate = 0,
                this.procedureToSampleRate = {},
                this.errorMatchToSampleRate = {},
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Me).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new Me).fromJsonString(e, t)
--
        class Le extends r.Message {
            constructor(e) {
                super(),
                this.teamId = "",
                this.cascadeModelLabels = [],
                this.commandModelLabels = [],
                this.extensionModelLabels = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Le).fromBinary(e, t)
            }
--
                return (new Le).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class Ie extends r.Message {
            constructor(e) {
                super(),
                this.memoryUsageToSampleRate = {},
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ie).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Ie).fromJson(e, t)
            }
--
                return (new Ie).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Ne extends r.Message {
            constructor(e) {
                super(),
                this.choice = {
                    case: void 0
                },
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ne).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new Ne).fromJsonString(e, t)
--
        class Oe extends r.Message {
            constructor(e) {
                super(),
                this.kind = o.UNSPECIFIED,
                this.experimentKey = s.UNSPECIFIED,
                this.enabled = !1,
                this.numConsidered = r.protoInt64.zero,
                this.numIncluded = r.protoInt64.zero,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Oe).fromBinary(e, t)
--
            static fromJson(e, t) {
                return (new Oe).fromJson(e, t)
            }
--
        class Re extends r.Message {
            constructor(e) {
                super(),
                this.included = !1,
                this.exclusionReason = d.EXCLUSION_UNSPECIFIED,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Re).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Re).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new Re).fromJsonString(e, t)
            }
--
        class De extends r.Message {
            constructor(e) {
                super(),
                this.name = "",
                this.latencyMs = r.protoInt64.zero,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new De).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new De).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new De).fromJsonString(e, t)
            }
--
        class Pe extends r.Message {
            constructor(e) {
                super(),
                this.completions = [],
                this.maxTokens = r.protoInt64.zero,
                this.temperature = 0,
                this.topK = r.protoInt64.zero,
                this.topP = 0,
                this.stopPatterns = [],
                this.promptLength = r.protoInt64.zero,
                this.promptId = "",
                this.modelTag = "",
--
            }
            static fromBinary(e, t) {
                return (new Pe).fromBinary(e, t)
--
        class Be extends r.Message {
            constructor(e) {
                super(),
                this.completionId = "",
                this.text = "",
                this.stop = "",
                this.score = 0,
                this.tokens = [],
                this.decodedTokens = [],
                this.probabilities = [],
                this.adjustedProbabilities = [],
                this.generatedLength = r.protoInt64.zero,
--
                this.filterReasons = [],
                this.originalText = "",
                this.toolCalls = [],
--
        class Fe extends r.Message {
            constructor(e) {
                super(),
                this.completionIds = [],
                this.maxTokens = r.protoInt64.zero,
                this.temperature = 0,
                this.topK = r.protoInt64.zero,
                this.topP = 0,
                this.stopPatterns = [],
                this.promptLength = r.protoInt64.zero,
                this.promptId = "",
                this.modelTag = "",
--
            }
            static fromBinary(e, t) {
                return (new Fe).fromBinary(e, t)
--
        class je extends r.Message {
            constructor(e) {
                super(),
                this.totalPrefillPassTime = 0,
                this.avgPrefillPassTime = 0,
                this.numPrefillPasses = r.protoInt64.zero,
                this.totalSpecCopyPassTime = 0,
                this.avgSpecCopyPassTime = 0,
                this.numSpecCopyPasses = r.protoInt64.zero,
                this.totalGenerationPassTime = 0,
                this.avgGenerationPassTime = 0,
                this.numGenerationPasses = r.protoInt64.zero,
--
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
--
        class Ue extends r.Message {
            constructor(e) {
                super(),
                this.timeToFirstPrefillPass = 0,
                this.timeToFirstToken = 0,
                this.totalCompletionTime = 0,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ue).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new Ue).fromJsonString(e, t)
--
        class Ye extends r.Message {
            constructor(e) {
                super(),
                this.decodedToken = new Uint8Array(0),
                this.token = r.protoInt64.zero,
                this.probability = 0,
                this.adjustedProbability = 0,
                this.completionFinished = !1,
                this.stop = "",
                this.stopReason = m.UNSPECIFIED,
                this.attributionStatuses = {},
                r.proto3.util.initPartial(e, this)
--
            static fromBinary(e, t) {
                return (new Ye).fromBinary(e, t)
            }
--
        class He extends r.Message {
            constructor(e) {
                super(),
                this.completions = {},
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new He).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new He).fromJson(e, t)
            }
--
                return (new He).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class qe extends r.Message {
            constructor(e) {
                super(),
                this.completionMaps = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new qe).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new qe).fromJson(e, t)
            }
--
                return (new qe).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Ge extends r.Message {
            constructor(e) {
                super(),
                this.perTokenLogLikelihoods = [],
                this.isGreedy = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ge).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Ge).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new Ge).fromJsonString(e, t)
            }
--
        class Je extends r.Message {
            constructor(e) {
                super(),
                this.payload = {
                    case: void 0
                },
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Je).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new Je).fromJsonString(e, t)
--
        class Ve extends r.Message {
            constructor(e) {
                super(),
                this.apiServerLatencyMs = r.protoInt64.zero,
                this.languageServerLatencyMs = r.protoInt64.zero,
                this.networkLatencyMs = r.protoInt64.zero,
                this.apiServerFirstByteLatencyMs = r.protoInt64.zero,
                this.languageServerFirstByteLatencyMs = r.protoInt64.zero,
                this.networkFirstByteLatencyMs = r.protoInt64.zero,
                this.apiServerFirstLineLatencyMs = r.protoInt64.zero,
                this.languageServerFirstLineLatencyMs = r.protoInt64.zero,
                this.networkFirstLineLatencyMs = r.protoInt64.zero,
--
            }
            static fromBinary(e, t) {
                return (new Ve).fromBinary(e, t)
--
        class ze extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ze).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ze).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(ze, e, t)
--
        class We extends r.Message {
            constructor(e) {
                super(),
                this.prompts = [],
                this.priority = h.UNSPECIFIED,
                this.prefix = _.UNSPECIFIED,
                this.model = u.MODEL_UNSPECIFIED,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new We).fromBinary(e, t)
            }
--
                return (new We).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class Ze extends r.Message {
            constructor(e) {
                super(),
                this.values = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ze).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Ze).fromJson(e, t)
            }
--
                return (new Ze).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Ke extends r.Message {
            constructor(e) {
                super(),
                this.embeddings = [],
                this.promptsExceededContextLength = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ke).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Ke).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new Ke).fromJsonString(e, t)
            }
--
        class $e extends r.Message {
            constructor(e) {
                super(),
                this.prefix = "",
                this.items = [],
                this.hasInstructTokens = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new $e).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new $e).fromJsonString(e, t)
--
        class Xe extends r.Message {
            constructor(e) {
                super(),
                this.values = [],
                this.promptsExceededContextLength = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Xe).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Xe).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new Xe).fromJsonString(e, t)
            }
--
        class Qe extends r.Message {
            constructor(e) {
                super(),
                this.ideName = "",
                this.ideVersion = "",
                this.extensionName = "",
                this.extensionVersion = "",
                this.apiKey = "",
                this.locale = "",
                this.os = "",
                this.hardware = "",
                this.disableTelemetry = !1,
--
                this.requestId = r.protoInt64.zero,
                this.sourceAddress = "",
                this.userAgent = "",
--
        class et extends r.Message {
            constructor(e) {
                super(),
                this.tabSize = r.protoInt64.zero,
                this.insertSpaces = !1,
                this.disableAutocompleteInComments = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new et).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new et).fromJsonString(e, t)
--
        class tt extends r.Message {
            constructor(e) {
                super(),
                this.errorId = "",
                this.timestampUnixMs = r.protoInt64.zero,
                this.stacktrace = "",
                this.recovered = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new tt).fromBinary(e, t)
            }
--
                return (new tt).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class nt extends r.Message {
            constructor(e) {
                super(),
                this.eventType = A.UNSPECIFIED,
                this.eventJson = "",
                this.timestampUnixMs = r.protoInt64.zero,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new nt).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new nt).fromJsonString(e, t)
--
        class rt extends r.Message {
            constructor(e) {
                super(),
                this.searchId = "",
                this.resultId = "",
                this.absolutePath = "",
                this.workspacePaths = [],
                this.text = "",
                this.similarityScore = 0,
                this.numResultsInCluster = r.protoInt64.zero,
                this.representativePath = "",
                this.meanSimilarityScore = 0,
--
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
--
        class at extends r.Message {
            constructor(e) {
                super(),
                this.workspaceMigrateMeToUri = "",
                this.workspaceUri = "",
                this.relativePath = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new at).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new at).fromJsonString(e, t)
--
        class ot extends r.Message {
            constructor(e) {
                super(),
                this.nodeName = "",
                this.startLine = 0,
                this.endLine = 0,
                this.embedType = b.UNSPECIFIED,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ot).fromBinary(e, t)
            }
--
                return (new ot).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class it extends r.Message {
            constructor(e) {
                super(),
                this.completions = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new it).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new it).fromJson(e, t)
            }
--
                return (new it).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class st extends r.Message {
            constructor(e) {
                super(),
                this.workspaceUriForTelemetry = "",
                this.numFilesTotal = r.protoInt64.zero,
                this.numFilesToEmbed = r.protoInt64.zero,
                this.numNodesTotal = r.protoInt64.zero,
                this.numNodesToEmbed = r.protoInt64.zero,
                this.numTokens = r.protoInt64.zero,
                this.numHighPriorityNodesToEmbed = r.protoInt64.zero,
                this.error = "",
                r.proto3.util.initPartial(e, this)
--
            static fromBinary(e, t) {
                return (new st).fromBinary(e, t)
            }
--
        class lt extends r.Message {
            constructor(e) {
                super(),
                this.workspace = "",
                this.numFiles = {},
                this.numBytes = {},
                this.initialScanCompleted = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new lt).fromBinary(e, t)
            }
--
                return (new lt).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class ct extends r.Message {
            constructor(e) {
                super(),
                this.numTotalFiles = 0,
                this.numIndexedFiles = 0,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ct).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ct).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new ct).fromJsonString(e, t)
            }
--
        class ut extends r.Message {
            constructor(e) {
                super(),
                this.rawSource = "",
                this.cleanFunction = "",
                this.docstring = "",
                this.nodeName = "",
                this.params = "",
                this.definitionLine = 0,
                this.startLine = 0,
                this.endLine = 0,
                this.startCol = 0,
--
                this.leadingWhitespace = "",
                this.language = S.UNSPECIFIED,
                this.bodyStartLine = 0,
--
        class dt extends r.Message {
            constructor(e) {
                super(),
                this.rawSource = "",
                this.startLine = 0,
                this.endLine = 0,
                this.startCol = 0,
                this.endCol = 0,
                this.leadingWhitespace = "",
                this.fieldsAndConstructors = [],
                this.docstring = "",
                this.nodeName = "",
--
                this.nodeLineage = [],
                this.isExported = !1,
                this.language = S.UNSPECIFIED,
--
        class mt extends r.Message {
            constructor(e) {
                super(),
                this.label = "",
                this.creditMultiplier = 0,
                this.disabled = !1,
                this.supportsImages = !1,
                this.supportsLegacy = !1,
                this.isPremium = !1,
                this.betaWarningMessage = "",
                this.isBeta = !1,
                r.proto3.util.initPartial(e, this)
--
            static fromBinary(e, t) {
                return (new mt).fromBinary(e, t)
            }
--
        class pt extends r.Message {
            constructor(e) {
                super(),
                this.creditMultiplier = 0,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new pt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new pt).fromJson(e, t)
            }
--
                return (new pt).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class ft extends r.Message {
            constructor(e) {
                super(),
                this.teamsTier = L.UNSPECIFIED,
                this.planName = "",
                this.hasAutocompleteFastMode = !1,
                this.allowStickyPremiumModels = !1,
                this.hasForgeAccess = !1,
                this.disableCodeSnippetTelemetry = !1,
                this.allowPremiumCommandModels = !1,
                this.hasTabToJump = !1,
                this.maxNumPremiumChatMessages = r.protoInt64.zero,
--
                this.maxCustomChatInstructionCharacters = r.protoInt64.zero,
                this.maxNumPinnedContextItems = r.protoInt64.zero,
                this.maxLocalIndexSize = r.protoInt64.zero,
--
        class ht extends r.Message {
            constructor(e) {
                super(),
                this.topUpTransactionStatus = I.UNSPECIFIED,
                this.topUpEnabled = !1,
                this.monthlyTopUpAmount = 0,
                this.topUpSpent = 0,
                this.topUpIncrement = 0,
                this.topUpCriteriaMet = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
--
            }
            static fromJson(e, t) {
                return (new ht).fromJson(e, t)
--
        class _t extends r.Message {
            constructor(e) {
                super(),
                this.availablePromptCredits = 0,
                this.availableFlowCredits = 0,
                this.availableFlexCredits = 0,
                this.usedFlexCredits = 0,
                this.usedFlowCredits = 0,
                this.usedPromptCredits = 0,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
--
            }
            static fromJson(e, t) {
                return (new _t).fromJson(e, t)
--
        class gt extends r.Message {
            constructor(e) {
                super(),
                this.pro = !1,
                this.disableTelemetry = !1,
                this.name = "",
                this.ignoreChatTelemetrySetting = !1,
                this.teamId = "",
                this.teamStatus = x.UNSPECIFIED,
                this.email = "",
                this.userFeatures = [],
                this.teamsFeatures = [],
--
                this.hasUsedWindsurf = !1,
                this.userUsedPromptCredits = r.protoInt64.zero,
                this.userUsedFlowCredits = r.protoInt64.zero,
--
        class yt extends r.Message {
            constructor(e) {
                super(),
                this.info = {
                    case: void 0
                },
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new yt).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new yt).fromJsonString(e, t)
--
        class At extends r.Message {
            constructor(e) {
                super(),
                this.depotName = "",
                this.versionAlias = "",
                this.baseP4dUrl = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new At).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new At).fromJsonString(e, t)
--
        class Et extends r.Message {
            constructor(e) {
                super(),
                this.name = "",
                this.owner = "",
                this.repoName = "",
                this.commit = "",
                this.versionAlias = "",
                this.scmProvider = N.UNSPECIFIED,
                this.baseGitUrl = "",
                r.proto3.util.initPartial(e, this)
            }
--
                return (new Et).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
        class bt extends r.Message {
            constructor(e) {
                super(),
                this.absolutePathMigrateMeToUri = "",
                this.absoluteUri = "",
                this.workspacePaths = [],
                this.nodeName = "",
                this.nodeLineage = [],
                this.startLine = 0,
                this.startCol = 0,
                this.endLine = 0,
                this.endCol = 0,
--
                this.language = S.UNSPECIFIED,
                this.snippetByType = {},
                this.fileContentHash = new Uint8Array(0),
--
        class vt extends r.Message {
            constructor(e) {
                super(),
                this.snippet = "",
                this.wordCountBySplitter = {},
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new vt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new vt).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new vt).fromJsonString(e, t)
            }
--
        class wt extends r.Message {
            constructor(e) {
                super(),
                this.wordCountMap = {},
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new wt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new wt).fromJson(e, t)
            }
--
                return (new wt).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class St extends r.Message {
            constructor(e) {
                super(),
                this.computedName = "",
                this.gitOriginUrl = "",
                this.gitUpstreamUrl = "",
                this.reportedName = "",
                this.modelName = "",
                this.submoduleUrl = "",
                this.submodulePath = "",
                r.proto3.util.initPartial(e, this)
            }
--
                return (new St).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
        class Tt extends r.Message {
            constructor(e) {
                super(),
                this.promptId = "",
                this.filePath = "",
                this.originalFileContent = "",
                this.completionText = "",
                this.startOffset = r.protoInt64.zero,
                this.endOffset = r.protoInt64.zero,
                this.cursorLine = r.protoInt64.zero,
                this.cursorColumn = r.protoInt64.zero,
                r.proto3.util.initPartial(e, this)
--
            static fromBinary(e, t) {
                return (new Tt).fromBinary(e, t)
            }
--
        class xt extends r.Message {
            constructor(e) {
                super(),
                this.numAcceptances = 0,
                this.numRejections = 0,
                this.numLinesAccepted = 0,
                this.numBytesAccepted = 0,
                this.numUsers = 0,
                this.activeDeveloperDays = 0,
                this.activeDeveloperHours = 0,
                r.proto3.util.initPartial(e, this)
            }
--
                return (new xt).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
        class Ct extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ct).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Ct).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(Ct, e, t)
--
        class kt extends r.Message {
            constructor(e) {
                super(),
                this.language = S.UNSPECIFIED,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new kt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new kt).fromJson(e, t)
            }
--
                return (new kt).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Mt extends r.Message {
            constructor(e) {
                super(),
                this.chatsSent = r.protoInt64.zero,
                this.chatsReceived = r.protoInt64.zero,
                this.chatsAccepted = r.protoInt64.zero,
                this.chatsInsertedAtCursor = r.protoInt64.zero,
                this.chatsApplied = r.protoInt64.zero,
                this.chatLocUsed = r.protoInt64.zero,
                this.chatCodeBlocksUsed = r.protoInt64.zero,
                this.functionExplainCount = r.protoInt64.zero,
                this.functionDocstringCount = r.protoInt64.zero,
--
                this.codeBlockExplainCount = r.protoInt64.zero,
                this.codeBlockRefactorCount = r.protoInt64.zero,
                this.problemExplainCount = r.protoInt64.zero,
--
        class Lt extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Lt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Lt).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(Lt, e, t)
--
        class It extends r.Message {
            constructor(e) {
                super(),
                this.modelId = u.MODEL_UNSPECIFIED,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new It).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new It).fromJson(e, t)
            }
--
                return (new It).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Nt extends r.Message {
            constructor(e) {
                super(),
                this.numCommands = r.protoInt64.zero,
                this.numCommandsAccepted = r.protoInt64.zero,
                this.numCommandsRejected = r.protoInt64.zero,
                this.numEdits = r.protoInt64.zero,
                this.numGenerations = r.protoInt64.zero,
                this.locAdded = r.protoInt64.zero,
                this.locRemoved = r.protoInt64.zero,
                this.bytesAdded = r.protoInt64.zero,
                this.bytesRemoved = r.protoInt64.zero,
--
                this.bytesSelected = r.protoInt64.zero,
                this.numCommandsBySource = {},
                r.proto3.util.initPartial(e, this)
--
        class Ot extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ot).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Ot).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(Ot, e, t)
--
        class Rt extends r.Message {
            constructor(e) {
                super(),
                this.name = "",
                this.email = "",
                this.apiKey = "",
                this.disableCodeium = !1,
                this.activeDays = 0,
                this.role = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
--
            }
            static fromJson(e, t) {
                return (new Rt).fromJson(e, t)
--
        class Dt extends r.Message {
            constructor(e) {
                super(),
                this.event = V.CASCADE_NUX_EVENT_UNSPECIFIED,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Dt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Dt).fromJson(e, t)
            }
--
                return (new Dt).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Pt extends r.Message {
            constructor(e) {
                super(),
                this.event = z.USER_NUX_EVENT_UNSPECIFIED,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Pt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Pt).fromJson(e, t)
            }
--
                return (new Pt).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Bt extends r.Message {
            constructor(e) {
                super(),
                this.openMostRecentChatConversation = !1,
                this.lastSelectedModel = u.MODEL_UNSPECIFIED,
                this.themePreference = U.UNSPECIFIED,
                this.extensionPanelTab = G.UNSPECIFIED,
                this.fontSize = Y.UNSPECIFIED,
                this.rememberLastModelSelection = J.UNSPECIFIED,
                this.autocompleteSpeed = H.UNSPECIFIED,
                this.lastSelectedModelName = "",
                this.cascadeNuxStates = [],
--
                this.cascadeDeniedCommands = [],
                this.userNuxStates = [],
                this.cascadeWebSearchDisabled = !1,
--
        class Ft extends r.Message {
            constructor(e) {
                super(),
                this.supportsContextTokens = !1,
                this.requiresInstructTags = !1,
                this.requiresFimContext = !1,
                this.requiresContextSnippetPrefix = !1,
                this.requiresContextRelevanceTags = !1,
                this.requiresLlama3Tokens = !1,
                this.zeroShotCapable = !1,
                this.requiresAutocompleteAsCommand = !1,
                this.supportsCursorAwareSupercomplete = !1,
--
                this.supportsToolCalls = !1,
                this.supportsCumulativeContext = !1,
                this.tabJumpPrintLineRange = !1,
--
        class jt extends r.Message {
            constructor(e) {
                super(),
                this.isInternal = !1,
                this.modelId = u.MODEL_UNSPECIFIED,
                this.modelName = "",
                this.baseUrl = "",
                this.apiKey = "",
                this.accessKey = "",
                this.secretAccessKey = "",
                this.region = "",
                this.projectId = "",
--
                this.maxCompletionTokens = 0,
                this.maxInputTokens = 0,
                r.proto3.util.initPartial(e, this)
--
        class Ut extends r.Message {
            constructor(e) {
                super(),
                this.modelId = u.MODEL_UNSPECIFIED,
                this.isInternal = !1,
                this.modelType = $.UNSPECIFIED,
                this.maxTokens = 0,
                this.tokenizerType = "",
                this.apiProvider = X.API_PROVIDER_UNSPECIFIED,
                this.modelName = "",
                this.supportsContext = !1,
                this.embedDim = 0,
--
                this.chatModelName = "",
                this.maxOutputTokens = 0,
                this.promptTemplaterType = _e.UNSPECIFIED,
--
        class Yt extends r.Message {
            constructor(e) {
                super(),
                this.modelMap = {},
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Yt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Yt).fromJson(e, t)
            }
--
                return (new Yt).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Ht extends r.Message {
            constructor(e) {
                super(),
                this.providerMap = {},
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ht).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Ht).fromJson(e, t)
            }
--
                return (new Ht).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class qt extends r.Message {
            constructor(e) {
                super(),
                this.weight = 0,
                this.cacheTtlMinutes = 0,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new qt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new qt).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new qt).fromJsonString(e, t)
            }
--
        class Gt extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Gt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Gt).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(Gt, e, t)
--
        class Jt extends r.Message {
            constructor(e) {
                super(),
                this.uid = "",
                this.completionId = "",
                this.filePath = "",
                this.shortPrefix = "",
                this.completionText = "",
                this.shortSuffix = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
--
            }
            static fromJson(e, t) {
                return (new Jt).fromJson(e, t)
--
        class Vt extends r.Message {
            constructor(e) {
                super(),
                this.name = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Vt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Vt).fromJson(e, t)
            }
--
                return (new Vt).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class zt extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new zt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new zt).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(zt, e, t)
--
        class Wt extends r.Message {
            constructor(e) {
                super(),
                this.snippetType = P.UNSPECIFIED,
                this.startOffset = r.protoInt64.zero,
                this.endOffset = r.protoInt64.zero,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Wt).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new Wt).fromJsonString(e, t)
--
        class Zt extends r.Message {
            constructor(e) {
                super(),
                this.absolutePathMigrateMeToUri = "",
                this.absoluteUri = "",
                this.workspaceRelativePathsMigrateMeToWorkspaceUris = {},
                this.workspaceUrisToRelativePaths = {},
                this.numFiles = 0,
                this.numBytes = r.protoInt64.zero,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
--
            }
            static fromJson(e, t) {
                return (new Zt).fromJson(e, t)
--
        class Kt extends r.Message {
            constructor(e) {
                super(),
                this.absoluteUri = "",
                this.startLine = 0,
                this.endLine = 0,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Kt).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new Kt).fromJsonString(e, t)
--
        class $t extends r.Message {
            constructor(e) {
                super(),
                this.content = "",
                this.identifier = {
                    case: void 0
                },
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new $t).fromBinary(e, t)
            }
--
                return (new $t).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class Xt extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Xt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Xt).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(Xt, e, t)
--
        class Qt extends r.Message {
            constructor(e) {
                super(),
                this.relativePath = "",
                this.isDir = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Qt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Qt).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new Qt).fromJsonString(e, t)
            }
--
        class en extends r.Message {
            constructor(e) {
                super(),
                this.documentId = "",
                this.index = ce.UNSPECIFIED,
                this.documentType = ee.UNSPECIFIED,
                this.displayName = "",
                this.description = "",
                this.displaySource = "",
                this.url = "",
                r.proto3.util.initPartial(e, this)
            }
--
                return (new en).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
        class tn extends r.Message {
            constructor(e) {
                super(),
                this.timestampStr = "",
                this.type = "",
                this.output = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new tn).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new tn).fromJsonString(e, t)
--
        class nn extends r.Message {
            constructor(e) {
                super(),
                this.lines = [],
                this.serverAddress = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new nn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new nn).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new nn).fromJsonString(e, t)
            }
--
        class rn extends r.Message {
            constructor(e) {
                super(),
                this.tagName = "",
                this.outerHtml = "",
                this.id = "",
                this.reactComponentName = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new rn).fromBinary(e, t)
            }
--
                return (new rn).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class an extends r.Message {
            constructor(e) {
                super(),
                this.recipeId = "",
                this.title = "",
                this.description = "",
                this.systemPrompt = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new an).fromBinary(e, t)
            }
--
                return (new an).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class on extends r.Message {
            constructor(e) {
                super(),
                this.scopeItem = {
                    case: void 0
                },
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new on).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new on).fromJsonString(e, t)
--
        class sn extends r.Message {
            constructor(e) {
                super(),
                this.items = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new sn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new sn).fromJson(e, t)
            }
--
                return (new sn).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class ln extends r.Message {
            constructor(e) {
                super(),
                this.nodeName = "",
                this.graphStateJson = new Uint8Array(0),
                this.graphStateJsonNumBytes = r.protoInt64.zero,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ln).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new ln).fromJsonString(e, t)
--
        class cn extends r.Message {
            constructor(e) {
                super(),
                this.history = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new cn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new cn).fromJson(e, t)
            }
--
                return (new cn).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class un extends r.Message {
            constructor(e) {
                super(),
                this.items = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new un).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new un).fromJson(e, t)
            }
--
                return (new un).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class dn extends r.Message {
            constructor(e) {
                super(),
                this.guideline = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new dn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new dn).fromJson(e, t)
            }
--
                return (new dn).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class mn extends r.Message {
            constructor(e) {
                super(),
                this.model = u.MODEL_UNSPECIFIED,
                this.maxInputTokens = 0,
                this.temperature = 0,
                this.maxOutputTokens = 0,
                this.orderSnippetsByFile = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new mn).fromBinary(e, t)
--
            static fromJson(e, t) {
                return (new mn).fromJson(e, t)
            }
--
        class pn extends r.Message {
            constructor(e) {
                super(),
                this.shouldBatchCcis = !1,
                this.maxTokensPerSubrange = r.protoInt64.zero,
                this.numParserWorkers = r.protoInt64.zero,
                this.numWorkersPerDistributedScorer = r.protoInt64.zero,
                this.verbose = !1,
                this.ignoreExtensions = [],
                this.ignoreDirectoryStubs = [],
                this.minTokenSpaceForContext = 0,
                this.maxTargetFiles = 0,
--
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
--
        class fn extends r.Message {
            constructor(e) {
                super(),
                this.deltaText = "",
                this.deltaTokens = 0,
                this.stopReason = m.UNSPECIFIED,
                this.deltaToolCalls = [],
                this.deltaThinking = "",
                this.deltaSignature = "",
                this.thinkingRedacted = !1,
                r.proto3.util.initPartial(e, this)
            }
--
                return (new fn).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
        class hn extends r.Message {
            constructor(e) {
                super(),
                this.deltas = {},
                this.prompt = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new hn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new hn).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new hn).fromJsonString(e, t)
            }
--
        class _n extends r.Message {
            constructor(e) {
                super(),
                this.prompt = "",
                this.inferenceAddress = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new _n).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new _n).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new _n).fromJsonString(e, t)
            }
--
        class gn extends r.Message {
            constructor(e) {
                super(),
                this.id = "",
                this.name = "",
                this.argumentsJson = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new gn).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new gn).fromJsonString(e, t)
--
        class yn extends r.Message {
            constructor(e) {
                super(),
                this.level = re.UNSPECIFIED,
                this.message = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new yn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new yn).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new yn).fromJsonString(e, t)
            }
--
        class An extends r.Message {
            constructor(e) {
                super(),
                this.row = r.protoInt64.zero,
                this.col = r.protoInt64.zero,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new An).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new An).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new An).fromJsonString(e, t)
            }
--
        class En extends r.Message {
            constructor(e) {
                super(),
                this.startOffset = r.protoInt64.zero,
                this.endOffset = r.protoInt64.zero,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new En).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new En).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new En).fromJsonString(e, t)
            }
--
        class bn extends r.Message {
            constructor(e) {
                super(),
                this.absolutePathMigrateMeToUri = "",
                this.absoluteUri = "",
                this.relativePathMigrateMeToWorkspaceUri = "",
                this.workspaceUri = "",
                this.text = "",
                this.editorLanguage = "",
                this.language = S.UNSPECIFIED,
                this.cursorOffset = r.protoInt64.zero,
                this.lineEnding = "",
--
                this.isCutoffEnd = !1,
                this.linesCutoffStart = 0,
                this.linesCutoffEnd = 0,
--
        class vn extends r.Message {
            constructor(e) {
                super(),
                this.otherDocuments = [],
                this.codeContextItems = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new vn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new vn).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new vn).fromJsonString(e, t)
            }
--
        class wn extends r.Message {
            constructor(e) {
                super(),
                this.chunk = {
                    case: void 0
                },
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new wn).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new wn).fromJsonString(e, t)
--
        class Sn extends r.Message {
            constructor(e) {
                super(),
                this.matchRepoName = "",
                this.matchPath = "",
                this.pinnedContexts = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Sn).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new Sn).fromJsonString(e, t)
--
        class Tn extends r.Message {
            constructor(e) {
                super(),
                this.contextItem = {
                    case: void 0
                },
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Tn).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new Tn).fromJsonString(e, t)
--
        class xn extends r.Message {
            constructor(e) {
                super(),
                this.remoteRepoName = "",
                this.version = "",
                this.relativePath = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new xn).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new xn).fromJsonString(e, t)
--
        class Cn extends r.Message {
            constructor(e) {
                super(),
                this.pinnedContextConfigs = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Cn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Cn).fromJson(e, t)
            }
--
                return (new Cn).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class kn extends r.Message {
            constructor(e) {
                super(),
                this.id = "",
                this.prompt = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new kn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new kn).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new kn).fromJsonString(e, t)
            }
--
        class Mn extends r.Message {
            constructor(e) {
                super(),
                this.id = "",
                this.startLine = 0,
                this.endLine = 0,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Mn).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new Mn).fromJsonString(e, t)
--
        class Ln extends r.Message {
            constructor(e) {
                super(),
                this.logs = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ln).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Ln).fromJson(e, t)
            }
--
                return (new Ln).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class In extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new In).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new In).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(In, e, t)
--
        class Nn extends r.Message {
            constructor(e) {
                super(),
                this.backend = {
                    case: void 0
                },
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Nn).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new Nn).fromJsonString(e, t)
--
        class On extends r.Message {
            constructor(e) {
                super(),
                this.faissStateStats = [],
                this.totalItemCount = r.protoInt64.zero,
                this.quantized = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new On).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new On).fromJsonString(e, t)
--
        class Rn extends r.Message {
            constructor(e) {
                super(),
                this.embeddingSource = g.UNSPECIFIED,
                this.workspace = "",
                this.itemCount = r.protoInt64.zero,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Rn).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new Rn).fromJsonString(e, t)
--
        class Dn extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Dn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Dn).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(Dn, e, t)
--
        class Pn extends r.Message {
            constructor(e) {
                super(),
                this.type = oe.UNSPECIFIED,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Pn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Pn).fromJson(e, t)
            }
--
                return (new Pn).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Bn extends r.Message {
            constructor(e) {
                super(),
                this.model = u.MODEL_UNSPECIFIED,
                this.inputTokens = r.protoInt64.zero,
                this.outputTokens = r.protoInt64.zero,
                this.cacheWriteTokens = r.protoInt64.zero,
                this.cacheReadTokens = r.protoInt64.zero,
                this.apiProvider = X.API_PROVIDER_UNSPECIFIED,
                this.messageId = "",
                this.responseHeader = {},
                r.proto3.util.initPartial(e, this)
--
            static fromBinary(e, t) {
                return (new Bn).fromBinary(e, t)
            }
--
        class Fn extends r.Message {
            constructor(e) {
                super(),
                this.reason = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Fn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Fn).fromJson(e, t)
            }
--
                return (new Fn).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class jn extends r.Message {
            constructor(e) {
                super(),
                this.message = "",
                this.severity = "",
                this.source = "",
                this.uri = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new jn).fromBinary(e, t)
            }
--
                return (new jn).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class Un extends r.Message {
            constructor(e) {
                super(),
                this.text = "",
                this.label = "",
                this.labelDetail = "",
                this.description = "",
                this.detail = "",
                this.documentation = "",
                this.kind = "",
                this.selected = !1,
                r.proto3.util.initPartial(e, this)
--
            static fromBinary(e, t) {
                return (new Un).fromBinary(e, t)
            }
--
        class Yn extends r.Message {
            constructor(e) {
                super(),
                this.overlappedCodeContextItems = [],
                this.firstElementSuffixOverlap = 0,
                this.lastElementPrefixOverlap = 0,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Yn).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new Yn).fromJsonString(e, t)
--
        class Hn extends r.Message {
            constructor(e) {
                super(),
                this.text = "",
                this.cursorOffset = 0,
                this.startLine = 0,
                this.endLine = 0,
                this.useCharacterPosition = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Hn).fromBinary(e, t)
--
            static fromJson(e, t) {
                return (new Hn).fromJson(e, t)
            }
--
        class qn extends r.Message {
            constructor(e) {
                super(),
                this.element = {
                    case: void 0
                },
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new qn).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new qn).fromJsonString(e, t)
--
        class Gn extends r.Message {
            constructor(e) {
                super(),
                this.elements = [],
                this.startIndex = r.protoInt64.zero,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Gn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Gn).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new Gn).fromJsonString(e, t)
            }
--
        class Jn extends r.Message {
            constructor(e) {
                super(),
                this.eventName = "",
                this.apiKey = "",
                this.installationId = "",
                this.ideName = "",
                this.os = "",
                this.codeiumVersion = "",
                this.ideVersion = "",
                this.durationMs = r.protoInt64.zero,
                this.extra = {},
--
            }
            static fromBinary(e, t) {
                return (new Jn).fromBinary(e, t)
--
        class Vn extends r.Message {
            constructor(e) {
                super(),
                this.id = "",
                this.name = "",
                this.description = "",
                this.codebaseRootUri = "",
                this.fileNames = [],
                this.commitMessages = [],
                this.commitSha = [],
                this.commitDescriptions = [],
                this.fileDescriptions = [],
--
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
--
        class zn extends r.Message {
            constructor(e) {
                super(),
                this.clusters = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new zn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new zn).fromJson(e, t)
            }
--
                return (new zn).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Wn extends r.Message {
            constructor(e) {
                super(),
                this.chunkType = {
                    case: void 0
                },
                this.position = 0,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Wn).fromBinary(e, t)
            }
--
                return (new Wn).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class Zn extends r.Message {
            constructor(e) {
                super(),
                this.documentId = "",
                this.url = "",
                this.title = "",
                this.chunks = [],
                this.summary = "",
                this.text = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
--
            }
            static fromJson(e, t) {
                return (new Zn).fromJson(e, t)
--
        class Kn extends r.Message {
            constructor(e) {
                super(),
                this.score = 0,
                this.indexName = "",
                this.documentSourceName = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Kn).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new Kn).fromJsonString(e, t)
--
        class $n extends r.Message {
            constructor(e) {
                super(),
                this.description = "",
                this.children = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new $n).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new $n).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new $n).fromJsonString(e, t)
            }
--
        class Xn extends r.Message {
            constructor(e) {
                super(),
                this.base64Data = "",
                this.mimeType = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Xn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Xn).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new Xn).fromJsonString(e, t)
            }
--
        class Qn extends r.Message {
            constructor(e) {
                super(),
                this.headers = [],
                this.text = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Qn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Qn).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new Qn).fromJsonString(e, t)
            }
--
        class er extends r.Message {
            constructor(e) {
                super(),
                this.type = ue.UNSPECIFIED,
                this.text = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new er).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new er).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new er).fromJsonString(e, t)
            }
--
        class tr extends r.Message {
            constructor(e) {
                super(),
                this.terminalId = "",
                this.shellPid = 0,
                this.commandLine = "",
                this.cwd = "",
                this.source = de.UNSPECIFIED,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new tr).fromBinary(e, t)
--
            static fromJson(e, t) {
                return (new tr).fromJson(e, t)
            }
--
        class nr extends r.Message {
            constructor(e) {
                super(),
                this.rawData = new Uint8Array(0),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new nr).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new nr).fromJson(e, t)
            }
--
                return (new nr).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class rr extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new rr).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new rr).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(rr, e, t)
--
        class ar extends r.Message {
            constructor(e) {
                super(),
                this.value = {
                    case: void 0
                },
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ar).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new ar).fromJsonString(e, t)
--
        class or extends r.Message {
            constructor(e) {
                super(),
                this.shellPid = 0,
                this.commandLine = "",
                this.cwd = "",
                this.output = new Uint8Array(0),
                this.status = me.UNSPECIFIED,
                this.source = de.UNSPECIFIED,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
--
            }
            static fromJson(e, t) {
                return (new or).fromJson(e, t)
--
        class ir extends r.Message {
            constructor(e) {
                super(),
                this.terminalId = "",
                this.platform = "",
                this.cwd = "",
                this.shellName = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ir).fromBinary(e, t)
            }
--
                return (new ir).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class sr extends r.Message {
            constructor(e) {
                super(),
                this.windsurfProjectId = "",
                this.authUid = "",
                this.deploymentProvider = fe.UNSPECIFIED,
                this.providerProjectId = "",
                this.projectName = "",
                this.domain = "",
                this.subdomainName = "",
                this.projectUrl = "",
                r.proto3.util.initPartial(e, this)
--
            static fromBinary(e, t) {
                return (new sr).fromBinary(e, t)
            }
--
        class lr extends r.Message {
            constructor(e) {
                super(),
                this.windsurfDeploymentId = "",
                this.authUid = "",
                this.deploymentProvider = fe.UNSPECIFIED,
                this.providerDeploymentId = "",
                this.windsurfProjectId = "",
                this.projectId = "",
                this.projectName = "",
                this.workspacePath = "",
                this.domain = "",
--
                this.deploymentUrl = "",
                this.buildStatusUrl = "",
                this.projectUrl = "",
--
        class cr extends r.Message {
            constructor(e) {
                super(),
                this.label = "",
                this.value = {
                    case: void 0
                },
                this.synonyms = [],
                this.isFeatured = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
--
            }
            static fromJson(e, t) {
                return (new cr).fromJson(e, t)
--
        class ur extends r.Message {
            constructor(e) {
                super(),
                this.teamId = "",
                this.userPromptCreditCap = 0,
                this.userFlowCreditCap = 0,
                this.autoProvisionCascadeSeat = !1,
                this.allowMcpServers = !1,
                this.allowAutoRunCommands = !1,
                this.allowCustomRecipes = !1,
                this.maxUnclaimedSites = 0,
                this.allowAppDeployments = !1,
--
                this.allowGithubReviews = !1,
                this.allowGithubDescriptionEdits = !1,
                this.pullRequestReviewGuidelines = "",
--
        class dr extends r.Message {
            constructor(e) {
                super(),
                this.projectId = "",
                this.framework = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new dr).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new dr).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new dr).fromJsonString(e, t)
            }
--
        class mr extends r.Message {
            constructor(e) {
                super(),
                this.title = "",
                this.id = "",
                this.link = "",
                this.description = "",
                this.commands = {},
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new mr).fromBinary(e, t)
--
            static fromJson(e, t) {
                return (new mr).fromJson(e, t)
            }
--
        class pr extends r.Message {
            constructor(e) {
                super(),
                this.variables = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new pr).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new pr).fromJson(e, t)
            }
--
                return (new pr).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class fr extends r.Message {
            constructor(e) {
                super(),
                this.command = "",
                this.args = [],
                this.env = {},
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new fr).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new fr).fromJsonString(e, t)
--
        class hr extends r.Message {
            constructor(e) {
                super(),
                this.name = "",
                this.title = "",
                this.description = "",
                this.link = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new hr).fromBinary(e, t)
            }
--
                return (new hr).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class _r extends r.Message {
            constructor(e) {
                super(),
                this.userId = "",
                this.sessionId = "",
                this.properties = {},
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new _r).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new _r).fromJsonString(e, t)
--
        class gr extends r.Message {
            constructor(e) {
                super(),
                this.name = "",
                this.value = 0,
                this.details = {},
                this.lowerBetter = !1,
                this.isBool = !1,
                this.error = "",
                this.trajectoryId = "",
                r.proto3.util.initPartial(e, this)
            }
--
                return (new gr).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
        class yr extends r.Message {
            constructor(e) {
                super(),
                this.model = u.MODEL_UNSPECIFIED,
                this.message = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new yr).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new yr).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new yr).fromJsonString(e, t)
            }
--
        class Ar extends r.Message {
            constructor(e) {
                super(),
                this.modelNotifications = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ar).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Ar).fromJson(e, t)
            }
--
                return (new Ar).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class l extends r.Message {
            constructor(e) {
                super(),
                this.lines = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new l).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new l).fromJson(e, t)
            }
--
                return (new l).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class c extends r.Message {
            constructor(e) {
                super(),
                this.text = "",
                this.type = o.UNSPECIFIED,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new c).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new c).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new c).fromJsonString(e, t)
            }
--
        class u extends r.Message {
            constructor(e) {
                super(),
                this.startLine = 0,
                this.endLine = 0,
                this.fromLanguage = a.Language.UNSPECIFIED,
                this.toLanguage = a.Language.UNSPECIFIED,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new u).fromBinary(e, t)
            }
--
                return (new u).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class d extends r.Message {
            constructor(e) {
                super(),
                this.text = "",
                this.type = i.UNSPECIFIED,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new d).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new d).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new d).fromJsonString(e, t)
            }
--
        class m extends r.Message {
            constructor(e) {
                super(),
                this.changes = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new m).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new m).fromJson(e, t)
            }
--
                return (new m).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class p extends r.Message {
            constructor(e) {
                super(),
                this.text = "",
                this.type = i.UNSPECIFIED,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new p).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new p).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new p).fromJsonString(e, t)
            }
--
        class f extends r.Message {
            constructor(e) {
                super(),
                this.lines = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new f).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new f).fromJson(e, t)
            }
--
                return (new f).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class h extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new h).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new h).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(h, e, t)
--
        class _ extends r.Message {
            constructor(e) {
                super(),
                this.diffs = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new _).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new _).fromJson(e, t)
            }
--
                return (new _).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class s extends r.Message {
            constructor(e) {
                super(),
                this.version = 0,
                this.enterpriseVersion = 0,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new s).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new s).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new s).fromJsonString(e, t)
            }
--
        class l extends r.Message {
            constructor(e) {
                super(),
                this.cciTimeoutSecs = 0,
                this.indexMode = o.UNSPECIFIED,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new l).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new l).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new l).fromJsonString(e, t)
            }
--
        class c extends r.Message {
            constructor(e) {
                super(),
                this.gitUrl = "",
                this.scmProvider = a.ScmProvider.UNSPECIFIED,
                this.storeSnippets = !1,
                this.whitelistedGroups = [],
                this.useGithubApp = !1,
                this.authUid = "",
                this.email = "",
                this.serviceKeyId = "",
                r.proto3.util.initPartial(e, this)
--
            static fromBinary(e, t) {
                return (new c).fromBinary(e, t)
            }
--
        class u extends r.Message {
            constructor(e) {
                super(),
                this.branchName = "",
                this.maxNumAutoIndexes = 0,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new u).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new u).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new u).fromJsonString(e, t)
            }
--
        class d extends r.Message {
            constructor(e) {
                super(),
                this.enablePrune = !1,
                this.enableSmallestRepoFirst = !1,
                this.enableRoundRobin = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new d).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new d).fromJsonString(e, t)
--
        class m extends r.Message {
            constructor(e) {
                super(),
                this.numEmbeddings = r.protoInt64.zero,
                this.indexBytesCount = r.protoInt64.zero,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new m).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new m).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new m).fromJsonString(e, t)
            }
--
        class p extends r.Message {
            constructor(e) {
                super(),
                this.progress = 0,
                this.text = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new p).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new p).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new p).fromJsonString(e, t)
            }
--
        class f extends r.Message {
            constructor(e) {
                super(),
                this.id = "",
                this.repoName = "",
                this.workspace = "",
                this.status = i.UNSPECIFIED,
                this.statusDetail = "",
                this.autoIndexed = !1,
                this.hasSnippets = !1,
                this.authUid = "",
                this.email = "",
--
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
--
        class h extends r.Message {
            constructor(e) {
                super(),
                this.size = r.protoInt64.zero,
                this.fileCount = r.protoInt64.zero,
                this.sizeNoIgnore = r.protoInt64.zero,
                this.fileCountNoIgnore = r.protoInt64.zero,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new h).fromBinary(e, t)
            }
--
                return (new h).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class _ extends r.Message {
            constructor(e) {
                super(),
                this.repoName = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new _).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new _).fromJson(e, t)
            }
--
                return (new _).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class g extends r.Message {
            constructor(e) {
                super(),
                this.version = {
                    case: void 0
                },
                this.versionAlias = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new g).fromBinary(e, t)
            }
--
                return (new g).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class y extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.authUid = "",
                this.serviceKey = "",
                this.forceTargetPublicIndex = !1,
                this.forceTeamId = "",
                this.serviceKeyId = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
--
            }
            static fromJson(e, t) {
                return (new y).fromJson(e, t)
--
        class A extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new A).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new A).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(A, e, t)
--
        class E extends r.Message {
            constructor(e) {
                super(),
                this.repoName = "",
                this.indexId = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new E).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new E).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new E).fromJsonString(e, t)
            }
--
        class b extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new b).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new b).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(b, e, t)
--
        class v extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new v).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new v).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(v, e, t)
--
        class w extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new w).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new w).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(w, e, t)
--
        class S extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new S).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new S).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(S, e, t)
--
        class T extends r.Message {
            constructor(e) {
                super(),
                this.repoName = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new T).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new T).fromJson(e, t)
            }
--
                return (new T).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class x extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new x).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new x).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(x, e, t)
--
        class C extends r.Message {
            constructor(e) {
                super(),
                this.repoName = "",
                this.repoNames = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new C).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new C).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new C).fromJsonString(e, t)
            }
--
        class k extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new k).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new k).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(k, e, t)
--
        class M extends r.Message {
            constructor(e) {
                super(),
                this.repoName = "",
                this.groupId = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new M).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new M).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new M).fromJsonString(e, t)
            }
--
        class L extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new L).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new L).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(L, e, t)
--
        class I extends r.Message {
            constructor(e) {
                super(),
                this.repositories = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new I).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new I).fromJson(e, t)
            }
--
                return (new I).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class N extends r.Message {
            constructor(e) {
                super(),
                this.repoName = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new N).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new N).fromJson(e, t)
            }
--
                return (new N).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class O extends r.Message {
            constructor(e) {
                super(),
                this.indexes = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new O).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new O).fromJson(e, t)
            }
--
                return (new O).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class R extends r.Message {
            constructor(e) {
                super(),
                this.indexId = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new R).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new R).fromJson(e, t)
            }
--
                return (new R).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class D extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new D).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new D).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(D, e, t)
--
        class P extends r.Message {
            constructor(e) {
                super(),
                this.indexId = "",
                this.cciCount = r.protoInt64.zero,
                this.snippetCount = r.protoInt64.zero,
                this.embeddingCount = r.protoInt64.zero,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new P).fromBinary(e, t)
            }
--
                return (new P).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class B extends r.Message {
            constructor(e) {
                super(),
                this.indexIds = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new B).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new B).fromJson(e, t)
            }
--
                return (new B).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class F extends r.Message {
            constructor(e) {
                super(),
                this.indexStats = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new F).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new F).fromJson(e, t)
            }
--
                return (new F).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class j extends r.Message {
            constructor(e) {
                super(),
                this.repoName = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new j).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new j).fromJson(e, t)
            }
--
                return (new j).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class U extends r.Message {
            constructor(e) {
                super(),
                this.indexId = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new U).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new U).fromJson(e, t)
            }
--
                return (new U).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Y extends r.Message {
            constructor(e) {
                super(),
                this.indexId = "",
                this.indexIds = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Y).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Y).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new Y).fromJsonString(e, t)
            }
--
        class H extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new H).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new H).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(H, e, t)
--
        class q extends r.Message {
            constructor(e) {
                super(),
                this.indexId = "",
                this.indexIds = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new q).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new q).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new q).fromJsonString(e, t)
            }
--
        class G extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new G).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new G).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(G, e, t)
--
        class J extends r.Message {
            constructor(e) {
                super(),
                this.indexId = "",
                this.indexIds = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new J).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new J).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new J).fromJsonString(e, t)
            }
--
        class V extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new V).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new V).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(V, e, t)
--
        class z extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new z).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new z).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(z, e, t)
--
        class W extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new W).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new W).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(W, e, t)
--
        class Z extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Z).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Z).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(Z, e, t)
--
        class K extends r.Message {
            constructor(e) {
                super(),
                this.databaseTotalBytesCount = r.protoInt64.zero,
                this.tableTotalBytesCount = r.protoInt64.zero,
                this.indexTotalBytesCount = r.protoInt64.zero,
                this.estimatePrunableBytes = r.protoInt64.zero,
                this.isPruning = !1,
                this.lastPruneError = "",
                this.allTablesBytesCount = r.protoInt64.zero,
                r.proto3.util.initPartial(e, this)
            }
--
                return (new K).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
        class $ extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new $).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new $).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals($, e, t)
--
        class X extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new X).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new X).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(X, e, t)
--
        class Q extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Q).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Q).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(Q, e, t)
--
        class ee extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ee).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ee).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(ee, e, t)
--
        class te extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new te).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new te).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(te, e, t)
--
        class ne extends r.Message {
            constructor(e) {
                super(),
                this.connectionsMap = {},
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ne).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ne).fromJson(e, t)
            }
--
                return (new ne).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class re extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new re).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new re).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(re, e, t)
--
        class ae extends r.Message {
            constructor(e) {
                super(),
                this.debugInfo = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ae).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ae).fromJson(e, t)
            }
--
                return (new ae).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class oe extends r.Message {
            constructor(e) {
                super(),
                this.includeIncomplete = !1,
                this.groupIdsFilter = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new oe).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new oe).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new oe).fromJsonString(e, t)
            }
--
        class ie extends r.Message {
            constructor(e) {
                super(),
                this.repositories = [],
                this.indexes = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ie).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ie).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new ie).fromJsonString(e, t)
            }
--
        class se extends r.Message {
            constructor(e) {
                super(),
                this.excludedFiles = [],
                this.filterPaths = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new se).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new se).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new se).fromJsonString(e, t)
            }
--
        class le extends r.Message {
            constructor(e) {
                super(),
                this.query = "",
                this.maxItems = 0,
                this.groupIdsFilter = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new le).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new le).fromJsonString(e, t)
--
        class ce extends r.Message {
            constructor(e) {
                super(),
                this.relativeFilePaths = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ce).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ce).fromJson(e, t)
            }
--
                return (new ce).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class ue extends r.Message {
            constructor(e) {
                super(),
                this.repositoryFilters = [],
                this.maxResults = r.protoInt64.zero,
                this.groupIdsFilter = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ue).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new ue).fromJsonString(e, t)
--
        class de extends r.Message {
            constructor(e) {
                super(),
                this.score = 0,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new de).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new de).fromJson(e, t)
            }
--
                return (new de).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class me extends r.Message {
            constructor(e) {
                super(),
                this.scoredContextItems = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new me).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new me).fromJson(e, t)
            }
--
                return (new me).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class pe extends r.Message {
            constructor(e) {
                super(),
                this.codeContextItems = [],
                this.snippetType = a.ContextSnippetType.UNSPECIFIED,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new pe).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new pe).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new pe).fromJsonString(e, t)
            }
--
        class fe extends r.Message {
            constructor(e) {
                super(),
                this.embeddings = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new fe).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new fe).fromJson(e, t)
            }
--
                return (new fe).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class he extends r.Message {
            constructor(e) {
                super(),
                this.repositoryName = "",
                this.fileCount = r.protoInt64.zero,
                this.codeContextItemCount = r.protoInt64.zero,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new he).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new he).fromJsonString(e, t)
--
        class _e extends r.Message {
            constructor(e) {
                super(),
                this.uid = r.protoInt64.zero,
                this.eventOneof = {
                    case: void 0
                },
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new _e).fromBinary(e, t)
            }
--
                return (new _e).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class ge extends r.Message {
            constructor(e) {
                super(),
                this.absoluteUri = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ge).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ge).fromJson(e, t)
            }
--
                return (new ge).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class ye extends r.Message {
            constructor(e) {
                super(),
                this.absoluteUri = "",
                this.paths = [],
                this.workspaceUri = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ye).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new ye).fromJsonString(e, t)
--
        class Ae extends r.Message {
            constructor(e) {
                super(),
                this.absoluteUri = "",
                this.paths = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ae).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Ae).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new Ae).fromJsonString(e, t)
            }
--
        class Ee extends r.Message {
            constructor(e) {
                super(),
                this.addWorkspaceUid = r.protoInt64.zero,
                this.addWorkspaceQueueUid = r.protoInt64.zero,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ee).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Ee).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new Ee).fromJsonString(e, t)
            }
--
        class be extends r.Message {
            constructor(e) {
                super(),
                this.addWorkspaceUid = r.protoInt64.zero,
                this.addWorkspaceQueueUid = r.protoInt64.zero,
                this.workspaceUri = "",
                this.numFiles = r.protoInt64.zero,
                this.size = r.protoInt64.zero,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new be).fromBinary(e, t)
--
            static fromJson(e, t) {
                return (new be).fromJson(e, t)
            }
--
        class ve extends r.Message {
            constructor(e) {
                super(),
                this.workspaceUri = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ve).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ve).fromJson(e, t)
            }
--
                return (new ve).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class we extends r.Message {
            constructor(e) {
                super(),
                this.workspaceUri = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new we).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new we).fromJson(e, t)
            }
--
                return (new we).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Se extends r.Message {
            constructor(e) {
                super(),
                this.sha = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Se).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Se).fromJson(e, t)
            }
--
                return (new Se).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class d extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new d).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new d).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(d, e, t)
--
        class m extends r.Message {
            constructor(e) {
                super(),
                this.authUid = "",
                this.username = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new m).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new m).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new m).fromJsonString(e, t)
            }
--
        class p extends r.Message {
            constructor(e) {
                super(),
                this.users = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new p).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new p).fromJson(e, t)
            }
--
                return (new p).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class f extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new f).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new f).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(f, e, t)
--
        class h extends r.Message {
            constructor(e) {
                super(),
                this.authUid = "",
                this.email = "",
                this.name = "",
                this.photoUrl = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new h).fromBinary(e, t)
            }
--
                return (new h).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class _ extends r.Message {
            constructor(e) {
                super(),
                this.users = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new _).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new _).fromJson(e, t)
            }
--
                return (new _).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class g extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new g).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new g).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(g, e, t)
--
        class y extends r.Message {
            constructor(e) {
                super(),
                this.maxResults = r.protoInt64.zero,
                this.queries = [],
                this.urls = [],
                this.documentIds = [],
                this.aggregateIds = [],
                this.chatMessagePrompts = [],
                this.documentTypes = [],
                this.searchMode = s.UNSPECIFIED,
                this.disableReranking = !1,
--
                this.indexChoices = [],
                this.query = "",
                r.proto3.util.initPartial(e, this)
--
        class A extends r.Message {
            constructor(e) {
                super(),
                this.knowledgeBaseGroups = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new A).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new A).fromJson(e, t)
            }
--
                return (new A).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class E extends r.Message {
            constructor(e) {
                super(),
                this.query = "",
                this.documentTypes = [],
                this.indexChoices = [],
                this.indexNames = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new E).fromBinary(e, t)
            }
--
                return (new E).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class b extends r.Message {
            constructor(e) {
                super(),
                this.scopeItems = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new b).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new b).fromJson(e, t)
            }
--
                return (new b).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class v extends r.Message {
            constructor(e) {
                super(),
                this.scopeItems = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new v).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new v).fromJson(e, t)
            }
--
                return (new v).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class w extends r.Message {
            constructor(e) {
                super(),
                this.knowledgeBaseItemsWithMetadata = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new w).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new w).fromJson(e, t)
            }
--
                return (new w).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class S extends r.Message {
            constructor(e) {
                super(),
                this.channelIds = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new S).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new S).fromJson(e, t)
            }
--
                return (new S).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class T extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new T).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new T).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(T, e, t)
--
        class x extends r.Message {
            constructor(e) {
                super(),
                this.organization = "",
                this.repository = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new x).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new x).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new x).fromJsonString(e, t)
            }
--
        class C extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new C).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new C).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(C, e, t)
--
        class k extends r.Message {
            constructor(e) {
                super(),
                this.folderIds = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new k).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new k).fromJson(e, t)
            }
--
                return (new k).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class M extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new M).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new M).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(M, e, t)
--
        class L extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new L).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new L).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(L, e, t)
--
        class I extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new I).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new I).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(I, e, t)
--
        class N extends r.Message {
            constructor(e) {
                super(),
                this.body = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new N).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new N).fromJson(e, t)
            }
--
                return (new N).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class O extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new O).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new O).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(O, e, t)
--
        class R extends r.Message {
            constructor(e) {
                super(),
                this.status = l.UNSPECIFIED,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new R).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new R).fromJson(e, t)
            }
--
                return (new R).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class D extends r.Message {
            constructor(e) {
                super(),
                this.bodies = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new D).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new D).fromJson(e, t)
            }
--
                return (new D).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class P extends r.Message {
            constructor(e) {
                super(),
                this.results = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new P).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new P).fromJson(e, t)
            }
--
                return (new P).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class B extends r.Message {
            constructor(e) {
                super(),
                this.payload = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new B).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new B).fromJson(e, t)
            }
--
                return (new B).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class F extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new F).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new F).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(F, e, t)
--
        class j extends r.Message {
            constructor(e) {
                super(),
                this.documentId = "",
                this.text = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new j).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new j).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new j).fromJsonString(e, t)
            }
--
        class U extends r.Message {
            constructor(e) {
                super(),
                this.score = 0,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new U).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new U).fromJson(e, t)
            }
--
                return (new U).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Y extends r.Message {
            constructor(e) {
                super(),
                this.text = "",
                this.url = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Y).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Y).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new Y).fromJsonString(e, t)
            }
--
        class H extends r.Message {
            constructor(e) {
                super(),
                this.documentWithScores = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new H).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new H).fromJson(e, t)
            }
--
                return (new H).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class q extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new q).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new q).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(q, e, t)
--
        class G extends r.Message {
            constructor(e) {
                super(),
                this.repoName = "",
                this.indexId = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new G).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new G).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new G).fromJsonString(e, t)
            }
--
        class J extends r.Message {
            constructor(e) {
                super(),
                this.indexId = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new J).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new J).fromJson(e, t)
            }
--
                return (new J).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class V extends r.Message {
            constructor(e) {
                super(),
                this.status = i.IndexingStatus.UNSPECIFIED,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new V).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new V).fromJson(e, t)
            }
--
                return (new V).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class z extends r.Message {
            constructor(e) {
                super(),
                this.query = "",
                this.maxResults = r.protoInt64.zero,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new z).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new z).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new z).fromJsonString(e, t)
            }
--
        class W extends r.Message {
            constructor(e) {
                super(),
                this.documentWithScores = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new W).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new W).fromJson(e, t)
            }
--
                return (new W).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Z extends r.Message {
            constructor(e) {
                super(),
                this.query = "",
                this.maxResults = r.protoInt64.zero,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Z).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Z).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new Z).fromJsonString(e, t)
            }
--
        class K extends r.Message {
            constructor(e) {
                super(),
                this.documentWithScores = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new K).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new K).fromJson(e, t)
            }
--
                return (new K).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class $ extends r.Message {
            constructor(e) {
                super(),
                this.config = {
                    case: void 0
                },
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new $).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new $).fromJsonString(e, t)
--
        class X extends r.Message {
            constructor(e) {
                super(),
                this.includeChannelIds = [],
                this.excludeChannelIds = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new X).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new X).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new X).fromJsonString(e, t)
            }
--
        class Q extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Q).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Q).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(Q, e, t)
--
        class ee extends r.Message {
            constructor(e) {
                super(),
                this.includeDriveIds = [],
                this.excludeDriveIds = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ee).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ee).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new ee).fromJsonString(e, t)
            }
--
        class te extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new te).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new te).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(te, e, t)
--
        class ne extends r.Message {
            constructor(e) {
                super(),
                this.config = {
                    case: void 0
                },
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ne).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new ne).fromJsonString(e, t)
--
        class re extends r.Message {
            constructor(e) {
                super(),
                this.clientId = "",
                this.clientSecret = "",
                this.signingSecret = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new re).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new re).fromJsonString(e, t)
--
        class ae extends r.Message {
            constructor(e) {
                super(),
                this.organization = "",
                this.repository = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ae).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ae).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new ae).fromJsonString(e, t)
            }
--
        class oe extends r.Message {
            constructor(e) {
                super(),
                this.installationId = r.protoInt64.zero,
                this.repoConfigs = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new oe).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new oe).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new oe).fromJsonString(e, t)
            }
--
        class ie extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ie).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ie).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(ie, e, t)
--
        class se extends r.Message {
            constructor(e) {
                super(),
                this.webhookId = r.protoInt64.zero,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new se).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new se).fromJson(e, t)
            }
--
                return (new se).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class le extends r.Message {
            constructor(e) {
                super(),
                this.connector = c.UNSPECIFIED,
                this.accessToken = "",
                this.refreshToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new le).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new le).fromJsonString(e, t)
--
        class ce extends r.Message {
            constructor(e) {
                super(),
                this.connector = c.UNSPECIFIED,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ce).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ce).fromJson(e, t)
            }
--
                return (new ce).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class ue extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ue).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ue).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(ue, e, t)
--
        class de extends r.Message {
            constructor(e) {
                super(),
                this.connector = c.UNSPECIFIED,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new de).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new de).fromJson(e, t)
            }
--
                return (new de).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class me extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new me).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new me).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(me, e, t)
--
        class pe extends r.Message {
            constructor(e) {
                super(),
                this.config = {
                    case: void 0
                },
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new pe).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new pe).fromJsonString(e, t)
--
        class fe extends r.Message {
            constructor(e) {
                super(),
                this.clientId = "",
                this.clientSecret = "",
                this.signingSecret = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new fe).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new fe).fromJsonString(e, t)
--
        class he extends r.Message {
            constructor(e) {
                super(),
                this.installationId = r.protoInt64.zero,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new he).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new he).fromJson(e, t)
            }
--
                return (new he).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class _e extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new _e).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new _e).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(_e, e, t)
--
        class ge extends r.Message {
            constructor(e) {
                super(),
                this.jobIds = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ge).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ge).fromJson(e, t)
            }
--
                return (new ge).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class ye extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ye).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ye).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(ye, e, t)
--
        class Ae extends r.Message {
            constructor(e) {
                super(),
                this.documentType = a.DocumentType.UNSPECIFIED,
                this.count = r.protoInt64.zero,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ae).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Ae).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new Ae).fromJsonString(e, t)
            }
--
        class Ee extends r.Message {
            constructor(e) {
                super(),
                this.connector = c.UNSPECIFIED,
                this.initialized = !1,
                this.documentTypeCounts = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ee).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new Ee).fromJsonString(e, t)
--
        class be extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new be).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new be).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(be, e, t)
--
        class ve extends r.Message {
            constructor(e) {
                super(),
                this.connectorStates = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ve).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ve).fromJson(e, t)
            }
--
                return (new ve).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class we extends r.Message {
            constructor(e) {
                super(),
                this.connector = c.UNSPECIFIED,
                this.id = r.protoInt64.zero,
                this.status = u.UNSPECIFIED,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new we).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new we).fromJsonString(e, t)
--
        class Se extends r.Message {
            constructor(e) {
                super(),
                this.connectorTypes = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Se).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Se).fromJson(e, t)
            }
--
                return (new Se).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Te extends r.Message {
            constructor(e) {
                super(),
                this.jobStates = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Te).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Te).fromJson(e, t)
            }
--
                return (new Te).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class xe extends r.Message {
            constructor(e) {
                super(),
                this.datasetId = "",
                this.previousMessageDatasetId = "",
                this.type = "",
                this.channelId = "",
                this.user = "",
                this.text = "",
                this.timestamp = "",
                this.threadTimestamp = "",
                this.channelName = "",
--
                this.teamId = "",
                this.isPrivateChannel = !1,
                this.teamDomain = "",
--
        class Ce extends r.Message {
            constructor(e) {
                super(),
                this.type = "",
                this.channelId = "",
                this.channelName = "",
                this.description = "",
                this.teamId = "",
                this.isPrivateChannel = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
--
            }
            static fromJson(e, t) {
                return (new Ce).fromJson(e, t)
--
        class ke extends r.Message {
            constructor(e) {
                super(),
                this.payload = {
                    case: void 0
                },
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ke).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new ke).fromJsonString(e, t)
--
        class Me extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Me).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Me).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(Me, e, t)
--
        class Le extends r.Message {
            constructor(e) {
                super(),
                this.webhookUrl = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Le).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Le).fromJson(e, t)
            }
--
                return (new Le).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Ie extends r.Message {
            constructor(e) {
                super(),
                this.connector = c.UNSPECIFIED,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ie).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Ie).fromJson(e, t)
            }
--
                return (new Ie).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Ne extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ne).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Ne).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(Ne, e, t)
--
        class a extends r.Message {
            constructor(e) {
                super(),
                this.eventName = "",
                this.apiKey = "",
                this.installationId = "",
                this.ideName = "",
                this.os = "",
                this.codeiumVersion = "",
                this.ideVersion = "",
                this.durationMs = r.protoInt64.zero,
                this.extra = {},
--
                this.planTier = "",
                this.deviceFingerprint = "",
                r.proto3.util.initPartial(e, this)
--
        class o extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new o).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new o).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(o, e, t)
--
        class p extends r.Message {
            constructor(e) {
                super(),
                this.apiKey = "",
                this.name = "",
                this.email = "",
                this.id = "",
                this.teamId = "",
                this.teamStatus = a.UserTeamStatus.UNSPECIFIED,
                this.username = "",
                this.preferredTimeZone = "",
                this.publicProfileEnabled = !1,
--
                this.pro = !1,
                this.profilePictureUri = "",
                this.disableCodeium = !1,
--
        class f extends r.Message {
            constructor(e) {
                super(),
                this.id = "",
                this.name = "",
                this.inviteId = "",
                this.usedTrial = !1,
                this.stripeSubscriptionId = "",
                this.subscriptionActive = !1,
                this.stripeCustomerId = "",
                this.numSeatsCurrentBillingPeriod = r.protoInt64.zero,
                this.attributionEnabled = !1,
--
                this.offersEnabled = !1,
                this.teamsTier = a.TeamsTier.UNSPECIFIED,
                this.flexCreditQuota = r.protoInt64.zero,
--
        class h extends r.Message {
            constructor(e) {
                super(),
                this.id = "",
                this.name = "",
                this.email = "",
                this.teamId = "",
                this.issuedByApiKey = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new h).fromBinary(e, t)
--
            static fromJson(e, t) {
                return (new h).fromJson(e, t)
            }
--
        class _ extends r.Message {
            constructor(e) {
                super(),
                this.exists = !1,
                this.newsletter = !1,
                this.disabledTelemetry = !1,
                this.inboundSource = "",
                this.signupStage = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new _).fromBinary(e, t)
--
            static fromJson(e, t) {
                return (new _).fromJson(e, t)
            }
--
        class g extends r.Message {
            constructor(e) {
                super(),
                this.apiKey = "",
                this.roles = [],
                this.roleId = "",
                this.roleName = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new g).fromBinary(e, t)
            }
--
                return (new g).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class y extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new y).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new y).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(y, e, t)
--
        class A extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new A).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new A).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(A, e, t)
--
        class E extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.generateProfilePictureUrl = !1,
                this.createIfNotExist = !1,
                this.includeSubscription = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new E).fromBinary(e, t)
            }
--
                return (new E).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class b extends r.Message {
            constructor(e) {
                super(),
                this.referrerName = "",
                this.referrerEmail = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new b).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new b).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new b).fromJsonString(e, t)
            }
--
        class v extends r.Message {
            constructor(e) {
                super(),
                this.roles = [],
                this.permissions = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new v).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new v).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new v).fromJsonString(e, t)
            }
--
        class w extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.groupId = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new w).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new w).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new w).fromJsonString(e, t)
            }
--
        class S extends r.Message {
            constructor(e) {
                super(),
                this.users = [],
                this.userRoles = [],
                this.userTeamDetails = [],
                this.userCascadeDetails = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new S).fromBinary(e, t)
            }
--
                return (new S).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class T extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.apiKey = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new T).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new T).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new T).fromJsonString(e, t)
            }
--
        class x extends r.Message {
            constructor(e) {
                super(),
                this.roles = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new x).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new x).fromJson(e, t)
            }
--
                return (new x).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class C extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.apiKey = "",
                this.role = "",
                this.groupId = "",
                this.serviceKey = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new C).fromBinary(e, t)
--
            static fromJson(e, t) {
                return (new C).fromJson(e, t)
            }
--
        class k extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new k).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new k).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(k, e, t)
--
        class M extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.apiKey = "",
                this.role = "",
                this.groupId = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new M).fromBinary(e, t)
            }
--
                return (new M).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class L extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new L).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new L).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(L, e, t)
--
        class I extends r.Message {
            constructor(e) {
                super(),
                this.firebaseIdToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new I).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new I).fromJson(e, t)
            }
--
                return (new I).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class N extends r.Message {
            constructor(e) {
                super(),
                this.apiKey = "",
                this.name = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new N).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new N).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new N).fromJsonString(e, t)
            }
--
        class O extends r.Message {
            constructor(e) {
                super(),
                this.email = "",
                this.password = "",
                this.turnstileToken = "",
                this.phoneNumber = "",
                this.otpCode = "",
                this.firstName = "",
                this.lastName = "",
                r.proto3.util.initPartial(e, this)
            }
--
                return (new O).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
        class R extends r.Message {
            constructor(e) {
                super(),
                this.uid = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new R).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new R).fromJson(e, t)
            }
--
                return (new R).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class D extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.fullName = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new D).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new D).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new D).fromJsonString(e, t)
            }
--
        class P extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new P).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new P).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(P, e, t)
--
        class B extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new B).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new B).fromJson(e, t)
            }
--
                return (new B).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class F extends r.Message {
            constructor(e) {
                super(),
                this.url = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new F).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new F).fromJson(e, t)
            }
--
                return (new F).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class j extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new j).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new j).fromJson(e, t)
            }
--
                return (new j).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class U extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new U).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new U).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(U, e, t)
--
        class Y extends r.Message {
            constructor(e) {
                super(),
                this.apiKey = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Y).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Y).fromJson(e, t)
            }
--
                return (new Y).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class H extends r.Message {
            constructor(e) {
                super(),
                this.profilePictureUrl = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new H).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new H).fromJson(e, t)
            }
--
                return (new H).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class q extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new q).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new q).fromJson(e, t)
            }
--
                return (new q).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class G extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new G).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new G).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(G, e, t)
--
        class J extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.inboundSource = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new J).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new J).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new J).fromJsonString(e, t)
            }
--
        class V extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new V).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new V).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(V, e, t)
--
        class z extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.apiKey = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new z).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new z).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new z).fromJsonString(e, t)
            }
--
        class W extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new W).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new W).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(W, e, t)
--
        class Z extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Z).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Z).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(Z, e, t)
--
        class K extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new K).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new K).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(K, e, t)
--
        class $ extends r.Message {
            constructor(e) {
                super(),
                this.apiKey = "",
                this.inviteId = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new $).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new $).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new $).fromJsonString(e, t)
            }
--
        class X extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new X).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new X).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(X, e, t)
--
        class Q extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.updates = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Q).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Q).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new Q).fromJsonString(e, t)
            }
--
        class ee extends r.Message {
            constructor(e) {
                super(),
                this.apiKey = "",
                this.status = a.UserTeamStatus.UNSPECIFIED,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ee).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ee).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new ee).fromJsonString(e, t)
            }
--
        class te extends r.Message {
            constructor(e) {
                super(),
                this.users = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new te).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new te).fromJson(e, t)
            }
--
                return (new te).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class ne extends r.Message {
            constructor(e) {
                super(),
                this.inviteId = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ne).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ne).fromJson(e, t)
            }
--
                return (new ne).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class re extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new re).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new re).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(re, e, t)
--
        class ae extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.apiKey = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ae).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ae).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new ae).fromJsonString(e, t)
            }
--
        class oe extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new oe).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new oe).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(oe, e, t)
--
        class ie extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ie).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ie).fromJson(e, t)
            }
--
                return (new ie).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class se extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new se).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new se).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(se, e, t)
--
        class le extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.preapprovals = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new le).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new le).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new le).fromJsonString(e, t)
            }
--
        class ce extends r.Message {
            constructor(e) {
                super(),
                this.name = "",
                this.email = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ce).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ce).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new ce).fromJsonString(e, t)
            }
--
        class ue extends r.Message {
            constructor(e) {
                super(),
                this.preapprovals = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ue).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ue).fromJson(e, t)
            }
--
                return (new ue).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class de extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new de).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new de).fromJson(e, t)
            }
--
                return (new de).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class me extends r.Message {
            constructor(e) {
                super(),
                this.preapprovals = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new me).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new me).fromJson(e, t)
            }
--
                return (new me).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class pe extends r.Message {
            constructor(e) {
                super(),
                this.approvalId = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new pe).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new pe).fromJson(e, t)
            }
--
                return (new pe).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class fe extends r.Message {
            constructor(e) {
                super(),
                this.name = "",
                this.email = "",
                this.teamName = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new fe).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new fe).fromJsonString(e, t)
--
        class he extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.approvalId = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new he).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new he).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new he).fromJsonString(e, t)
            }
--
        class _e extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new _e).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new _e).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(_e, e, t)
--
        class ge extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.approvalId = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ge).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ge).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new ge).fromJsonString(e, t)
            }
--
        class ye extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ye).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ye).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(ye, e, t)
--
        class Ae extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ae).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Ae).fromJson(e, t)
            }
--
                return (new Ae).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Ee extends r.Message {
            constructor(e) {
                super(),
                this.adminName = "",
                this.teamName = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ee).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Ee).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new Ee).fromJsonString(e, t)
            }
--
        class be extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.approvalId = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new be).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new be).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new be).fromJsonString(e, t)
            }
--
        class ve extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ve).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ve).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(ve, e, t)
--
        class we extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.stripePriceId = "",
                this.startTrial = !1,
                this.successUrl = "",
                this.cancelUrl = "",
                this.teamsTier = a.TeamsTier.UNSPECIFIED,
                this.paymentPeriod = o.UNSPECIFIED,
                this.teamName = "",
                this.seats = r.protoInt64.zero,
--
            }
            static fromBinary(e, t) {
                return (new we).fromBinary(e, t)
--
        class Se extends r.Message {
            constructor(e) {
                super(),
                this.checkoutUrl = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Se).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Se).fromJson(e, t)
            }
--
                return (new Se).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Te extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.successUrl = "",
                this.cancelUrl = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Te).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new Te).fromJsonString(e, t)
--
        class xe extends r.Message {
            constructor(e) {
                super(),
                this.checkoutUrl = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new xe).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new xe).fromJson(e, t)
            }
--
                return (new xe).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Ce extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.enabled = !1,
                this.monthlyTopUpAmount = 0,
                this.topUpIncrement = 0,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ce).fromBinary(e, t)
            }
--
                return (new Ce).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class ke extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ke).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ke).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(ke, e, t)
--
        class Me extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Me).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Me).fromJson(e, t)
            }
--
                return (new Me).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Le extends r.Message {
            constructor(e) {
                super(),
                this.subscriptionActive = !1,
                this.onTrial = !1,
                this.numSeats = r.protoInt64.zero,
                this.planUnitAmount = 0,
                this.subInterval = i.UNSPECIFIED,
                this.cancelAtPeriodEnd = !1,
                this.invoices = [],
                this.trialOnly = !1,
                this.numUsers = r.protoInt64.zero,
--
                this.numCascadeUsers = r.protoInt64.zero,
                this.numCascadeSeats = r.protoInt64.zero,
                this.numCoreUsers = r.protoInt64.zero,
--
        class Ie extends r.Message {
            constructor(e) {
                super(),
                this.amount = 0,
                this.currency = "",
                this.paid = !1,
                this.invoicePdfUrl = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ie).fromBinary(e, t)
            }
--
                return (new Ie).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class Ne extends r.Message {
            constructor(e) {
                super(),
                this.type = "",
                this.paymentType = {
                    case: void 0
                },
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ne).fromBinary(e, t)
            }
--
                return (new Ne).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class Oe extends r.Message {
            constructor(e) {
                super(),
                this.brand = "",
                this.expMonth = r.protoInt64.zero,
                this.expYear = r.protoInt64.zero,
                this.last4 = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Oe).fromBinary(e, t)
            }
--
                return (new Oe).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class Re extends r.Message {
            constructor(e) {
                super(),
                this.invoiceLink = "",
                this.declineCode = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Re).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Re).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new Re).fromJsonString(e, t)
            }
--
        class De extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.numSeats = r.protoInt64.zero,
                this.preview = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new De).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new De).fromJsonString(e, t)
--
        class Pe extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Pe).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Pe).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(Pe, e, t)
--
        class Be extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.price = s.UNSPECIFIED,
                this.preview = !1,
                this.paymentPeriod = o.UNSPECIFIED,
                this.teamsTier = a.TeamsTier.UNSPECIFIED,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Be).fromBinary(e, t)
--
            static fromJson(e, t) {
                return (new Be).fromJson(e, t)
            }
--
        class Fe extends r.Message {
            constructor(e) {
                super(),
                this.appliedChanges = !1,
                this.nextActionClientSecret = "",
                this.paymentFailureReason = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Fe).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new Fe).fromJsonString(e, t)
--
        class je extends r.Message {
            constructor(e) {
                super(),
                this.amountDueImmediately = 0,
                this.pricePerSeat = 0,
                this.numSeats = r.protoInt64.zero,
                this.subInterval = i.UNSPECIFIED,
                this.amountPerInterval = 0,
                this.unusedPlanRefunded = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
--
            }
            static fromJson(e, t) {
                return (new je).fromJson(e, t)
--
        class Ue extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.cancelPlan = !1,
                this.resumePlan = !1,
                this.cancelComment = "",
                this.cancelReason = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ue).fromBinary(e, t)
--
            static fromJson(e, t) {
                return (new Ue).fromJson(e, t)
            }
--
        class Ye extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ye).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Ye).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(Ye, e, t)
--
        class He extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.successUrl = "",
                this.cancelUrl = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new He).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new He).fromJsonString(e, t)
--
        class qe extends r.Message {
            constructor(e) {
                super(),
                this.checkoutUrl = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new qe).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new qe).fromJson(e, t)
            }
--
                return (new qe).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Ge extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ge).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Ge).fromJson(e, t)
            }
--
                return (new Ge).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Je extends r.Message {
            constructor(e) {
                super(),
                this.exists = !1,
                this.newsletter = !1,
                this.disabledTelemetry = !1,
                this.inboundSource = "",
                this.signupStage = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Je).fromBinary(e, t)
--
            static fromJson(e, t) {
                return (new Je).fromJson(e, t)
            }
--
        class Ve extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.username = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ve).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Ve).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new Ve).fromJsonString(e, t)
            }
--
        class ze extends r.Message {
            constructor(e) {
                super(),
                this.available = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ze).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ze).fromJson(e, t)
            }
--
                return (new ze).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class We extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.username = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new We).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new We).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new We).fromJsonString(e, t)
            }
--
        class Ze extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ze).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Ze).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(Ze, e, t)
--
        class Ke extends r.Message {
            constructor(e) {
                super(),
                this.secret = "",
                this.adminEmail = "",
                this.teamName = "",
                this.numSeats = r.protoInt64.zero,
                this.teamsTier = a.TeamsTier.UNSPECIFIED,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ke).fromBinary(e, t)
--
            static fromJson(e, t) {
                return (new Ke).fromJson(e, t)
            }
--
        class $e extends r.Message {
            constructor(e) {
                super(),
                this.teamId = "",
                this.inviteId = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new $e).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new $e).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new $e).fromJsonString(e, t)
            }
--
        class Xe extends r.Message {
            constructor(e) {
                super(),
                this.secret = "",
                this.teamName = "",
                this.numSeats = r.protoInt64.zero,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Xe).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new Xe).fromJsonString(e, t)
--
        class Qe extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Qe).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Qe).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(Qe, e, t)
--
        class et extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.occupationCompany = "",
                this.occupationRole = "",
                this.yearsOfExperienceMin = 0,
                this.yearsOfExperienceMax = 0,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new et).fromBinary(e, t)
--
            static fromJson(e, t) {
                return (new et).fromJson(e, t)
            }
--
        class tt extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new tt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new tt).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(tt, e, t)
--
        class nt extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.newName = "",
                this.newEmail = "",
                this.newBio = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new nt).fromBinary(e, t)
            }
--
                return (new nt).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class rt extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new rt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new rt).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(rt, e, t)
--
        class at extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.publicProfileEnabled = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new at).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new at).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new at).fromJsonString(e, t)
            }
--
        class ot extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ot).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ot).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(ot, e, t)
--
        class it extends r.Message {
            constructor(e) {
                super(),
                this.secret = "",
                this.teamId = "",
                this.emails = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new it).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new it).fromJsonString(e, t)
--
        class st extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new st).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new st).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(st, e, t)
--
        class lt extends r.Message {
            constructor(e) {
                super(),
                this.username = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new lt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new lt).fromJson(e, t)
            }
--
                return (new lt).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class ct extends r.Message {
            constructor(e) {
                super(),
                this.name = "",
                this.username = "",
                this.preferredTimeZone = "",
                this.bio = "",
                this.profilePicturePresignedUrl = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ct).fromBinary(e, t)
--
            static fromJson(e, t) {
                return (new ct).fromJson(e, t)
            }
--
        class ut extends r.Message {
            constructor(e) {
                super(),
                this.secret = "",
                this.email = "",
                this.roles = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ut).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new ut).fromJsonString(e, t)
--
        class dt extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new dt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new dt).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(dt, e, t)
--
        class mt extends r.Message {
            constructor(e) {
                super(),
                this.serviceKey = "",
                this.emails = [],
                this.role = "",
                this.groupName = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new mt).fromBinary(e, t)
            }
--
                return (new mt).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class pt extends r.Message {
            constructor(e) {
                super(),
                this.successfulEmails = [],
                this.failedEmails = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new pt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new pt).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new pt).fromJsonString(e, t)
            }
--
        class ft extends r.Message {
            constructor(e) {
                super(),
                this.apiKey = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ft).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ft).fromJson(e, t)
            }
--
                return (new ft).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class ht extends r.Message {
            constructor(e) {
                super(),
                this.userActivity = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ht).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ht).fromJson(e, t)
            }
--
                return (new ht).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class _t extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new _t).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new _t).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(_t, e, t)
--
        class gt extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new gt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new gt).fromJson(e, t)
            }
--
                return (new gt).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class yt extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new yt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new yt).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(yt, e, t)
--
        class At extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new At).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new At).fromJson(e, t)
            }
--
                return (new At).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Et extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Et).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Et).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(Et, e, t)
--
        class bt extends r.Message {
            constructor(e) {
                super(),
                this.ssoProviderId = "",
                this.idpEntityId = "",
                this.ssoUrl = "",
                this.x509Certificate = "",
                this.enabled = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new bt).fromBinary(e, t)
--
            static fromJson(e, t) {
                return (new bt).fromJson(e, t)
            }
--
        class vt extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.samlProviderId = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new vt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new vt).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new vt).fromJsonString(e, t)
            }
--
        class wt extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new wt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new wt).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(wt, e, t)
--
        class St extends r.Message {
            constructor(e) {
                super(),
                this.email = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new St).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new St).fromJson(e, t)
            }
--
                return (new St).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Tt extends r.Message {
            constructor(e) {
                super(),
                this.shouldRedirect = !1,
                this.ssoProviderId = "",
                this.disallowEnterpriseUserLogin = !1,
                this.redirectUrl = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Tt).fromBinary(e, t)
            }
--
                return (new Tt).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class xt extends r.Message {
            constructor(e) {
                super(),
                this.seatLimit = 0,
                this.attributionEnabled = !1,
                this.auditLogsEnabled = !1,
                this.mucsTotal = 0,
                this.mucsEnabled = !1,
                this.licenseLengthMonths = 0,
                this.enableIndividualUserAnalytics = !1,
                r.proto3.util.initPartial(e, this)
            }
--
                return (new xt).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
        class Ct extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ct).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Ct).fromJson(e, t)
            }
--
                return (new Ct).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class kt extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new kt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new kt).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(kt, e, t)
--
        class Mt extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.code = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Mt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Mt).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new Mt).fromJsonString(e, t)
            }
--
        class Lt extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Lt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Lt).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(Lt, e, t)
--
        class It extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new It).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new It).fromJson(e, t)
            }
--
                return (new It).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Nt extends r.Message {
            constructor(e) {
                super(),
                this.features = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Nt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Nt).fromJson(e, t)
            }
--
                return (new Nt).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Ot extends r.Message {
            constructor(e) {
                super(),
                this.secret = "",
                this.teamId = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ot).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Ot).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new Ot).fromJsonString(e, t)
            }
--
        class Rt extends r.Message {
            constructor(e) {
                super(),
                this.features = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Rt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Rt).fromJson(e, t)
            }
--
                return (new Rt).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Dt extends r.Message {
            constructor(e) {
                super(),
                this.secret = "",
                this.teamId = "",
                this.addFeatures = [],
                this.removeFeatures = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Dt).fromBinary(e, t)
            }
--
                return (new Dt).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class Pt extends r.Message {
            constructor(e) {
                super(),
                this.secret = "",
                this.teamId = "",
                this.features = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Pt).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new Pt).fromJsonString(e, t)
--
        class Bt extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Bt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Bt).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(Bt, e, t)
--
        class Ft extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ft).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Ft).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(Ft, e, t)
--
        class jt extends r.Message {
            constructor(e) {
                super(),
                this.secret = "",
                this.apiKeys = [],
                this.features = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new jt).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new jt).fromJsonString(e, t)
--
        class Ut extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ut).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Ut).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(Ut, e, t)
--
        class Yt extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.emails = [],
                this.approvalType = c.UNSPECIFIED,
                this.approve = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Yt).fromBinary(e, t)
            }
--
                return (new Yt).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class Ht extends r.Message {
            constructor(e) {
                super(),
                this.authUid = "",
                this.teamId = "",
                this.hasCascadeSeat = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ht).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new Ht).fromJsonString(e, t)
--
        class qt extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new qt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new qt).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(qt, e, t)
--
        class Gt extends r.Message {
            constructor(e) {
                super(),
                this.secret = "",
                this.teamName = "",
                this.emails = [],
                this.approvalType = c.UNSPECIFIED,
                this.approve = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Gt).fromBinary(e, t)
--
            static fromJson(e, t) {
                return (new Gt).fromJson(e, t)
            }
--
        class Jt extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Jt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Jt).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(Jt, e, t)
--
        class Vt extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Vt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Vt).fromJson(e, t)
            }
--
                return (new Vt).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class zt extends r.Message {
            constructor(e) {
                super(),
                this.cascadeWebSearchEnabled = !1,
                this.canUpdateCascadeWebSearchEnabled = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new zt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new zt).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new zt).fromJsonString(e, t)
            }
--
        class Wt extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.cascadeWebSearchEnabled = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Wt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Wt).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new Wt).fromJsonString(e, t)
            }
--
        class Zt extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Zt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Zt).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(Zt, e, t)
--
        class Kt extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.permission = a.Permission.UNSPECIFIED,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Kt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Kt).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new Kt).fromJsonString(e, t)
            }
--
        class $t extends r.Message {
            constructor(e) {
                super(),
                this.id = "",
                this.name = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new $t).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new $t).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new $t).fromJsonString(e, t)
            }
--
        class Xt extends r.Message {
            constructor(e) {
                super(),
                this.groups = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Xt).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Xt).fromJson(e, t)
            }
--
                return (new Xt).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Qt extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.name = "",
                this.role = "",
                this.groupId = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Qt).fromBinary(e, t)
            }
--
                return (new Qt).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class en extends r.Message {
            constructor(e) {
                super(),
                this.secret = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new en).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new en).fromJson(e, t)
            }
--
                return (new en).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class tn extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.serviceKeyId = "",
                this.name = "",
                this.role = "",
                this.groupId = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new tn).fromBinary(e, t)
--
            static fromJson(e, t) {
                return (new tn).fromJson(e, t)
            }
--
        class nn extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new nn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new nn).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(nn, e, t)
--
        class rn extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new rn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new rn).fromJson(e, t)
            }
--
                return (new rn).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class an extends r.Message {
            constructor(e) {
                super(),
                this.id = "",
                this.name = "",
                this.roleId = "",
                this.groupId = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new an).fromBinary(e, t)
            }
--
                return (new an).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class on extends r.Message {
            constructor(e) {
                super(),
                this.secrets = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new on).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new on).fromJson(e, t)
            }
--
                return (new on).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class sn extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.secretId = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new sn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new sn).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new sn).fromJsonString(e, t)
            }
--
        class ln extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ln).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ln).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(ln, e, t)
--
        class cn extends r.Message {
            constructor(e) {
                super(),
                this.apiKey = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new cn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new cn).fromJson(e, t)
            }
--
                return (new cn).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class un extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new un).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new un).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(un, e, t)
--
        class dn extends r.Message {
            constructor(e) {
                super(),
                this.adminName = "",
                this.teamName = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new dn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new dn).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new dn).fromJsonString(e, t)
            }
--
        class mn extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.githubRefreshToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new mn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new mn).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new mn).fromJsonString(e, t)
            }
--
        class pn extends r.Message {
            constructor(e) {
                super(),
                this.githubAccessToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new pn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new pn).fromJson(e, t)
            }
--
                return (new pn).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class fn extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new fn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new fn).fromJson(e, t)
            }
--
                return (new fn).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class hn extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new hn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new hn).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(hn, e, t)
--
        class _n extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new _n).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new _n).fromJson(e, t)
            }
--
                return (new _n).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class gn extends r.Message {
            constructor(e) {
                super(),
                this.connected = !1,
                this.username = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new gn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new gn).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new gn).fromJsonString(e, t)
            }
--
        class yn extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new yn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new yn).fromJson(e, t)
            }
--
                return (new yn).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class An extends r.Message {
            constructor(e) {
                super(),
                this.accessToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new An).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new An).fromJson(e, t)
            }
--
                return (new An).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class En extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.apiKey = "",
                this.disableCodeiumAccess = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new En).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new En).fromJsonString(e, t)
--
        class bn extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new bn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new bn).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(bn, e, t)
--
        class vn extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.name = "",
                this.permissions = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new vn).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new vn).fromJsonString(e, t)
--
        class wn extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new wn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new wn).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(wn, e, t)
--
        class Sn extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.roleId = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Sn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Sn).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new Sn).fromJsonString(e, t)
            }
--
        class Tn extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Tn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Tn).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(Tn, e, t)
--
        class xn extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.roleId = "",
                this.permissions = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new xn).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new xn).fromJsonString(e, t)
--
        class Cn extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Cn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Cn).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(Cn, e, t)
--
        class kn extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new kn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new kn).fromJson(e, t)
            }
--
                return (new kn).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Mn extends r.Message {
            constructor(e) {
                super(),
                this.roleId = "",
                this.name = "",
                this.permissions = [],
                this.mutable = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Mn).fromBinary(e, t)
            }
--
                return (new Mn).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class Ln extends r.Message {
            constructor(e) {
                super(),
                this.roles = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ln).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Ln).fromJson(e, t)
            }
--
                return (new Ln).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class In extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new In).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new In).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(In, e, t)
--
        class Nn extends r.Message {
            constructor(e) {
                super(),
                this.billingMonths = 0,
                this.billingYears = 0,
                this.mucsCharged = 0,
                this.mucsDeducted = 0,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Nn).fromBinary(e, t)
            }
--
                return (new Nn).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
        class On extends r.Message {
            constructor(e) {
                super(),
                this.mucsLeft = 0,
                this.mucsUsed = 0,
                this.isMucsEnabled = !1,
                this.currentRegisteredUsers = 0,
                this.currentHighWatermark = 0,
                this.mucsTable = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
--
            }
            static fromJson(e, t) {
                return (new On).fromJson(e, t)
--
        class Rn extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Rn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Rn).fromJson(e, t)
            }
--
                return (new Rn).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Dn extends r.Message {
            constructor(e) {
                super(),
                this.usedPromptCredits = 0,
                this.usedFlowCredits = 0,
                this.estimatedMonthlyPrompts = 0,
                this.estimatedMonthlyFlows = 0,
                this.purchasedCredits = r.protoInt64.zero,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Dn).fromBinary(e, t)
--
            static fromJson(e, t) {
                return (new Dn).fromJson(e, t)
            }
--
        class Pn extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Pn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Pn).fromJson(e, t)
            }
--
                return (new Pn).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Bn extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Bn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Bn).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(Bn, e, t)
--
        class Fn extends r.Message {
            constructor(e) {
                super(),
                this.apiKey = "",
                this.email = "",
                this.name = "",
                this.totalMinutesCoded = 0,
                this.codingPercentile = 0,
                this.minutesCodingBiggestDay = 0,
                this.autocompletesAccepted = 0,
                this.cascadeMessagesSent = 0,
                this.cascadeLinesWritten = 0,
--
                this.mostProductiveDay = 0,
                r.proto3.util.initPartial(e, this)
            }
--
        class jn extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new jn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new jn).fromJson(e, t)
            }
--
                return (new jn).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Un extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Un).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Un).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(Un, e, t)
--
        class Yn extends r.Message {
            constructor(e) {
                super(),
                this.teamId = "",
                this.numCredits = 0,
                this.type = d.UNSPECIFIED,
                this.referralId = 0,
                this.invoiceId = "",
                this.reason = {
                    case: void 0
                },
                r.proto3.util.initPartial(e, this)
--
            static fromBinary(e, t) {
                return (new Yn).fromBinary(e, t)
            }
--
        class Hn extends r.Message {
            constructor(e) {
                super(),
                this.userEmail = "",
                this.averyEmail = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Hn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Hn).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new Hn).fromJsonString(e, t)
            }
--
        class qn extends r.Message {
            constructor(e) {
                super(),
                this.userEmail = "",
                this.referrerEmail = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new qn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new qn).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new qn).fromJsonString(e, t)
            }
--
        class Gn extends r.Message {
            constructor(e) {
                super(),
                this.type = m.UNSPECIFIED,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Gn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Gn).fromJson(e, t)
            }
--
                return (new Gn).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Jn extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Jn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Jn).fromJson(e, t)
            }
--
                return (new Jn).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Vn extends r.Message {
            constructor(e) {
                super(),
                this.entries = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Vn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Vn).fromJson(e, t)
            }
--
                return (new Vn).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class zn extends r.Message {
            constructor(e) {
                super(),
                this.phoneNumber = "",
                this.turnstileToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new zn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new zn).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new zn).fromJsonString(e, t)
            }
--
        class Wn extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Wn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Wn).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(Wn, e, t)
--
        class Zn extends r.Message {
            constructor(e) {
                super(),
                this.firstName = "",
                this.email = "",
                this.turnstileToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Zn).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new Zn).fromJsonString(e, t)
--
        class Kn extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Kn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Kn).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(Kn, e, t)
--
        class $n extends r.Message {
            constructor(e) {
                super(),
                this.secret = "",
                this.teamName = "",
                this.adminEmail = "",
                this.tags = [],
                this.organization = "",
                this.source = "",
                this.creationReason = "",
                this.trial = !1,
                this.hybrid = !1,
--
                this.coreSeats = 0,
                this.usersToAdd = [],
                this.createdBy = "",
--
        class Xn extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Xn).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Xn).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(Xn, e, t)
--
        class Qn extends r.Message {
            constructor(e) {
                super(),
                this.secret = "",
                this.teamName = "",
                this.teamId = "",
                this.tags = [],
                this.organization = "",
                this.source = "",
                this.creationReason = "",
                this.trial = !1,
                this.hybrid = !1,
--
                this.coreSeats = 0,
                this.usersToAdd = [],
                this.createdBy = "",
--
        class er extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new er).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new er).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(er, e, t)
--
        class tr extends r.Message {
            constructor(e) {
                super(),
                this.secret = "",
                this.teamName = "",
                this.userPromptCreditCap = 0,
                this.userFlowCreditCap = 0,
                this.disablePromptLimit = !1,
                this.disableFlowLimit = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
--
            }
            static fromJson(e, t) {
                return (new tr).fromJson(e, t)
--
        class nr extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new nr).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new nr).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(nr, e, t)
--
        class rr extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new rr).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new rr).fromJson(e, t)
            }
--
                return (new rr).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class ar extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ar).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ar).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(ar, e, t)
--
        class or extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new or).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new or).fromJson(e, t)
            }
--
                return (new or).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class ir extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ir).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ir).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(ir, e, t)
--
        class sr extends r.Message {
            constructor(e) {
                super(),
                this.secret = "",
                this.teamName = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new sr).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new sr).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new sr).fromJsonString(e, t)
            }
--
        class lr extends r.Message {
            constructor(e) {
                super(),
                this.apiKey = "",
                this.name = "",
                this.email = "",
                this.flowsUsed = 0,
                this.promptsUsed = 0,
                this.numAcceptances = 0,
                this.numLinesAccepted = 0,
                this.teamStatus = a.UserTeamStatus.UNSPECIFIED,
                this.hasCascadeSeat = !1,
--
            }
            static fromBinary(e, t) {
                return (new lr).fromBinary(e, t)
--
        class cr extends r.Message {
            constructor(e) {
                super(),
                this.usersWithCascade = [],
                this.usersOnTeam = [],
                this.userInfos = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new cr).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new cr).fromJsonString(e, t)
--
        class ur extends r.Message {
            constructor(e) {
                super(),
                this.referralCode = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ur).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ur).fromJson(e, t)
            }
--
                return (new ur).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class dr extends r.Message {
            constructor(e) {
                super(),
                this.referrerName = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new dr).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new dr).fromJson(e, t)
            }
--
                return (new dr).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class mr extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                this.referralCode = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new mr).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new mr).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new mr).fromJsonString(e, t)
            }
--
        class pr extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new pr).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new pr).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(pr, e, t)
--
        class fr extends r.Message {
            constructor(e) {
                super(),
                this.secret = "",
                this.email = "",
                this.teamsTier = a.TeamsTier.UNSPECIFIED,
                this.numFlexCredits = r.protoInt64.zero,
                this.usedFlexCredits = r.protoInt64.zero,
                this.usedFlowCredits = r.protoInt64.zero,
                this.usedPromptCredits = r.protoInt64.zero,
                this.numTeamsSeats = r.protoInt64.zero,
                this.userUsedPromptCredits = r.protoInt64.zero,
--
                this.forCreditUpdate = !1,
                r.proto3.util.initPartial(e, this)
            }
--
        class hr extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new hr).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new hr).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(hr, e, t)
--
        class _r extends r.Message {
            constructor(e) {
                super(),
                this.secret = "",
                this.emails = [],
                this.overrideSubscriptionActiveCheck = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new _r).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new _r).fromJsonString(e, t)
--
        class gr extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new gr).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new gr).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(gr, e, t)
--
        class yr extends r.Message {
            constructor(e) {
                super(),
                this.authToken = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new yr).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new yr).fromJson(e, t)
            }
--
                return (new yr).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Ar extends r.Message {
            constructor(e) {
                super(),
                this.status = a.TransactionStatus.UNSPECIFIED,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Ar).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Ar).fromJson(e, t)
            }
--
                return (new Ar).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Er extends r.Message {
            constructor(e) {
                super(),
                this.authUid = "",
                this.usedPromptCredits = r.protoInt64.zero,
                this.usedFlowCredits = r.protoInt64.zero,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Er).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new Er).fromJsonString(e, t)
--
        class br extends r.Message {
            constructor(e) {
                super(),
                this.secret = "",
                this.teamId = "",
                this.amount = r.protoInt64.zero,
                this.type = d.UNSPECIFIED,
                this.email = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new br).fromBinary(e, t)
--
            static fromJson(e, t) {
                return (new br).fromJson(e, t)
            }
--
        class vr extends r.Message {
            constructor(e) {
                super(),
                this.previousFlexCredits = r.protoInt64.zero,
                this.newFlexCredits = r.protoInt64.zero,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new vr).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new vr).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new vr).fromJsonString(e, t)
            }
--
        class l extends r.Message {
            constructor(e) {
                super(),
                this.aggregationFunction = i.UNSPECIFIED,
                this.field = "",
                this.name = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new l).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new l).fromJsonString(e, t)
--
        class c extends r.Message {
            constructor(e) {
                super(),
                this.filter = s.UNSPECIFIED,
                this.name = "",
                this.value = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new c).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new c).fromJsonString(e, t)
--
        class u extends r.Message {
            constructor(e) {
                super(),
                this.field = "",
                this.name = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new u).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new u).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new u).fromJsonString(e, t)
            }
--
        class d extends r.Message {
            constructor(e) {
                super(),
                this.ascending = !1,
                this.name = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new d).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new d).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new d).fromJsonString(e, t)
            }
--
        class m extends r.Message {
            constructor(e) {
                super(),
                this.dataSource = o.UNSPECIFIED,
                this.selections = [],
                this.filters = [],
                this.aggregations = [],
                this.orderings = [],
                this.useRealApiKey = !1,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
--
            }
            static fromJson(e, t) {
                return (new m).fromJson(e, t)
--
        class p extends r.Message {
            constructor(e) {
                super(),
                this.item = {},
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new p).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new p).fromJson(e, t)
            }
--
                return (new p).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class f extends r.Message {
            constructor(e) {
                super(),
                this.responseItems = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new f).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new f).fromJson(e, t)
            }
--
                return (new f).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class h extends r.Message {
            constructor(e) {
                super(),
                this.queryRequests = [],
                this.apiKey = "",
                this.groupId = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new h).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new h).fromJsonString(e, t)
--
        class _ extends r.Message {
            constructor(e) {
                super(),
                this.queryResults = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new _).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new _).fromJson(e, t)
            }
--
                return (new _).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class g extends r.Message {
            constructor(e) {
                super(),
                this.queryRequests = [],
                this.serviceKey = "",
                this.groupName = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new g).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new g).fromJsonString(e, t)
--
        class y extends r.Message {
            constructor(e) {
                super(),
                this.queryResults = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new y).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new y).fromJson(e, t)
            }
--
                return (new y).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class A extends r.Message {
            constructor(e) {
                super(),
                this.serviceKey = "",
                this.groupName = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new A).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new A).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new A).fromJsonString(e, t)
            }
--
        class E extends r.Message {
            constructor(e) {
                super(),
                this.userTableStats = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new E).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new E).fromJson(e, t)
            }
--
                return (new E).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class b extends r.Message {
            constructor(e) {
                super(),
                this.username = "",
                this.queryRequests = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new b).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new b).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new b).fromJsonString(e, t)
            }
--
        class v extends r.Message {
            constructor(e) {
                super(),
                this.queryResults = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new v).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new v).fromJson(e, t)
            }
--
                return (new v).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class w extends r.Message {
            constructor(e) {
                super(),
                this.requestType = {
                    case: void 0
                },
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new w).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new w).fromJsonString(e, t)
--
        class S extends r.Message {
            constructor(e) {
                super(),
                this.resultType = {
                    case: void 0
                },
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new S).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new S).fromJsonString(e, t)
--
        class T extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new T).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new T).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(T, e, t)
--
        class x extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new x).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new x).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(x, e, t)
--
        class C extends r.Message {
            constructor(e) {
                super(),
                this.timeZone = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new C).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new C).fromJson(e, t)
            }
--
                return (new C).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class k extends r.Message {
            constructor(e) {
                super(),
                this.completionsByDay = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new k).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new k).fromJson(e, t)
            }
--
                return (new k).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class M extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new M).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new M).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(M, e, t)
--
        class L extends r.Message {
            constructor(e) {
                super(),
                this.completionsByLanguage = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new L).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new L).fromJson(e, t)
            }
--
                return (new L).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class I extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new I).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new I).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(I, e, t)
--
        class N extends r.Message {
            constructor(e) {
                super(),
                this.completionsByIde = {},
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new N).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new N).fromJson(e, t)
            }
--
                return (new N).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class O extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new O).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new O).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(O, e, t)
--
        class R extends r.Message {
            constructor(e) {
                super(),
                this.completionsByRepository = {},
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new R).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new R).fromJson(e, t)
            }
--
                return (new R).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class D extends r.Message {
            constructor(e) {
                super(),
                this.timeZone = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new D).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new D).fromJson(e, t)
            }
--
                return (new D).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class P extends r.Message {
            constructor(e) {
                super(),
                this.chatsByDay = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new P).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new P).fromJson(e, t)
            }
--
                return (new P).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class B extends r.Message {
            constructor(e) {
                super(),
                this.timeZone = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new B).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new B).fromJson(e, t)
            }
--
                return (new B).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class F extends r.Message {
            constructor(e) {
                super(),
                this.timeZone = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new F).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new F).fromJson(e, t)
            }
--
                return (new F).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class j extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new j).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new j).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(j, e, t)
--
        class U extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new U).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new U).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(U, e, t)
--
        class Y extends r.Message {
            constructor(e) {
                super(),
                this.chatsByModel = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Y).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Y).fromJson(e, t)
            }
--
                return (new Y).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class H extends r.Message {
            constructor(e) {
                super(),
                this.timeZone = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new H).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new H).fromJson(e, t)
            }
--
                return (new H).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class q extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new q).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new q).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(q, e, t)
--
        class G extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new G).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new G).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(G, e, t)
--
        class J extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new J).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new J).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(J, e, t)
--
        class V extends r.Message {
            constructor(e) {
                super(),
                this.completionsByApiKey = {},
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new V).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new V).fromJson(e, t)
            }
--
                return (new V).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class z extends r.Message {
            constructor(e) {
                super(),
                this.activeUserCount = r.protoInt64.zero,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new z).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new z).fromJson(e, t)
            }
--
                return (new z).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class W extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new W).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new W).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(W, e, t)
--
        class Z extends r.Message {
            constructor(e) {
                super(),
                this.percentCodeWritten = 0,
                this.codeiumBytesByAutocomplete = r.protoInt64.zero,
                this.codeiumBytesByCommand = r.protoInt64.zero,
                this.codeiumBytesBySupercomplete = r.protoInt64.zero,
                this.userBytes = r.protoInt64.zero,
                this.codeiumBytes = r.protoInt64.zero,
                this.totalBytes = r.protoInt64.zero,
                r.proto3.util.initPartial(e, this)
            }
--
                return (new Z).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
        class K extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new K).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new K).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(K, e, t)
--
        class $ extends r.Message {
            constructor(e) {
                super(),
                this.charsPerOpportunity = 0,
                this.numBytesAccepted = r.protoInt64.zero,
                this.numCompletionAttempts = r.protoInt64.zero,
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new $).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new $).fromJsonString(e, t)
--
        class X extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new X).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new X).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(X, e, t)
--
        class Q extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Q).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Q).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(Q, e, t)
--
        class ee extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ee).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ee).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(ee, e, t)
--
        class te extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new te).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new te).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(te, e, t)
--
        class ne extends r.Message {
            constructor(e) {
                super(),
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ne).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ne).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto3.util.equals(ne, e, t)
--
        class re extends r.Message {
            constructor(e) {
                super(),
                this.activeDaysByApiKey = {},
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new re).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new re).fromJson(e, t)
            }
--
                return (new re).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class ae extends r.Message {
            constructor(e) {
                super(),
                this.error = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ae).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ae).fromJson(e, t)
            }
--
                return (new ae).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class oe extends r.Message {
            constructor(e) {
                super(),
                this.apiKey = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new oe).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new oe).fromJson(e, t)
            }
--
                return (new oe).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class ie extends r.Message {
            constructor(e) {
                super(),
                this.preferredTimeZone = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new ie).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new ie).fromJson(e, t)
            }
--
                return (new ie).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class s extends o.Component {
            constructor(e) {
                super(e),
                this.state = i
            }
            static getDerivedStateFromError(e) {
                return {
                    error: e,
                    didCatch: !0
                }
            }
            componentDidCatch(e, t) {
--
            }
            componentDidUpdate(e, t) {
                const {didCatch: n} = this.state;
--
        t.AsyncPostMessage = class {
            constructor(e=2e4) {
                this.send = (e, t, n) => {
                    const a = (0,
                    r.getNonce)()
                      , o = new Promise(( (r, o) => {
                        var i;
                        this.callbacks.set(a, {
                            resolve: r,
                            reject: o
                        });
                        const s = {
--
                            functionName: e,
                            args: t
                        };
--
        class a {
            constructor(e) {
                this.uri = e
            }
            static fromUri(e) {
                return new a(e)
            }
            static fromPath(e) {
                return new a(r.URI.file(e).toString())
            }
            toPath() {
                const e = this.uri;
--
                x: 0,
                y: 0
            })
--
            j[e] = class extends n {
                constructor() {
                    super(),
                    Object.defineProperty(this, "message", {
                        value: t.apply(this, arguments),
                        writable: !0,
                        configurable: !0
                    }),
                    this.name = `${this.name} [${e}]`,
                    this.stack,
                    delete this.name
                }
--
                    return e
                }
                set code(e) {
--
        class a {
            constructor(e) {
                void 0 === e.data && (e.data = {}),
                this.data = e.data,
                this.isMatchIgnored = !1
            }
            ignoreMatch() {
                this.isMatchIgnored = !0
            }
        }
        function o(e) {
            return e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;")
--
        function i(e, ...t) {
            const n = Object.create(null);
            for (const t in e)
--
        class l {
            constructor(e, t) {
                this.buffer = "",
                this.classPrefix = t.classPrefix,
                e.walk(this)
            }
            addText(e) {
                this.buffer += o(e)
            }
            openNode(e) {
                if (!s(e))
                    return;
--
                e.sublanguage || (t = `${this.classPrefix}${t}`),
                this.span(t)
            }
--
        class c {
            constructor() {
                this.rootNode = {
                    children: []
                },
                this.stack = [this.rootNode]
            }
            get top() {
                return this.stack[this.stack.length - 1]
            }
            get root() {
                return this.rootNode
--
            add(e) {
                this.top.children.push(e)
            }
--
        class u extends c {
            constructor(e) {
                super(),
                this.options = e
            }
            addKeyword(e, t) {
                "" !== e && (this.openNode(t),
                this.addText(e),
                this.closeNode())
            }
            addText(e) {
                "" !== e && this.add(e)
--
            addSublanguage(e, t) {
                const n = e.root;
                n.kind = t,
--
            class r {
                constructor() {
                    this.matchIndexes = {},
                    this.regexes = [],
                    this.matchAt = 1,
                    this.position = 0
                }
                addRule(e, t) {
                    t.position = this.position++,
                    this.matchIndexes[this.matchAt] = t,
                    this.regexes.push([t, e]),
                    this.matchAt += function(e) {
--
                    }(e) + 1
                }
                compile() {
--
            class a {
                constructor() {
                    this.rules = [],
                    this.multiRegexes = [],
                    this.count = 0,
                    this.lastIndex = 0,
                    this.regexIndex = 0
                }
                getMatcher(e) {
                    if (this.multiRegexes[e])
                        return this.multiRegexes[e];
                    const t = new r;
--
            }
        }
    }
    ,
--
            const t = "exports register file shl array record property for mod while set ally label uses raise not stored class safecall var interface or private static exit index inherited to else stdcall override shr asm far resourcestring finalization packed virtual out and protected library do xorwrite goto near function end div overload object unit begin string on inline repeat until destructor write message program with read initialization except default nil if case cdecl in downto threadvar of try pascal const external constructor type public then implementation finally published procedure absolute reintroduce operator as is abstract alias assembler bitpacked break continue cppdecl cvar enumerator experimental platform deprecated unimplemented dynamic export far16 forward generic helper implements interrupt iochecks local name nodefault noreturn nostackframe oldfpccall otherwise saveregisters softfloat specialize strict unaligned varargs "
              , n = [e.C_LINE_COMMENT_MODE, e.COMMENT(/\{/, /\}/, {
                relevance: 0
            }), e.COMMENT(/\(\*/, /\*\)/, {
                relevance: 10
            })]
              , r = {
                className: "meta",
                variants: [{
                    begin: /\{\$/,
                    end: /\}/
--
                    excludeEnd: !0,
                    end: /[{;=]/,
                    keywords: r,
                    contains: [{
--
                keyword: "abstract as val var vararg get set class object open private protected public noinline crossinline dynamic final enum if else do while for when throw try catch finally import package is in fun override companion reified inline lateinit init interface annotation data sealed internal infix operator out by constructor super tailrec where const inner suspend typealias external expect actual",
                built_in: "Byte Short Char Int Long Boolean Float Double Void Unit Nothing",
                literal: "true false null"
            }
              , n = {
                className: "symbol",
                begin: e.UNDERSCORE_IDENT_RE + "@"
            }
              , r = {
                className: "subst",
                begin: /\$\{/,
--
                    beginKeywords: "class interface trait",
                    end: /[:\{(]|$/,
                    excludeEnd: !0,
                    illegal: "extends implements",
                    contains: [{
                        beginKeywords: "public protected internal private constructor"
                    }, e.UNDERSCORE_TITLE_MODE, {
                        className: "type",
                        begin: /</,
                        end: />/,
                        excludeBegin: !0,
                        excludeEnd: !0,
                        relevance: 0
                    }, {
                        className: "type",
                        begin: /[,:]\s*/,
--
                    className: "symbol",
                    begin: "'[A-Za-z_](?!')[\\w']*"
                }, {
                    className: "type",
--
                keyword: "abstract add and array as asc aspect assembly async begin break block by case class concat const copy constructor continue create default delegate desc distinct div do downto dynamic each else empty end ensure enum equals event except exit extension external false final finalize finalizer finally flags for forward from function future global group has if implementation implements implies in index inherited inline interface into invariants is iterator join locked locking loop matching method mod module namespace nested new nil not notify nullable of old on operator or order out override parallel params partial pinned private procedure property protected public queryable raise read readonly record reintroduce remove repeat require result reverse sealed select self sequence set shl shr skip static step soft take then to true try tuple type union unit unsafe until uses using var virtual raises volatile where while with write xor yield await mapped deprecated stdcall cdecl pascal register safecall overload library platform reference packed strict published autoreleasepool selector strong weak unretained"
            }
              , n = e.COMMENT(/\{/, /\}/, {
                relevance: 0
            })
              , r = e.COMMENT("\\(\\*", "\\*\\)", {
                relevance: 10
            })
              , a = {
                className: "string",
                begin: "'",
--
                    begin: n + "[+\\-]" + n + "i",
                    relevance: 0
                }, {
                    begin: "#b[0-1]+(/[0-1]+)?"
--
                        keyword: "as abort abs absolute acc acce accep accept access accessed accessible account acos action activate add addtime admin administer advanced advise aes_decrypt aes_encrypt after agent aggregate ali alia alias all allocate allow alter always analyze ancillary and anti any anydata anydataset anyschema anytype apply archive archived archivelog are as asc ascii asin assembly assertion associate asynchronous at atan atn2 attr attri attrib attribu attribut attribute attributes audit authenticated authentication authid authors auto autoallocate autodblink autoextend automatic availability avg backup badfile basicfile before begin beginning benchmark between bfile bfile_base big bigfile bin binary_double binary_float binlog bit_and bit_count bit_length bit_or bit_xor bitmap blob_base block blocksize body both bound bucket buffer_cache buffer_pool build bulk by byte byteordermark bytes cache caching call calling cancel capacity cascade cascaded case cast catalog category ceil ceiling chain change changed char_base char_length character_length characters characterset charindex charset charsetform charsetid check checksum checksum_agg child choose chr chunk class cleanup clear client clob clob_base clone close cluster_id cluster_probability cluster_set clustering coalesce coercibility col collate collation collect colu colum column column_value columns columns_updated comment commit compact compatibility compiled complete composite_limit compound compress compute concat concat_ws concurrent confirm conn connec connect connect_by_iscycle connect_by_isleaf connect_by_root connect_time connection consider consistent constant constraint constraints constructor container content contents context contributors controlfile conv convert convert_tz corr corr_k corr_s corresponding corruption cos cost count count_big counted covar_pop covar_samp cpu_per_call cpu_per_session crc32 create creation critical cross cube cume_dist curdate current current_date current_time current_timestamp current_user cursor curtime customdatum cycle data database databases datafile datafiles datalength date_add date_cache date_format date_sub dateadd datediff datefromparts datename datepart datetime2fromparts day day_to_second dayname dayofmonth dayofweek dayofyear days db_role_change dbtimezone ddl deallocate declare decode decompose decrement decrypt deduplicate def defa defau defaul default defaults deferred defi defin define degrees delayed delegate delete delete_all delimited demand dense_rank depth dequeue des_decrypt des_encrypt des_key_file desc descr descri describ describe descriptor deterministic diagnostics difference dimension direct_load directory disable disable_all disallow disassociate discardfile disconnect diskgroup distinct distinctrow distribute distributed div do document domain dotnet double downgrade drop dumpfile duplicate duration each edition editionable editions element ellipsis else elsif elt empty enable enable_all enclosed encode encoding encrypt end end-exec endian enforced engine engines enqueue enterprise entityescaping eomonth error errors escaped evalname evaluate event eventdata events except exception exceptions exchange exclude excluding execu execut execute exempt exists exit exp expire explain explode export export_set extended extent external external_1 external_2 externally extract failed failed_login_attempts failover failure far fast feature_set feature_value fetch field fields file file_name_convert filesystem_like_logging final finish first first_value fixed flash_cache flashback floor flush following follows for forall force foreign form forma format found found_rows freelist freelists freepools fresh from from_base64 from_days ftp full function general generated get get_format get_lock getdate getutcdate global global_name globally go goto grant grants greatest group group_concat group_id grouping grouping_id groups gtid_subtract guarantee guard handler hash hashkeys having hea head headi headin heading heap help hex hierarchy high high_priority hosts hour hours http id ident_current ident_incr ident_seed identified identity idle_time if ifnull ignore iif ilike ilm immediate import in include including increment index indexes indexing indextype indicator indices inet6_aton inet6_ntoa inet_aton inet_ntoa infile initial initialized initially initrans inmemory inner innodb input insert install instance instantiable instr interface interleaved intersect into invalidate invisible is is_free_lock is_ipv4 is_ipv4_compat is_not is_not_null is_used_lock isdate isnull isolation iterate java join json json_exists keep keep_duplicates key keys kill language large last last_day last_insert_id last_value lateral lax lcase lead leading least leaves left len lenght length less level levels library like like2 like4 likec limit lines link list listagg little ln load load_file lob lobs local localtime localtimestamp locate locator lock locked log log10 log2 logfile logfiles logging logical logical_reads_per_call logoff logon logs long loop low low_priority lower lpad lrtrim ltrim main make_set makedate maketime managed management manual map mapping mask master master_pos_wait match matched materialized max maxextents maximize maxinstances maxlen maxlogfiles maxloghistory maxlogmembers maxsize maxtrans md5 measures median medium member memcompress memory merge microsecond mid migration min minextents minimum mining minus minute minutes minvalue missing mod mode model modification modify module monitoring month months mount move movement multiset mutex name name_const names nan national native natural nav nchar nclob nested never new newline next nextval no no_write_to_binlog noarchivelog noaudit nobadfile nocheck nocompress nocopy nocycle nodelay nodiscardfile noentityescaping noguarantee nokeep nologfile nomapping nomaxvalue nominimize nominvalue nomonitoring none noneditionable nonschema noorder nopr nopro noprom nopromp noprompt norely noresetlogs noreverse normal norowdependencies noschemacheck noswitch not nothing notice notnull notrim novalidate now nowait nth_value nullif nulls num numb numbe nvarchar nvarchar2 object ocicoll ocidate ocidatetime ociduration ociinterval ociloblocator ocinumber ociref ocirefcursor ocirowid ocistring ocitype oct octet_length of off offline offset oid oidindex old on online only opaque open operations operator optimal optimize option optionally or oracle oracle_date oradata ord ordaudio orddicom orddoc order ordimage ordinality ordvideo organization orlany orlvary out outer outfile outline output over overflow overriding package pad parallel parallel_enable parameters parent parse partial partition partitions pascal passing password password_grace_time password_lock_time password_reuse_max password_reuse_time password_verify_function patch path patindex pctincrease pctthreshold pctused pctversion percent percent_rank percentile_cont percentile_disc performance period period_add period_diff permanent physical pi pipe pipelined pivot pluggable plugin policy position post_transaction pow power pragma prebuilt precedes preceding precision prediction prediction_cost prediction_details prediction_probability prediction_set prepare present preserve prior priority private private_sga privileges procedural procedure procedure_analyze processlist profiles project prompt protection public publishingservername purge quarter query quick quiesce quota quotename radians raise rand range rank raw read reads readsize rebuild record records recover recovery recursive recycle redo reduced ref reference referenced references referencing refresh regexp_like register regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy reject rekey relational relative relaylog release release_lock relies_on relocate rely rem remainder rename repair repeat replace replicate replication required reset resetlogs resize resource respect restore restricted result result_cache resumable resume retention return returning returns reuse reverse revoke right rlike role roles rollback rolling rollup round row row_count rowdependencies rowid rownum rows rtrim rules safe salt sample save savepoint sb1 sb2 sb4 scan schema schemacheck scn scope scroll sdo_georaster sdo_topo_geometry search sec_to_time second seconds section securefile security seed segment select self semi sequence sequential serializable server servererror session session_user sessions_per_user set sets settings sha sha1 sha2 share shared shared_pool short show shrink shutdown si_averagecolor si_colorhistogram si_featurelist si_positionalcolor si_stillimage si_texture siblings sid sign sin size size_t sizes skip slave sleep smalldatetimefromparts smallfile snapshot some soname sort soundex source space sparse spfile split sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_small_result sql_variant_property sqlcode sqldata sqlerror sqlname sqlstate sqrt square standalone standby start starting startup statement static statistics stats_binomial_test stats_crosstab stats_ks_test stats_mode stats_mw_test stats_one_way_anova stats_t_test_ stats_t_test_indep stats_t_test_one stats_t_test_paired stats_wsr_test status std stddev stddev_pop stddev_samp stdev stop storage store stored str str_to_date straight_join strcmp strict string struct stuff style subdate subpartition subpartitions substitutable substr substring subtime subtring_index subtype success sum suspend switch switchoffset switchover sync synchronous synonym sys sys_xmlagg sysasm sysaux sysdate sysdatetimeoffset sysdba sysoper system system_user sysutcdatetime table tables tablespace tablesample tan tdo template temporary terminated tertiary_weights test than then thread through tier ties time time_format time_zone timediff timefromparts timeout timestamp timestampadd timestampdiff timezone_abbr timezone_minute timezone_region to to_base64 to_date to_days to_seconds todatetimeoffset trace tracking transaction transactional translate translation treat trigger trigger_nestlevel triggers trim truncate try_cast try_convert try_parse type ub1 ub2 ub4 ucase unarchived unbounded uncompress under undo unhex unicode uniform uninstall union unique unix_timestamp unknown unlimited unlock unnest unpivot unrecoverable unsafe unsigned until untrusted unusable unused update updated upgrade upped upper upsert url urowid usable usage use use_stored_outlines user user_data user_resources users using utc_date utc_timestamp uuid uuid_short validate validate_password_strength validation valist value values var var_samp varcharc vari varia variab variabl variable variables variance varp varraw varrawc varray verify version versions view virtual visible void wait wallet warning warnings week weekday weekofyear wellformed when whene whenev wheneve whenever where while whitespace window with within without work wrapped xdb xml xmlagg xmlattributes xmlcast xmlcolattval xmlelement xmlexists xmlforest xmlindex xmlnamespaces xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltype xor year year_to_month years yearweek",
                        literal: "true false null unknown",
                        built_in: "array bigint binary bit blob bool boolean char character date dec decimal float int int8 integer interval number numeric real record serial serial8 smallint text time timestamp tinyint varchar varchar2 varying void"
                    },
                    contains: [{
                        className: "string",
                        begin: "'",
                        end: "'",
                        contains: [{
                            begin: "''"
                        }]
--
            }
        }
        const a = globalThis.AsyncLocalStorage;
--
        class o extends Error {
            constructor() {
                super("Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams")
            }
        }
        class i extends URLSearchParams {
            append() {
                throw new o
            }
            delete() {
                throw new o
            }
--
        }
        ("function" == typeof t.default || "object" == typeof t.default && null !== t.default) && void 0 === t.default.__esModule && (Object.defineProperty(t.default, "__esModule", {
            value: !0
--
        class r extends Error {
            constructor(e) {
                super("Bail out to client-side rendering: " + e),
                this.reason = e,
                this.digest = n
            }
        }
        function a(e) {
            return "object" == typeof e && null !== e && "digest"in e && e.digest === n
        }
    }
    ,
--
        class f extends Error {
        }
        class h extends Error {
        }
        class _ extends Error {
            constructor(e) {
                super(),
                this.code = "ENOENT",
                this.name = "PageNotFoundError",
                this.message = "Cannot find module for page: " + e
            }
        }
        class g extends Error {
            constructor(e, t) {
                super(),
                this.message = "Failed to load static file for page: " + e + " " + t
            }
        }
        class y extends Error {
            constructor() {
                super(),
                this.code = "ENOENT",
                this.message = "Cannot find the middleware module"
            }
        }
        function A(e) {
            return JSON.stringify({
                message: e.message,
                stack: e.stack
            })
--
                        scheme;
                        authority;
                        path;
                        query;
                        fragment;
                        constructor(e, t, n, r, a, o=!1) {
                            "object" == typeof e ? (this.scheme = e.scheme || l,
                            this.authority = e.authority || l,
                            this.path = e.path || l,
                            this.query = e.query || l,
                            this.fragment = e.fragment || l) : (this.scheme = function(e, t) {
                                return e || t ? e : "file"
--
                    class p extends d {
                        _formatted = null;
                        _fsPath = null;
--
            var t = [];
            return t.toString = function() {
                return this.map((function(t) {
--
        t.BinaryWriter = class {
            constructor(e) {
                this.stack = [],
                this.textEncoder = null != e ? e : new TextEncoder,
                this.chunks = [],
                this.buf = []
            }
            finish() {
                this.chunks.push(new Uint8Array(this.buf));
                let e = 0;
                for (let t = 0; t < this.chunks.length; t++)
                    e += this.chunks[t].length;
--
                  , n = 0;
                for (let e = 0; e < this.chunks.length; e++)
                    t.set(this.chunks[e], n),
--
        t.BinaryReader = class {
            constructor(e, t) {
                this.varint64 = r.varint64read,
                this.uint32 = r.varint32read,
                this.buf = e,
                this.len = e.length,
                this.pos = 0,
                this.view = new DataView(e.buffer,e.byteOffset,e.byteLength),
                this.textDecoder = null != t ? t : new TextDecoder
            }
            tag() {
                let e = this.uint32()
--
                  , n = 7 & e;
                if (t <= 0 || n < 0 || n > 5)
                    throw new Error("illegal tag: field no " + t + " wire type " + n);
--
        class o extends r.Message {
            constructor(e) {
                super(),
                this.typeUrl = "",
                this.value = new Uint8Array(0),
                a.proto3.util.initPartial(e, this)
            }
            toJson(e) {
                var t;
                if ("" === this.typeUrl)
                    return {};
                const n = this.typeUrlToName(this.typeUrl)
--
                if (!r)
                    throw new Error(`cannot encode message google.protobuf.Any to JSON: "${this.typeUrl}" is not in the type registry`);
                let a = r.fromBinary(this.value).toJson(e);
--
        class s extends r.Message {
            constructor(e) {
                super(),
                this.name = "",
                this.methods = [],
                this.options = [],
                this.version = "",
                this.mixins = [],
                this.syntax = a.Syntax.PROTO2,
                i.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
--
            }
            static fromJson(e, t) {
                return (new s).fromJson(e, t)
--
        class l extends r.Message {
            constructor(e) {
                super(),
                this.name = "",
                this.requestTypeUrl = "",
                this.requestStreaming = !1,
                this.responseTypeUrl = "",
                this.responseStreaming = !1,
                this.options = [],
                this.syntax = a.Syntax.PROTO2,
                i.proto3.util.initPartial(e, this)
            }
--
                return (new l).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
        class c extends r.Message {
            constructor(e) {
                super(),
                this.name = "",
                this.root = "",
                i.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new c).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new c).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new c).fromJsonString(e, t)
            }
--
        class i extends r.Message {
            constructor(e) {
                super(),
                a.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new i).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new i).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return a.proto2.util.equals(i, e, t)
--
        class s extends r.Message {
            constructor(e) {
                super(),
                this.fileToGenerate = [],
                this.protoFile = [],
                this.sourceFileDescriptors = [],
                a.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new s).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new s).fromJsonString(e, t)
--
        class l extends r.Message {
            constructor(e) {
                super(),
                this.file = [],
                a.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new l).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new l).fromJson(e, t)
            }
--
                return (new l).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class u extends r.Message {
            constructor(e) {
                super(),
                a.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new u).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new u).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return a.proto2.util.equals(u, e, t)
--
        class v extends a.Message {
            constructor(e) {
                super(),
                this.file = [],
                r.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new v).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new v).fromJson(e, t)
            }
--
                return (new v).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class w extends a.Message {
            constructor(e) {
                super(),
                this.dependency = [],
                this.publicDependency = [],
                this.weakDependency = [],
                this.messageType = [],
                this.enumType = [],
                this.service = [],
                this.extension = [],
                r.proto2.util.initPartial(e, this)
            }
--
                return (new w).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
        class S extends a.Message {
            constructor(e) {
                super(),
                this.field = [],
                this.extension = [],
                this.nestedType = [],
                this.enumType = [],
                this.extensionRange = [],
                this.oneofDecl = [],
                this.reservedRange = [],
                this.reservedName = [],
                r.proto2.util.initPartial(e, this)
--
            static fromBinary(e, t) {
                return (new S).fromBinary(e, t)
            }
--
        class T extends a.Message {
            constructor(e) {
                super(),
                r.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new T).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new T).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto2.util.equals(T, e, t)
--
        class x extends a.Message {
            constructor(e) {
                super(),
                r.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new x).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new x).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto2.util.equals(x, e, t)
--
        class C extends a.Message {
            constructor(e) {
                super(),
                this.uninterpretedOption = [],
                this.declaration = [],
                r.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new C).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new C).fromJson(e, t)
--
            static fromJsonString(e, t) {
                return (new C).fromJsonString(e, t)
            }
--
        class k extends a.Message {
            constructor(e) {
                super(),
                r.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new k).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new k).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto2.util.equals(k, e, t)
--
        class M extends a.Message {
            constructor(e) {
                super(),
                r.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new M).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new M).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto2.util.equals(M, e, t)
--
        class L extends a.Message {
            constructor(e) {
                super(),
                r.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new L).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new L).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto2.util.equals(L, e, t)
--
        class I extends a.Message {
            constructor(e) {
                super(),
                this.value = [],
                this.reservedRange = [],
                this.reservedName = [],
                r.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new I).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new I).fromJsonString(e, t)
--
        class N extends a.Message {
            constructor(e) {
                super(),
                r.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new N).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new N).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto2.util.equals(N, e, t)
--
        class O extends a.Message {
            constructor(e) {
                super(),
                r.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new O).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new O).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto2.util.equals(O, e, t)
--
        class R extends a.Message {
            constructor(e) {
                super(),
                this.method = [],
                r.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new R).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new R).fromJson(e, t)
            }
--
                return (new R).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class D extends a.Message {
            constructor(e) {
                super(),
                r.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new D).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new D).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto2.util.equals(D, e, t)
--
        class P extends a.Message {
            constructor(e) {
                super(),
                this.uninterpretedOption = [],
                r.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new P).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new P).fromJson(e, t)
            }
--
                return (new P).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class B extends a.Message {
            constructor(e) {
                super(),
                this.uninterpretedOption = [],
                r.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new B).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new B).fromJson(e, t)
            }
--
                return (new B).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class F extends a.Message {
            constructor(e) {
                super(),
                this.targets = [],
                this.editionDefaults = [],
                this.uninterpretedOption = [],
                r.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new F).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new F).fromJsonString(e, t)
--
        class j extends a.Message {
            constructor(e) {
                super(),
                r.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new j).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new j).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto2.util.equals(j, e, t)
--
        class U extends a.Message {
            constructor(e) {
                super(),
                this.uninterpretedOption = [],
                r.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new U).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new U).fromJson(e, t)
            }
--
                return (new U).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Y extends a.Message {
            constructor(e) {
                super(),
                this.uninterpretedOption = [],
                r.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Y).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Y).fromJson(e, t)
            }
--
                return (new Y).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class H extends a.Message {
            constructor(e) {
                super(),
                this.uninterpretedOption = [],
                r.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new H).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new H).fromJson(e, t)
            }
--
                return (new H).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class q extends a.Message {
            constructor(e) {
                super(),
                this.uninterpretedOption = [],
                r.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new q).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new q).fromJson(e, t)
            }
--
                return (new q).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class G extends a.Message {
            constructor(e) {
                super(),
                this.uninterpretedOption = [],
                r.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new G).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new G).fromJson(e, t)
            }
--
                return (new G).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class J extends a.Message {
            constructor(e) {
                super(),
                this.name = [],
                r.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new J).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new J).fromJson(e, t)
            }
--
                return (new J).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class V extends a.Message {
            constructor(e) {
                super(),
                r.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new V).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new V).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto2.util.equals(V, e, t)
--
        class z extends a.Message {
            constructor(e) {
                super(),
                r.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new z).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new z).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto2.util.equals(z, e, t)
--
        class W extends a.Message {
            constructor(e) {
                super(),
                this.defaults = [],
                r.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new W).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new W).fromJson(e, t)
            }
--
                return (new W).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Z extends a.Message {
            constructor(e) {
                super(),
                r.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Z).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Z).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return r.proto2.util.equals(Z, e, t)
--
        class K extends a.Message {
            constructor(e) {
                super(),
                this.location = [],
                r.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new K).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new K).fromJson(e, t)
            }
--
                return (new K).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class $ extends a.Message {
            constructor(e) {
                super(),
                this.path = [],
                this.span = [],
                this.leadingDetachedComments = [],
                r.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new $).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new $).fromJsonString(e, t)
--
        class X extends a.Message {
            constructor(e) {
                super(),
                this.annotation = [],
                r.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new X).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new X).fromJson(e, t)
            }
--
                return (new X).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class Q extends a.Message {
            constructor(e) {
                super(),
                this.path = [],
                r.proto2.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new Q).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new Q).fromJson(e, t)
            }
--
                return (new Q).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class i extends r.Message {
            constructor(e) {
                super(),
                this.seconds = a.protoInt64.zero,
                this.nanos = 0,
                o.proto3.util.initPartial(e, this)
            }
            fromJson(e, t) {
                if ("string" != typeof e)
                    throw new Error(`cannot decode google.protobuf.Duration from JSON: ${o.proto3.json.debug(e)}`);
                const n = e.match(/^(-?[0-9]+)(?:\.([0-9]+))?s/);
                if (null === n)
--
                const r = Number(n[1]);
                if (r > 315576e6 || r < -315576e6)
                    throw new Error(`cannot decode google.protobuf.Duration from JSON: ${o.proto3.json.debug(e)}`);
--
        class o extends r.Message {
            constructor(e) {
                super(),
                a.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new o).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new o).fromJson(e, t)
            }
            static fromJsonString(e, t) {
--
            }
            static equals(e, t) {
                return a.proto3.util.equals(o, e, t)
--
        class o extends r.Message {
            constructor(e) {
                super(),
                this.paths = [],
                a.proto3.util.initPartial(e, this)
            }
            toJson(e) {
                return this.paths.map((e => {
                    if (e.match(/_[0-9]?_/g) || e.match(/[A-Z]/g))
                        throw new Error('cannot encode google.protobuf.FieldMask to JSON: lowerCamelCase of path name "' + e + '" is irreversible');
                    return function(e) {
                        let t = !1;
--
                        for (let r = 0; r < e.length; r++) {
                            let a = e.charAt(r);
                            switch (a) {
--
        class o extends r.Message {
            constructor(e) {
                super(),
                this.fileName = "",
                a.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new o).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new o).fromJson(e, t)
            }
--
                return (new o).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class i extends a.Message {
            constructor(e) {
                super(),
                this.fields = {},
                r.proto3.util.initPartial(e, this)
            }
            toJson(e) {
                const t = {};
                for (const [n,r] of Object.entries(this.fields))
                    t[n] = r.toJson(e);
                return t
            }
--
                if ("object" != typeof e || null == e || Array.isArray(e))
                    throw new Error("cannot decode google.protobuf.Struct from JSON " + r.proto3.json.debug(e));
                for (const [t,n] of Object.entries(e))
--
        class s extends a.Message {
            constructor(e) {
                super(),
                this.kind = {
                    case: void 0
                },
                r.proto3.util.initPartial(e, this)
            }
            toJson(e) {
                switch (this.kind.case) {
                case "nullValue":
                    return null;
--
                    if (!Number.isFinite(this.kind.value))
                        throw new Error("google.protobuf.Value cannot be NaN or Infinity");
                    return this.kind.value;
--
        class l extends a.Message {
            constructor(e) {
                super(),
                this.values = [],
                r.proto3.util.initPartial(e, this)
            }
            toJson(e) {
                return this.values.map((e => e.toJson()))
            }
            fromJson(e, t) {
                if (!Array.isArray(e))
                    throw new Error("cannot decode google.protobuf.ListValue from JSON " + r.proto3.json.debug(e));
--
                    this.values.push(s.fromJson(t));
                return this
            }
--
        class i extends r.Message {
            constructor(e) {
                super(),
                this.seconds = a.protoInt64.zero,
                this.nanos = 0,
                o.proto3.util.initPartial(e, this)
            }
            fromJson(e, t) {
                if ("string" != typeof e)
                    throw new Error(`cannot decode google.protobuf.Timestamp from JSON: ${o.proto3.json.debug(e)}`);
                const n = e.match(/^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(?:Z|\.([0-9]{3,9})Z|([+-][0-9][0-9]:[0-9][0-9]))$/);
                if (!n)
--
                const r = Date.parse(n[1] + "-" + n[2] + "-" + n[3] + "T" + n[4] + ":" + n[5] + ":" + n[6] + (n[8] ? n[8] : "Z"));
                if (Number.isNaN(r))
                    throw new Error("cannot decode google.protobuf.Timestamp from JSON: invalid RFC 3339 string");
--
        class u extends a.Message {
            constructor(e) {
                super(),
                this.name = "",
                this.fields = [],
                this.oneofs = [],
                this.options = [],
                this.syntax = s.PROTO2,
                this.edition = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
--
            }
            static fromJson(e, t) {
                return (new u).fromJson(e, t)
--
        class d extends a.Message {
            constructor(e) {
                super(),
                this.kind = l.TYPE_UNKNOWN,
                this.cardinality = c.UNKNOWN,
                this.number = 0,
                this.name = "",
                this.typeUrl = "",
                this.oneofIndex = 0,
                this.packed = !1,
                this.options = [],
                this.jsonName = "",
--
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
--
        class m extends a.Message {
            constructor(e) {
                super(),
                this.name = "",
                this.enumvalue = [],
                this.options = [],
                this.syntax = s.PROTO2,
                this.edition = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new m).fromBinary(e, t)
--
            static fromJson(e, t) {
                return (new m).fromJson(e, t)
            }
--
        class p extends a.Message {
            constructor(e) {
                super(),
                this.name = "",
                this.number = 0,
                this.options = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new p).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new p).fromJsonString(e, t)
--
        class f extends a.Message {
            constructor(e) {
                super(),
                this.name = "",
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new f).fromBinary(e, t)
            }
            static fromJson(e, t) {
                return (new f).fromJson(e, t)
            }
--
                return (new f).fromJsonString(e, t)
            }
            static equals(e, t) {
--
        class s extends r.Message {
            constructor(e) {
                super(),
                this.value = 0,
                a.proto3.util.initPartial(e, this)
            }
            toJson(e) {
                return a.proto3.json.writeScalar(o.ScalarType.DOUBLE, this.value, !0)
            }
            fromJson(e, t) {
                try {
                    this.value = a.proto3.json.readScalar(o.ScalarType.DOUBLE, e)
--
                    let t = 'cannot decode message google.protobuf.DoubleValue from JSON"';
                    throw e instanceof Error && e.message.length > 0 && (t += `: ${e.message}`),
                    new Error(t)
--
        class l extends r.Message {
            constructor(e) {
                super(),
                this.value = 0,
                a.proto3.util.initPartial(e, this)
            }
            toJson(e) {
                return a.proto3.json.writeScalar(o.ScalarType.FLOAT, this.value, !0)
            }
            fromJson(e, t) {
                try {
                    this.value = a.proto3.json.readScalar(o.ScalarType.FLOAT, e)
--
                    let t = 'cannot decode message google.protobuf.FloatValue from JSON"';
                    throw e instanceof Error && e.message.length > 0 && (t += `: ${e.message}`),
                    new Error(t)
--
        class c extends r.Message {
            constructor(e) {
                super(),
                this.value = i.protoInt64.zero,
                a.proto3.util.initPartial(e, this)
            }
            toJson(e) {
                return a.proto3.json.writeScalar(o.ScalarType.INT64, this.value, !0)
            }
            fromJson(e, t) {
                try {
                    this.value = a.proto3.json.readScalar(o.ScalarType.INT64, e)
--
                    let t = 'cannot decode message google.protobuf.Int64Value from JSON"';
                    throw e instanceof Error && e.message.length > 0 && (t += `: ${e.message}`),
                    new Error(t)
--
        class u extends r.Message {
            constructor(e) {
                super(),
                this.value = i.protoInt64.zero,
                a.proto3.util.initPartial(e, this)
            }
            toJson(e) {
                return a.proto3.json.writeScalar(o.ScalarType.UINT64, this.value, !0)
            }
            fromJson(e, t) {
                try {
                    this.value = a.proto3.json.readScalar(o.ScalarType.UINT64, e)
--
                    let t = 'cannot decode message google.protobuf.UInt64Value from JSON"';
                    throw e instanceof Error && e.message.length > 0 && (t += `: ${e.message}`),
                    new Error(t)
--
        class d extends r.Message {
            constructor(e) {
                super(),
                this.value = 0,
                a.proto3.util.initPartial(e, this)
            }
            toJson(e) {
                return a.proto3.json.writeScalar(o.ScalarType.INT32, this.value, !0)
            }
            fromJson(e, t) {
                try {
                    this.value = a.proto3.json.readScalar(o.ScalarType.INT32, e)
--
                    let t = 'cannot decode message google.protobuf.Int32Value from JSON"';
                    throw e instanceof Error && e.message.length > 0 && (t += `: ${e.message}`),
                    new Error(t)
--
        class m extends r.Message {
            constructor(e) {
                super(),
                this.value = 0,
                a.proto3.util.initPartial(e, this)
            }
            toJson(e) {
                return a.proto3.json.writeScalar(o.ScalarType.UINT32, this.value, !0)
            }
            fromJson(e, t) {
                try {
                    this.value = a.proto3.json.readScalar(o.ScalarType.UINT32, e)
--
                    let t = 'cannot decode message google.protobuf.UInt32Value from JSON"';
                    throw e instanceof Error && e.message.length > 0 && (t += `: ${e.message}`),
                    new Error(t)
--
        class p extends r.Message {
            constructor(e) {
                super(),
                this.value = !1,
                a.proto3.util.initPartial(e, this)
            }
            toJson(e) {
                return a.proto3.json.writeScalar(o.ScalarType.BOOL, this.value, !0)
            }
            fromJson(e, t) {
                try {
                    this.value = a.proto3.json.readScalar(o.ScalarType.BOOL, e)
--
                    let t = 'cannot decode message google.protobuf.BoolValue from JSON"';
                    throw e instanceof Error && e.message.length > 0 && (t += `: ${e.message}`),
                    new Error(t)
--
        class f extends r.Message {
            constructor(e) {
                super(),
                this.value = "",
                a.proto3.util.initPartial(e, this)
            }
            toJson(e) {
                return a.proto3.json.writeScalar(o.ScalarType.STRING, this.value, !0)
            }
            fromJson(e, t) {
                try {
                    this.value = a.proto3.json.readScalar(o.ScalarType.STRING, e)
--
                    let t = 'cannot decode message google.protobuf.StringValue from JSON"';
                    throw e instanceof Error && e.message.length > 0 && (t += `: ${e.message}`),
                    new Error(t)
--
        class h extends r.Message {
            constructor(e) {
                super(),
                this.value = new Uint8Array(0),
                a.proto3.util.initPartial(e, this)
            }
            toJson(e) {
                return a.proto3.json.writeScalar(o.ScalarType.BYTES, this.value, !0)
            }
            fromJson(e, t) {
                try {
                    this.value = a.proto3.json.readScalar(o.ScalarType.BYTES, e)
--
            fromJson(e, t) {
                const n = this.getType()
                  , r = n.runtime.json
--
        t.InternalFieldList = class {
            constructor(e, t) {
                this._fields = e,
                this._normalizer = t
            }
            findJsonName(e) {
                if (!this.jsonNames) {
                    const e = {};
                    for (const t of this.list())
                        e[t.jsonName] = e[t.name] = t;
                    this.jsonNames = e
                }
--
            }
            find(e) {
                if (!this.numbers) {
--
        t.InternalOneofInfo = class {
            constructor(e) {
                this.kind = "oneof",
                this.repeated = !1,
                this.packed = !1,
                this.opt = !1,
                this.req = !1,
                this.default = void 0,
                this.fields = [],
                this.name = e,
                this.localName = (0,
                r.localOneofName)(e)
--
            addField(e) {
                (0,
                a.assert)(e.oneof === this, `field ${e.name} not one of ${this.name}`),
--
        class o extends Error {
            constructor(e, t=r.Code.Unknown, n, o, i) {
                super(function(e, t) {
                    return e.length ? `[${(0,
                    a.codeToString)(t)}] ${e}` : `[${(0,
                    a.codeToString)(t)}]`
                }(e, t)),
                this.name = "ConnectError",
                Object.setPrototypeOf(this, new.target.prototype),
                this.rawMessage = e,
                this.code = t,
                this.metadata = new Headers(null != n ? n : {}),
--
                this.cause = i
            }
            static from(e, t=r.Code.Unknown) {
--
        class a extends r.Message {
            constructor(e) {
                super(),
                this.code = 0,
                this.message = "",
                this.details = [],
                r.proto3.util.initPartial(e, this)
            }
            static fromBinary(e, t) {
                return (new a).fromBinary(e, t)
            }
            static fromJson(e, t) {
--
            }
            static fromJsonString(e, t) {
                return (new a).fromJsonString(e, t)
--
          , I = new class {
            constructor() {
                d(this, "current", this.detect()),
                d(this, "handoffState", "pending"),
                d(this, "currentId", 0)
            }
            set(e) {
                this.current !== e && (this.handoffState = "pending",
                this.currentId = 0,
                this.current = e)
            }
            reset() {
--
            }
            nextId() {
                return ++this.currentId
--
            class J {
                constructor(e) {
                    if (e instanceof J)
                        return e;
                    const t = typeof e;
                    let n;
                    "object" === t ? n = q(e) : "string" === t && (n = p(e) || R(e) || G(e)),
                    this._rgb = n,
                    this._valid = !!n
                }
                get valid() {
                    return this._valid
--
                get rgb() {
                    var e = H(this._rgb);
                    return e && (e.a = o(e.a)),
--
        class a {
            constructor() {
                this._request = null,
                this._charts = new Map,
                this._running = !1,
                this._lastDate = void 0
            }
            _notify(e, t, n, r) {
                const a = t.listeners[r]
                  , o = t.duration;
                a.forEach((r => r({
                    chart: e,
--
                    numSteps: o,
                    currentStep: Math.min(n - t.start, o)
                })))
--
        class l {
            constructor(e, t, n, a) {
                const o = t[n];
                a = r.resolve([e.to, a, o, e.from]);
                const i = r.resolve([e.from, o, a]);
                this._active = !0,
                this._fn = e.fn || s[e.type || typeof i],
                this._easing = r.effects[e.easing] || r.effects.linear,
                this._start = Math.floor(Date.now() + (e.delay || 0)),
                this._duration = this._total = Math.floor(e.duration),
                this._loop = !!e.loop,
                this._target = t,
--
                this._from = i,
                this._to = a,
                this._promises = void 0
--
        class c {
            constructor(e, t) {
                this._chart = e,
                this._properties = new Map,
                this.configure(t)
            }
            configure(e) {
                if (!r.isObject(e))
                    return;
                const t = Object.keys(r.defaults.animation)
                  , n = this._properties;
                Object.getOwnPropertyNames(e).forEach((a => {
--
--
        class b {
            static defaults = {};
            static datasetElementType = null;
            static dataElementType = null;
            constructor(e, t) {
                this.chart = e,
                this._ctx = e.ctx,
                this.index = t,
                this._cachedDataOpts = {},
                this._cachedMeta = this.getMeta(),
                this._type = this._cachedMeta.type,
                this.options = void 0,
                this._parsing = !1,
                this._data = void 0,
                this._objectData = void 0,
--
        class U {
            static override(e) {
                Object.assign(U.prototype, e)
            }
            options;
            constructor(e) {
                this.options = e || {}
            }
            init() {}
            formats() {
                return j()
            }
            parse() {
                return j()
            }
            format() {
--
                }
            }
            hasValue() {
--
        class Pe extends xe {
            constructor(e) {
                super(),
                this.id = e.id,
                this.type = e.type,
                this.options = void 0,
                this.ctx = e.ctx,
                this.chart = e.chart,
                this.top = void 0,
                this.bottom = void 0,
                this.left = void 0,
                this.right = void 0,
--
                this.height = void 0,
                this._margins = {
                    left: 0,
--
        class Be {
            constructor(e, t, n) {
                this.type = e,
                this.scope = t,
                this.override = n,
                this.items = Object.create(null)
            }
            isForType(e) {
                return Object.prototype.isPrototypeOf.call(this.type.prototype, e.prototype)
            }
            register(e) {
                const t = Object.getPrototypeOf(e);
--
                            r.defaults.route(i, o, c, l)
                        }
                        ))
--
        class Fe {
            constructor() {
                this.controllers = new Be(b,"datasets",!0),
                this.elements = new Be(xe,"elements"),
                this.plugins = new Be(Object,"plugins"),
                this.scales = new Be(Pe,"scales"),
                this._typedRegistries = [this.controllers, this.scales, this.elements]
            }
            add(...e) {
                this._each("register", e)
            }
            remove(...e) {
--
            }
            addControllers(...e) {
                this._each("register", e, this.controllers)
--
        class Ue {
            constructor() {
                this._init = []
            }
            notify(e, t, n, r) {
                "beforeInit" === t && (this._init = this._createDescriptors(e, !0),
                this._notify(this._init, e, "install"));
                const a = r ? this._descriptors(e).filter(r) : this._descriptors(e)
                  , o = this._notify(a, e, t, n);
                return "afterDestroy" === t && (this._notify(a, e, "stop"),
                this._notify(this._init, e, "uninstall")),
                o
--
            _notify(e, t, n, a) {
                a = a || {};
                for (const o of e) {
--
        class tt {
            constructor(e) {
                this._config = function(e) {
                    return (e = e || {}).data = Ke(e.data),
                    Ze(e),
                    e
                }(e),
                this._scopeCache = new Map,
                this._resolverCache = new Map
            }
            get platform() {
                return this._config.platform
--
            }
            static unregister(...e) {
                je.remove(...e),
                ht()
            }
            constructor(e, t) {
--
        class Et extends xe {
            static id = "arc";
            static defaults = {
                borderAlign: "center",
                borderColor: "#fff",
                borderDash: [],
                borderDashOffset: 0,
                borderJoinStyle: void 0,
                borderRadius: 0,
--
            };
            static defaultRoutes = {
                backgroundColor: "backgroundColor",
                borderColor: "borderColor"
            };
            constructor(e) {
                super(),
                this.options = void 0,
--
        class on {
            constructor(e) {
                this.x = e.x,
                this.y = e.y,
                this.radius = e.radius
            }
            pathSegment(e, t, n) {
                const {x: a, y: o, radius: i} = this;
                return t = t || {
                    start: 0,
                    end: r.TAU
                },
--
                !n.bounds
            }
            interpolate(e) {
--
        class hn extends xe {
            constructor(e) {
                super(),
                this._added = !1,
                this.legendHitBoxes = [],
                this._hoveredItem = null,
                this.doughnutMode = !1,
                this.chart = e.chart,
                this.options = e.options,
                this.ctx = e.ctx,
                this.legendItems = void 0,
                this.columnSizes = void 0,
--
                this.maxHeight = void 0,
                this.maxWidth = void 0,
                this.top = void 0,
--
        class yn extends xe {
            constructor(e) {
                super(),
                this.chart = e.chart,
                this.options = e.options,
                this.ctx = e.ctx,
                this._padding = void 0,
                this.top = void 0,
                this.bottom = void 0,
                this.left = void 0,
                this.right = void 0,
                this.width = void 0,
--
                this.weight = void 0,
                this.fullSize = void 0
--
        class Dn extends xe {
            static positioners = vn;
            constructor(e) {
                super(),
                this.opacity = 0,
                this._active = [],
                this._eventPosition = void 0,
                this._size = void 0,
                this._cachedAnimations = void 0,
                this._tooltipItems = [],
                this.$animations = void 0,
                this.$context = void 0,
                this.chart = e.chart,
--
            static defaults = {
                ticks: {
                    callback: jn
                }
            };
            constructor(e) {
                super(e),
                this._startValue = void 0,
                this._valueRange = 0,
                this._addedLabels = []
            }
            init(e) {
                const t = this._addedLabels;
                if (t.length) {
--
        class Hn extends Pe {
            constructor(e) {
                super(e),
                this.start = void 0,
                this.end = void 0,
                this._startValue = void 0,
                this._endValue = void 0,
                this._valueRange = 0
            }
            parse(e, t) {
                return r.isNullOrUndef(e) || ("number" == typeof e || e instanceof Number) && !isFinite(+e) ? null : +e
            }
--
                    major: {
                        enabled: !0
                    }
                }
            };
            constructor(e) {
                super(e),
                this.start = void 0,
                this.end = void 0,
                this._startValue = void 0,
                this._valueRange = 0
--
        class ar extends Hn {
            static id = "radialLinear";
            static defaults = {
                display: !0,
--
                    callback: !1,
--
        class fr extends mr {
            static id = "timeseries";
            static defaults = mr.defaults;
            constructor(e) {
                super(e),
                this._table = [],
                this._minPos = void 0,
                this._tableRange = void 0
            }
            initOffsets() {
                const e = this._getTimestampsForTable()
                  , t = this._table = this.buildLookupTable(e);
                this._minPos = pr(t, this.min),
                this._tableRange = pr(t, this.max) - this._minPos,
                super.initOffsets(e)
            }
--
        class oe {
            constructor(e, t) {
                this.animation = void 0,
                this.backgroundColor = "rgba(0,0,0,0.1)",
                this.borderColor = "rgba(0,0,0,0.1)",
                this.color = "#666",
                this.datasets = {},
                this.devicePixelRatio = e => e.chart.platform.getDevicePixelRatio(),
                this.elements = {},
                this.events = ["mousemove", "mouseout", "click", "touchstart", "touchmove"],
                this.font = {
                    family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
--
                    style: "normal",
                    lineHeight: 1.2,
                    weight: null
--
        class M {
            constructor() {
                this._partials = new Float64Array(32),
                this._n = 0
            }
            add(e) {
                const t = this._partials;
                let n = 0;
                for (let r = 0; r < this._n && r < 32; r++) {
                    const a = t[r]
                      , o = e + a
                      , i = Math.abs(e) < Math.abs(a) ? e - (o - a) : a - (o - e);
--
                    e = o
                }
                return t[n] = e,
--
        class N extends Map {
            constructor(e, t=B) {
                if (super(),
                Object.defineProperties(this, {
                    _intern: {
                        value: new Map
                    },
                    _key: {
                        value: t
                    }
                }),
                null != e)
--
                        this.set(t, n)
            }
            get(e) {
--
        class O extends Set {
            constructor(e, t=B) {
                if (super(),
                Object.defineProperties(this, {
                    _intern: {
                        value: new Map
                    },
                    _key: {
                        value: t
                    }
                }),
                null != e)
--
    fromJson(e, t) {
        const n = this.getType()
          , r = n.runtime.json
--
class J {
    constructor(e) {
        this.stack = [],
        this.textEncoder = null != e ? e : new TextEncoder,
        this.chunks = [],
        this.buf = []
    }
    finish() {
        this.chunks.push(new Uint8Array(this.buf));
        let e = 0;
        for (let t = 0; t < this.chunks.length; t++)
            e += this.chunks[t].length;
--
          , n = 0;
        for (let e = 0; e < this.chunks.length; e++)
            t.set(this.chunks[e], n),
--
class V {
    constructor(e, t) {
        this.varint64 = k,
        this.uint32 = B,
        this.buf = e,
        this.len = e.length,
        this.pos = 0,
        this.view = new DataView(e.buffer,e.byteOffset,e.byteLength),
        this.textDecoder = null != t ? t : new TextDecoder
    }
    tag() {
        let e = this.uint32()
--
          , n = 7 & e;
        if (t <= 0 || n < 0 || n > 5)
            throw new Error("illegal tag: field no " + t + " wire type " + n);
--
class Be {
    constructor(e, t) {
        this._fields = e,
        this._normalizer = t
    }
    findJsonName(e) {
        if (!this.jsonNames) {
            const e = {};
            for (const t of this.list())
                e[t.jsonName] = e[t.name] = t;
            this.jsonNames = e
        }
--
    }
    find(e) {
        if (!this.numbers) {
--
class ze {
    constructor(e) {
        this.kind = "oneof",
        this.repeated = !1,
        this.packed = !1,
        this.opt = !1,
        this.req = !1,
        this.default = void 0,
        this.fields = [],
        this.name = e,
        this.localName = je(e)
    }
--
        m(e.oneof === this, `field ${e.name} not one of ${this.name}`),
        this.fields.push(e)
    }
--
class _t extends C {
    constructor(e) {
        super(),
        this.file = [],
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new _t).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new _t).fromJson(e, t)
    }
--
        return (new _t).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class gt extends C {
    constructor(e) {
        super(),
        this.dependency = [],
        this.publicDependency = [],
        this.weakDependency = [],
        this.messageType = [],
        this.enumType = [],
        this.service = [],
        this.extension = [],
        Ke.util.initPartial(e, this)
    }
--
        return (new gt).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
class yt extends C {
    constructor(e) {
        super(),
        this.field = [],
        this.extension = [],
        this.nestedType = [],
        this.enumType = [],
        this.extensionRange = [],
        this.oneofDecl = [],
        this.reservedRange = [],
        this.reservedName = [],
        Ke.util.initPartial(e, this)
--
    static fromBinary(e, t) {
        return (new yt).fromBinary(e, t)
    }
--
class At extends C {
    constructor(e) {
        super(),
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new At).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new At).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ke.util.equals(At, e, t)
--
class Et extends C {
    constructor(e) {
        super(),
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Et).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Et).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ke.util.equals(Et, e, t)
--
class bt extends C {
    constructor(e) {
        super(),
        this.uninterpretedOption = [],
        this.declaration = [],
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new bt).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new bt).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new bt).fromJsonString(e, t)
    }
--
class vt extends C {
    constructor(e) {
        super(),
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new vt).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new vt).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ke.util.equals(vt, e, t)
--
class wt extends C {
    constructor(e) {
        super(),
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new wt).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new wt).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ke.util.equals(wt, e, t)
--
class St extends C {
    constructor(e) {
        super(),
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new St).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new St).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ke.util.equals(St, e, t)
--
class Tt extends C {
    constructor(e) {
        super(),
        this.value = [],
        this.reservedRange = [],
        this.reservedName = [],
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Tt).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Tt).fromJsonString(e, t)
--
class xt extends C {
    constructor(e) {
        super(),
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new xt).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new xt).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ke.util.equals(xt, e, t)
--
class Ct extends C {
    constructor(e) {
        super(),
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ct).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ct).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ke.util.equals(Ct, e, t)
--
class kt extends C {
    constructor(e) {
        super(),
        this.method = [],
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new kt).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new kt).fromJson(e, t)
    }
--
        return (new kt).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Mt extends C {
    constructor(e) {
        super(),
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Mt).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Mt).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ke.util.equals(Mt, e, t)
--
class Lt extends C {
    constructor(e) {
        super(),
        this.uninterpretedOption = [],
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Lt).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Lt).fromJson(e, t)
    }
--
        return (new Lt).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class It extends C {
    constructor(e) {
        super(),
        this.uninterpretedOption = [],
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new It).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new It).fromJson(e, t)
    }
--
        return (new It).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Nt extends C {
    constructor(e) {
        super(),
        this.targets = [],
        this.editionDefaults = [],
        this.uninterpretedOption = [],
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Nt).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Nt).fromJsonString(e, t)
--
class Ot extends C {
    constructor(e) {
        super(),
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ot).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ot).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ke.util.equals(Ot, e, t)
--
class Rt extends C {
    constructor(e) {
        super(),
        this.uninterpretedOption = [],
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Rt).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Rt).fromJson(e, t)
    }
--
        return (new Rt).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Dt extends C {
    constructor(e) {
        super(),
        this.uninterpretedOption = [],
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Dt).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Dt).fromJson(e, t)
    }
--
        return (new Dt).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Pt extends C {
    constructor(e) {
        super(),
        this.uninterpretedOption = [],
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Pt).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Pt).fromJson(e, t)
    }
--
        return (new Pt).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Bt extends C {
    constructor(e) {
        super(),
        this.uninterpretedOption = [],
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Bt).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Bt).fromJson(e, t)
    }
--
        return (new Bt).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Ft extends C {
    constructor(e) {
        super(),
        this.uninterpretedOption = [],
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ft).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ft).fromJson(e, t)
    }
--
        return (new Ft).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class jt extends C {
    constructor(e) {
        super(),
        this.name = [],
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new jt).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new jt).fromJson(e, t)
    }
--
        return (new jt).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Ut extends C {
    constructor(e) {
        super(),
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ut).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ut).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ke.util.equals(Ut, e, t)
--
class Yt extends C {
    constructor(e) {
        super(),
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Yt).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Yt).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ke.util.equals(Yt, e, t)
--
class Ht extends C {
    constructor(e) {
        super(),
        this.defaults = [],
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ht).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ht).fromJson(e, t)
    }
--
        return (new Ht).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class qt extends C {
    constructor(e) {
        super(),
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new qt).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new qt).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ke.util.equals(qt, e, t)
--
class Gt extends C {
    constructor(e) {
        super(),
        this.location = [],
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Gt).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Gt).fromJson(e, t)
    }
--
        return (new Gt).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Jt extends C {
    constructor(e) {
        super(),
        this.path = [],
        this.span = [],
        this.leadingDetachedComments = [],
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Jt).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Jt).fromJsonString(e, t)
--
class Vt extends C {
    constructor(e) {
        super(),
        this.annotation = [],
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Vt).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Vt).fromJson(e, t)
    }
--
        return (new Vt).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class zt extends C {
    constructor(e) {
        super(),
        this.path = [],
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new zt).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new zt).fromJson(e, t)
    }
--
        return (new zt).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Kt extends C {
    constructor(e) {
        super(),
        this.seconds = F.zero,
        this.nanos = 0,
        Ze.util.initPartial(e, this)
    }
    fromJson(e, t) {
        if ("string" != typeof e)
            throw new Error(`cannot decode google.protobuf.Timestamp from JSON: ${Ze.json.debug(e)}`);
        const n = e.match(/^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(?:Z|\.([0-9]{3,9})Z|([+-][0-9][0-9]:[0-9][0-9]))$/);
        if (!n)
--
        const r = Date.parse(n[1] + "-" + n[2] + "-" + n[3] + "T" + n[4] + ":" + n[5] + ":" + n[6] + (n[8] ? n[8] : "Z"));
        if (Number.isNaN(r))
            throw new Error("cannot decode google.protobuf.Timestamp from JSON: invalid RFC 3339 string");
--
class $t extends C {
    constructor(e) {
        super(),
        this.seconds = F.zero,
        this.nanos = 0,
        Ze.util.initPartial(e, this)
    }
    fromJson(e, t) {
        if ("string" != typeof e)
            throw new Error(`cannot decode google.protobuf.Duration from JSON: ${Ze.json.debug(e)}`);
        const n = e.match(/^(-?[0-9]+)(?:\.([0-9]+))?s/);
        if (null === n)
--
        const r = Number(n[1]);
        if (r > 315576e6 || r < -315576e6)
            throw new Error(`cannot decode google.protobuf.Duration from JSON: ${Ze.json.debug(e)}`);
--
class Xt extends C {
    constructor(e) {
        super(),
        this.typeUrl = "",
        this.value = new Uint8Array(0),
        Ze.util.initPartial(e, this)
    }
    toJson(e) {
        var t;
        if ("" === this.typeUrl)
            return {};
        const n = this.typeUrlToName(this.typeUrl)
--
        if (!r)
            throw new Error(`cannot encode message google.protobuf.Any to JSON: "${this.typeUrl}" is not in the type registry`);
        let a = r.fromBinary(this.value).toJson(e);
--
class Qt extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Qt).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Qt).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Qt, e, t)
--
class en extends C {
    constructor(e) {
        super(),
        this.paths = [],
        Ze.util.initPartial(e, this)
    }
    toJson(e) {
        return this.paths.map((e => {
            if (e.match(/_[0-9]?_/g) || e.match(/[A-Z]/g))
                throw new Error('cannot encode google.protobuf.FieldMask to JSON: lowerCamelCase of path name "' + e + '" is irreversible');
            return function(e) {
                let t = !1;
--
                for (let r = 0; r < e.length; r++) {
                    let a = e.charAt(r);
                    switch (a) {
--
class tn extends C {
    constructor(e) {
        super(),
        this.fields = {},
        Ze.util.initPartial(e, this)
    }
    toJson(e) {
        const t = {};
        for (const [n,r] of Object.entries(this.fields))
            t[n] = r.toJson(e);
        return t
    }
--
        if ("object" != typeof e || null == e || Array.isArray(e))
            throw new Error("cannot decode google.protobuf.Struct from JSON " + Ze.json.debug(e));
        for (const [t,n] of Object.entries(e))
--
class nn extends C {
    constructor(e) {
        super(),
        this.kind = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    toJson(e) {
        switch (this.kind.case) {
        case "nullValue":
            return null;
--
            if (!Number.isFinite(this.kind.value))
                throw new Error("google.protobuf.Value cannot be NaN or Infinity");
            return this.kind.value;
--
class rn extends C {
    constructor(e) {
        super(),
        this.values = [],
        Ze.util.initPartial(e, this)
    }
    toJson(e) {
        return this.values.map((e => e.toJson()))
    }
    fromJson(e, t) {
        if (!Array.isArray(e))
            throw new Error("cannot decode google.protobuf.ListValue from JSON " + Ze.json.debug(e));
--
            this.values.push(nn.fromJson(t));
        return this
    }
--
class an extends C {
    constructor(e) {
        super(),
        this.value = 0,
        Ze.util.initPartial(e, this)
    }
    toJson(e) {
        return Ze.json.writeScalar(j.DOUBLE, this.value, !0)
    }
    fromJson(e, t) {
        try {
            this.value = Ze.json.readScalar(j.DOUBLE, e)
--
            let t = 'cannot decode message google.protobuf.DoubleValue from JSON"';
            throw e instanceof Error && e.message.length > 0 && (t += `: ${e.message}`),
            new Error(t)
--
class on extends C {
    constructor(e) {
        super(),
        this.value = 0,
        Ze.util.initPartial(e, this)
    }
    toJson(e) {
        return Ze.json.writeScalar(j.FLOAT, this.value, !0)
    }
    fromJson(e, t) {
        try {
            this.value = Ze.json.readScalar(j.FLOAT, e)
--
            let t = 'cannot decode message google.protobuf.FloatValue from JSON"';
            throw e instanceof Error && e.message.length > 0 && (t += `: ${e.message}`),
            new Error(t)
--
class sn extends C {
    constructor(e) {
        super(),
        this.value = F.zero,
        Ze.util.initPartial(e, this)
    }
    toJson(e) {
        return Ze.json.writeScalar(j.INT64, this.value, !0)
    }
    fromJson(e, t) {
        try {
            this.value = Ze.json.readScalar(j.INT64, e)
--
            let t = 'cannot decode message google.protobuf.Int64Value from JSON"';
            throw e instanceof Error && e.message.length > 0 && (t += `: ${e.message}`),
            new Error(t)
--
class ln extends C {
    constructor(e) {
        super(),
        this.value = F.zero,
        Ze.util.initPartial(e, this)
    }
    toJson(e) {
        return Ze.json.writeScalar(j.UINT64, this.value, !0)
    }
    fromJson(e, t) {
        try {
            this.value = Ze.json.readScalar(j.UINT64, e)
--
            let t = 'cannot decode message google.protobuf.UInt64Value from JSON"';
            throw e instanceof Error && e.message.length > 0 && (t += `: ${e.message}`),
            new Error(t)
--
class cn extends C {
    constructor(e) {
        super(),
        this.value = 0,
        Ze.util.initPartial(e, this)
    }
    toJson(e) {
        return Ze.json.writeScalar(j.INT32, this.value, !0)
    }
    fromJson(e, t) {
        try {
            this.value = Ze.json.readScalar(j.INT32, e)
--
            let t = 'cannot decode message google.protobuf.Int32Value from JSON"';
            throw e instanceof Error && e.message.length > 0 && (t += `: ${e.message}`),
            new Error(t)
--
class un extends C {
    constructor(e) {
        super(),
        this.value = 0,
        Ze.util.initPartial(e, this)
    }
    toJson(e) {
        return Ze.json.writeScalar(j.UINT32, this.value, !0)
    }
    fromJson(e, t) {
        try {
            this.value = Ze.json.readScalar(j.UINT32, e)
--
            let t = 'cannot decode message google.protobuf.UInt32Value from JSON"';
            throw e instanceof Error && e.message.length > 0 && (t += `: ${e.message}`),
            new Error(t)
--
class dn extends C {
    constructor(e) {
        super(),
        this.value = !1,
        Ze.util.initPartial(e, this)
    }
    toJson(e) {
        return Ze.json.writeScalar(j.BOOL, this.value, !0)
    }
    fromJson(e, t) {
        try {
            this.value = Ze.json.readScalar(j.BOOL, e)
--
            let t = 'cannot decode message google.protobuf.BoolValue from JSON"';
            throw e instanceof Error && e.message.length > 0 && (t += `: ${e.message}`),
            new Error(t)
--
class mn extends C {
    constructor(e) {
        super(),
        this.value = "",
        Ze.util.initPartial(e, this)
    }
    toJson(e) {
        return Ze.json.writeScalar(j.STRING, this.value, !0)
    }
    fromJson(e, t) {
        try {
            this.value = Ze.json.readScalar(j.STRING, e)
--
            let t = 'cannot decode message google.protobuf.StringValue from JSON"';
            throw e instanceof Error && e.message.length > 0 && (t += `: ${e.message}`),
            new Error(t)
--
class pn extends C {
    constructor(e) {
        super(),
        this.value = new Uint8Array(0),
        Ze.util.initPartial(e, this)
    }
    toJson(e) {
        return Ze.json.writeScalar(j.BYTES, this.value, !0)
    }
    fromJson(e, t) {
        try {
            this.value = Ze.json.readScalar(j.BYTES, e)
--
            let t = 'cannot decode message google.protobuf.BytesValue from JSON"';
            throw e instanceof Error && e.message.length > 0 && (t += `: ${e.message}`),
            new Error(t)
--
class fn extends C {
    constructor(e) {
        super(),
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new fn).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new fn).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ke.util.equals(fn, e, t)
--
class hn extends C {
    constructor(e) {
        super(),
        this.fileToGenerate = [],
        this.protoFile = [],
        this.sourceFileDescriptors = [],
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new hn).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new hn).fromJsonString(e, t)
--
class _n extends C {
    constructor(e) {
        super(),
        this.file = [],
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new _n).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new _n).fromJson(e, t)
    }
--
        return (new _n).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class vn extends C {
    constructor(e) {
        super(),
        Ke.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new vn).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new vn).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ke.util.equals(vn, e, t)
--
class wn extends C {
    constructor(e) {
        super(),
        this.fileName = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new wn).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new wn).fromJson(e, t)
    }
--
        return (new wn).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Sn extends C {
    constructor(e) {
        super(),
        this.name = "",
        this.fields = [],
        this.oneofs = [],
        this.options = [],
        this.syntax = yn.PROTO2,
        this.edition = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
    }
    static fromJson(e, t) {
        return (new Sn).fromJson(e, t)
--
class Tn extends C {
    constructor(e) {
        super(),
        this.kind = An.TYPE_UNKNOWN,
        this.cardinality = En.UNKNOWN,
        this.number = 0,
        this.name = "",
        this.typeUrl = "",
        this.oneofIndex = 0,
        this.packed = !1,
        this.options = [],
        this.jsonName = "",
--
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
class xn extends C {
    constructor(e) {
        super(),
        this.name = "",
        this.enumvalue = [],
        this.options = [],
        this.syntax = yn.PROTO2,
        this.edition = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new xn).fromBinary(e, t)
--
    static fromJson(e, t) {
        return (new xn).fromJson(e, t)
    }
--
class Cn extends C {
    constructor(e) {
        super(),
        this.name = "",
        this.number = 0,
        this.options = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Cn).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Cn).fromJsonString(e, t)
--
class kn extends C {
    constructor(e) {
        super(),
        this.name = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new kn).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new kn).fromJson(e, t)
    }
--
        return (new kn).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Mn extends C {
    constructor(e) {
        super(),
        this.name = "",
        this.methods = [],
        this.options = [],
        this.version = "",
        this.mixins = [],
        this.syntax = yn.PROTO2,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
    }
    static fromJson(e, t) {
        return (new Mn).fromJson(e, t)
--
class Ln extends C {
    constructor(e) {
        super(),
        this.name = "",
        this.requestTypeUrl = "",
        this.requestStreaming = !1,
        this.responseTypeUrl = "",
        this.responseStreaming = !1,
        this.options = [],
        this.syntax = yn.PROTO2,
        Ze.util.initPartial(e, this)
    }
--
        return (new Ln).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
class In extends C {
    constructor(e) {
        super(),
        this.name = "",
        this.root = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new In).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new In).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new In).fromJsonString(e, t)
    }
--
class Rn extends Error {
    constructor(e, t=bn.Unknown, n, r, a) {
        super(function(e, t) {
            return e.length ? `[${Nn(t)}] ${e}` : `[${Nn(t)}]`
        }(e, t)),
        this.name = "ConnectError",
        Object.setPrototypeOf(this, new.target.prototype),
        this.rawMessage = e,
        this.code = t,
        this.metadata = new Headers(null != n ? n : {}),
        this.details = null != r ? r : [],
        this.cause = a
--
    static from(e, t=bn.Unknown) {
        return e instanceof Rn ? e : e instanceof Error ? "AbortError" == e.name ? new Rn(e.message,bn.Canceled) : new Rn(e.message,t,void 0,void 0,e) : new Rn(String(e),t,void 0,void 0,e)
    }
--
class zn extends C {
    constructor(e) {
        super(),
        this.code = 0,
        this.message = "",
        this.details = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new zn).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new zn).fromJsonString(e, t)
--
class Ua extends C {
    constructor(e) {
        super(),
        this.prompt = "",
        this.contextPrompt = "",
        this.uid = "",
        this.promptElementRanges = [],
        this.promptElementKindInfos = [],
        this.promptLatencyMs = F.zero,
        this.promptStageLatencies = [],
        this.numTokenizedBytes = F.zero,
        this.editorLanguage = "",
--
        this.absolutePathUriForTelemetry = "",
        this.relativePathForTelemetry = "",
        this.workspaceUriForTelemetry = "",
--
class Ya extends C {
    constructor(e) {
        super(),
        this.numCompletions = F.zero,
        this.maxTokens = F.zero,
        this.maxNewlines = F.zero,
        this.minLogProbability = 0,
        this.temperature = 0,
        this.firstTemperature = 0,
        this.topK = F.zero,
        this.topP = 0,
        this.stopPatterns = [],
--
        this.fimEotProbThreshold = 0,
        this.useFimEotThreshold = !1,
        this.doNotScoreStopTokens = !1,
--
class Ha extends C {
    constructor(e) {
        super(),
        this.kind = Cr.UNSPECIFIED,
        this.byteOffsetStart = F.zero,
        this.byteOffsetEnd = F.zero,
        this.tokenOffsetStart = F.zero,
        this.tokenOffsetEnd = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ha).fromBinary(e, t)
--
    static fromJson(e, t) {
        return (new Ha).fromJson(e, t)
    }
--
class qa extends C {
    constructor(e) {
        super(),
        this.cortexPlanId = "",
        this.codePlanId = "",
        this.actionIndex = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new qa).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new qa).fromJsonString(e, t)
--
class Ga extends C {
    constructor(e) {
        super(),
        this.kind = kr.UNSPECIFIED,
        this.byteOffsetStart = F.zero,
        this.byteOffsetEnd = F.zero,
        this.suffix = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ga).fromBinary(e, t)
    }
--
        return (new Ga).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class Ja extends C {
    constructor(e) {
        super(),
        this.key = Mr.UNSPECIFIED,
        this.keyString = "",
        this.disabled = !1,
        this.payload = {
            case: void 0
        },
        this.source = Lr.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
--
        return (new Ja).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
class Va extends C {
    constructor(e) {
        super(),
        this.experiments = [],
        this.forceEnableExperiments = [],
        this.forceDisableExperiments = [],
        this.forceEnableExperimentsWithVariants = [],
        this.forceEnableExperimentStrings = [],
        this.forceDisableExperimentStrings = [],
        this.devMode = !1,
        Ze.util.initPartial(e, this)
    }
--
        return (new Va).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
class za extends C {
    constructor(e) {
        super(),
        this.sha = "",
        this.crc32cLinuxX64 = "",
        this.crc32cLinuxArm = "",
        this.crc32cMacosX64 = "",
        this.crc32cMacosArm = "",
        this.crc32cWindowsX64 = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
    }
    static fromJson(e, t) {
        return (new za).fromJson(e, t)
--
class Wa extends C {
    constructor(e) {
        super(),
        this.modelName = "",
        this.contextCheckModelName = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Wa).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Wa).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Wa).fromJsonString(e, t)
    }
--
class Za extends C {
    constructor(e) {
        super(),
        this.modeToken = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Za).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Za).fromJson(e, t)
    }
--
        return (new Za).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Ka extends C {
    constructor(e) {
        super(),
        this.threshold = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ka).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ka).fromJson(e, t)
    }
--
        return (new Ka).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class $a extends C {
    constructor(e) {
        super(),
        this.sampleRate = 0,
        this.procedureToSampleRate = {},
        this.errorMatchToSampleRate = {},
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new $a).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new $a).fromJsonString(e, t)
--
class Xa extends C {
    constructor(e) {
        super(),
        this.teamId = "",
        this.cascadeModelLabels = [],
        this.commandModelLabels = [],
        this.extensionModelLabels = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Xa).fromBinary(e, t)
    }
--
        return (new Xa).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class Qa extends C {
    constructor(e) {
        super(),
        this.memoryUsageToSampleRate = {},
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Qa).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Qa).fromJson(e, t)
    }
--
        return (new Qa).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class eo extends C {
    constructor(e) {
        super(),
        this.choice = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new eo).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new eo).fromJsonString(e, t)
--
class to extends C {
    constructor(e) {
        super(),
        this.kind = Cr.UNSPECIFIED,
        this.experimentKey = Mr.UNSPECIFIED,
        this.enabled = !1,
        this.numConsidered = F.zero,
        this.numIncluded = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new to).fromBinary(e, t)
--
    static fromJson(e, t) {
        return (new to).fromJson(e, t)
    }
--
class no extends C {
    constructor(e) {
        super(),
        this.included = !1,
        this.exclusionReason = Or.EXCLUSION_UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new no).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new no).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new no).fromJsonString(e, t)
    }
--
class ro extends C {
    constructor(e) {
        super(),
        this.name = "",
        this.latencyMs = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ro).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ro).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new ro).fromJsonString(e, t)
    }
--
class ao extends C {
    constructor(e) {
        super(),
        this.completions = [],
        this.maxTokens = F.zero,
        this.temperature = 0,
        this.topK = F.zero,
        this.topP = 0,
        this.stopPatterns = [],
        this.promptLength = F.zero,
        this.promptId = "",
        this.modelTag = "",
--
    }
    static fromBinary(e, t) {
        return (new ao).fromBinary(e, t)
--
class oo extends C {
    constructor(e) {
        super(),
        this.completionId = "",
        this.text = "",
        this.stop = "",
        this.score = 0,
        this.tokens = [],
        this.decodedTokens = [],
        this.probabilities = [],
        this.adjustedProbabilities = [],
        this.generatedLength = F.zero,
--
        this.filterReasons = [],
        this.originalText = "",
        this.toolCalls = [],
--
class io extends C {
    constructor(e) {
        super(),
        this.completionIds = [],
        this.maxTokens = F.zero,
        this.temperature = 0,
        this.topK = F.zero,
        this.topP = 0,
        this.stopPatterns = [],
        this.promptLength = F.zero,
        this.promptId = "",
        this.modelTag = "",
--
    }
    static fromBinary(e, t) {
        return (new io).fromBinary(e, t)
--
class so extends C {
    constructor(e) {
        super(),
        this.totalPrefillPassTime = 0,
        this.avgPrefillPassTime = 0,
        this.numPrefillPasses = F.zero,
        this.totalSpecCopyPassTime = 0,
        this.avgSpecCopyPassTime = 0,
        this.numSpecCopyPasses = F.zero,
        this.totalGenerationPassTime = 0,
        this.avgGenerationPassTime = 0,
        this.numGenerationPasses = F.zero,
--
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
class lo extends C {
    constructor(e) {
        super(),
        this.timeToFirstPrefillPass = 0,
        this.timeToFirstToken = 0,
        this.totalCompletionTime = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new lo).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new lo).fromJsonString(e, t)
--
class co extends C {
    constructor(e) {
        super(),
        this.decodedToken = new Uint8Array(0),
        this.token = F.zero,
        this.probability = 0,
        this.adjustedProbability = 0,
        this.completionFinished = !1,
        this.stop = "",
        this.stopReason = Rr.UNSPECIFIED,
        this.attributionStatuses = {},
        Ze.util.initPartial(e, this)
--
    static fromBinary(e, t) {
        return (new co).fromBinary(e, t)
    }
--
class uo extends C {
    constructor(e) {
        super(),
        this.completions = {},
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new uo).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new uo).fromJson(e, t)
    }
--
        return (new uo).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class mo extends C {
    constructor(e) {
        super(),
        this.completionMaps = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new mo).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new mo).fromJson(e, t)
    }
--
        return (new mo).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class po extends C {
    constructor(e) {
        super(),
        this.perTokenLogLikelihoods = [],
        this.isGreedy = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new po).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new po).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new po).fromJsonString(e, t)
    }
--
class fo extends C {
    constructor(e) {
        super(),
        this.payload = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new fo).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new fo).fromJsonString(e, t)
--
class ho extends C {
    constructor(e) {
        super(),
        this.apiServerLatencyMs = F.zero,
        this.languageServerLatencyMs = F.zero,
        this.networkLatencyMs = F.zero,
        this.apiServerFirstByteLatencyMs = F.zero,
        this.languageServerFirstByteLatencyMs = F.zero,
        this.networkFirstByteLatencyMs = F.zero,
        this.apiServerFirstLineLatencyMs = F.zero,
        this.languageServerFirstLineLatencyMs = F.zero,
        this.networkFirstLineLatencyMs = F.zero,
--
    }
    static fromBinary(e, t) {
        return (new ho).fromBinary(e, t)
--
class _o extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new _o).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new _o).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(_o, e, t)
--
class go extends C {
    constructor(e) {
        super(),
        this.prompts = [],
        this.priority = Br.UNSPECIFIED,
        this.prefix = Fr.UNSPECIFIED,
        this.model = Nr.MODEL_UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new go).fromBinary(e, t)
    }
--
        return (new go).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class yo extends C {
    constructor(e) {
        super(),
        this.values = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new yo).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new yo).fromJson(e, t)
    }
--
        return (new yo).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Ao extends C {
    constructor(e) {
        super(),
        this.embeddings = [],
        this.promptsExceededContextLength = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ao).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ao).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Ao).fromJsonString(e, t)
    }
--
class Eo extends C {
    constructor(e) {
        super(),
        this.prefix = "",
        this.items = [],
        this.hasInstructTokens = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Eo).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Eo).fromJsonString(e, t)
--
class bo extends C {
    constructor(e) {
        super(),
        this.values = [],
        this.promptsExceededContextLength = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new bo).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new bo).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new bo).fromJsonString(e, t)
    }
--
class vo extends C {
    constructor(e) {
        super(),
        this.ideName = "",
        this.ideVersion = "",
        this.extensionName = "",
        this.extensionVersion = "",
        this.apiKey = "",
        this.locale = "",
        this.os = "",
        this.hardware = "",
        this.disableTelemetry = !1,
--
        this.requestId = F.zero,
        this.sourceAddress = "",
        this.userAgent = "",
--
class wo extends C {
    constructor(e) {
        super(),
        this.tabSize = F.zero,
        this.insertSpaces = !1,
        this.disableAutocompleteInComments = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new wo).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new wo).fromJsonString(e, t)
--
class So extends C {
    constructor(e) {
        super(),
        this.errorId = "",
        this.timestampUnixMs = F.zero,
        this.stacktrace = "",
        this.recovered = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new So).fromBinary(e, t)
    }
--
        return (new So).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class To extends C {
    constructor(e) {
        super(),
        this.eventType = Yr.UNSPECIFIED,
        this.eventJson = "",
        this.timestampUnixMs = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new To).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new To).fromJsonString(e, t)
--
class xo extends C {
    constructor(e) {
        super(),
        this.searchId = "",
        this.resultId = "",
        this.absolutePath = "",
        this.workspacePaths = [],
        this.text = "",
        this.similarityScore = 0,
        this.numResultsInCluster = F.zero,
        this.representativePath = "",
        this.meanSimilarityScore = 0,
--
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
class Co extends C {
    constructor(e) {
        super(),
        this.workspaceMigrateMeToUri = "",
        this.workspaceUri = "",
        this.relativePath = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Co).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Co).fromJsonString(e, t)
--
class ko extends C {
    constructor(e) {
        super(),
        this.nodeName = "",
        this.startLine = 0,
        this.endLine = 0,
        this.embedType = qr.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ko).fromBinary(e, t)
    }
--
        return (new ko).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class Mo extends C {
    constructor(e) {
        super(),
        this.completions = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Mo).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Mo).fromJson(e, t)
    }
--
        return (new Mo).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Lo extends C {
    constructor(e) {
        super(),
        this.workspaceUriForTelemetry = "",
        this.numFilesTotal = F.zero,
        this.numFilesToEmbed = F.zero,
        this.numNodesTotal = F.zero,
        this.numNodesToEmbed = F.zero,
        this.numTokens = F.zero,
        this.numHighPriorityNodesToEmbed = F.zero,
        this.error = "",
        Ze.util.initPartial(e, this)
--
    static fromBinary(e, t) {
        return (new Lo).fromBinary(e, t)
    }
--
class Io extends C {
    constructor(e) {
        super(),
        this.workspace = "",
        this.numFiles = {},
        this.numBytes = {},
        this.initialScanCompleted = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Io).fromBinary(e, t)
    }
--
        return (new Io).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class No extends C {
    constructor(e) {
        super(),
        this.numTotalFiles = 0,
        this.numIndexedFiles = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new No).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new No).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new No).fromJsonString(e, t)
    }
--
class Oo extends C {
    constructor(e) {
        super(),
        this.rawSource = "",
        this.cleanFunction = "",
        this.docstring = "",
        this.nodeName = "",
        this.params = "",
        this.definitionLine = 0,
        this.startLine = 0,
        this.endLine = 0,
        this.startCol = 0,
--
        this.leadingWhitespace = "",
        this.language = Vr.UNSPECIFIED,
        this.bodyStartLine = 0,
--
class Ro extends C {
    constructor(e) {
        super(),
        this.rawSource = "",
        this.startLine = 0,
        this.endLine = 0,
        this.startCol = 0,
        this.endCol = 0,
        this.leadingWhitespace = "",
        this.fieldsAndConstructors = [],
        this.docstring = "",
        this.nodeName = "",
--
        this.nodeLineage = [],
        this.isExported = !1,
        this.language = Vr.UNSPECIFIED,
--
class Do extends C {
    constructor(e) {
        super(),
        this.label = "",
        this.creditMultiplier = 0,
        this.disabled = !1,
        this.supportsImages = !1,
        this.supportsLegacy = !1,
        this.isPremium = !1,
        this.betaWarningMessage = "",
        this.isBeta = !1,
        Ze.util.initPartial(e, this)
--
    static fromBinary(e, t) {
        return (new Do).fromBinary(e, t)
    }
--
class Po extends C {
    constructor(e) {
        super(),
        this.creditMultiplier = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Po).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Po).fromJson(e, t)
    }
--
        return (new Po).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Bo extends C {
    constructor(e) {
        super(),
        this.teamsTier = Xr.UNSPECIFIED,
        this.planName = "",
        this.hasAutocompleteFastMode = !1,
        this.allowStickyPremiumModels = !1,
        this.hasForgeAccess = !1,
        this.disableCodeSnippetTelemetry = !1,
        this.allowPremiumCommandModels = !1,
        this.hasTabToJump = !1,
        this.maxNumPremiumChatMessages = F.zero,
--
        this.maxCustomChatInstructionCharacters = F.zero,
        this.maxNumPinnedContextItems = F.zero,
        this.maxLocalIndexSize = F.zero,
--
class Fo extends C {
    constructor(e) {
        super(),
        this.topUpTransactionStatus = Qr.UNSPECIFIED,
        this.topUpEnabled = !1,
        this.monthlyTopUpAmount = 0,
        this.topUpSpent = 0,
        this.topUpIncrement = 0,
        this.topUpCriteriaMet = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
    }
    static fromJson(e, t) {
        return (new Fo).fromJson(e, t)
--
class jo extends C {
    constructor(e) {
        super(),
        this.availablePromptCredits = 0,
        this.availableFlowCredits = 0,
        this.availableFlexCredits = 0,
        this.usedFlexCredits = 0,
        this.usedFlowCredits = 0,
        this.usedPromptCredits = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
    }
    static fromJson(e, t) {
        return (new jo).fromJson(e, t)
--
class Uo extends C {
    constructor(e) {
        super(),
        this.pro = !1,
        this.disableTelemetry = !1,
        this.name = "",
        this.ignoreChatTelemetrySetting = !1,
        this.teamId = "",
        this.teamStatus = Wr.UNSPECIFIED,
        this.email = "",
        this.userFeatures = [],
        this.teamsFeatures = [],
--
        this.hasUsedWindsurf = !1,
        this.userUsedPromptCredits = F.zero,
        this.userUsedFlowCredits = F.zero,
--
class Yo extends C {
    constructor(e) {
        super(),
        this.info = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Yo).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Yo).fromJsonString(e, t)
--
class Ho extends C {
    constructor(e) {
        super(),
        this.depotName = "",
        this.versionAlias = "",
        this.baseP4dUrl = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ho).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Ho).fromJsonString(e, t)
--
class qo extends C {
    constructor(e) {
        super(),
        this.name = "",
        this.owner = "",
        this.repoName = "",
        this.commit = "",
        this.versionAlias = "",
        this.scmProvider = ea.UNSPECIFIED,
        this.baseGitUrl = "",
        Ze.util.initPartial(e, this)
    }
--
        return (new qo).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
class Go extends C {
    constructor(e) {
        super(),
        this.absolutePathMigrateMeToUri = "",
        this.absoluteUri = "",
        this.workspacePaths = [],
        this.nodeName = "",
        this.nodeLineage = [],
        this.startLine = 0,
        this.startCol = 0,
        this.endLine = 0,
        this.endCol = 0,
--
        this.language = Vr.UNSPECIFIED,
        this.snippetByType = {},
        this.fileContentHash = new Uint8Array(0),
--
class Jo extends C {
    constructor(e) {
        super(),
        this.snippet = "",
        this.wordCountBySplitter = {},
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Jo).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Jo).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Jo).fromJsonString(e, t)
    }
--
class Vo extends C {
    constructor(e) {
        super(),
        this.wordCountMap = {},
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Vo).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Vo).fromJson(e, t)
    }
--
        return (new Vo).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class zo extends C {
    constructor(e) {
        super(),
        this.computedName = "",
        this.gitOriginUrl = "",
        this.gitUpstreamUrl = "",
        this.reportedName = "",
        this.modelName = "",
        this.submoduleUrl = "",
        this.submodulePath = "",
        Ze.util.initPartial(e, this)
    }
--
        return (new zo).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
class Wo extends C {
    constructor(e) {
        super(),
        this.promptId = "",
        this.filePath = "",
        this.originalFileContent = "",
        this.completionText = "",
        this.startOffset = F.zero,
        this.endOffset = F.zero,
        this.cursorLine = F.zero,
        this.cursorColumn = F.zero,
        Ze.util.initPartial(e, this)
--
    static fromBinary(e, t) {
        return (new Wo).fromBinary(e, t)
    }
--
class Zo extends C {
    constructor(e) {
        super(),
        this.numAcceptances = 0,
        this.numRejections = 0,
        this.numLinesAccepted = 0,
        this.numBytesAccepted = 0,
        this.numUsers = 0,
        this.activeDeveloperDays = 0,
        this.activeDeveloperHours = 0,
        Ze.util.initPartial(e, this)
    }
--
        return (new Zo).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
class Ko extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ko).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ko).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Ko, e, t)
--
class $o extends C {
    constructor(e) {
        super(),
        this.language = Vr.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new $o).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new $o).fromJson(e, t)
    }
--
        return (new $o).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Xo extends C {
    constructor(e) {
        super(),
        this.chatsSent = F.zero,
        this.chatsReceived = F.zero,
        this.chatsAccepted = F.zero,
        this.chatsInsertedAtCursor = F.zero,
        this.chatsApplied = F.zero,
        this.chatLocUsed = F.zero,
        this.chatCodeBlocksUsed = F.zero,
        this.functionExplainCount = F.zero,
        this.functionDocstringCount = F.zero,
--
        this.codeBlockExplainCount = F.zero,
        this.codeBlockRefactorCount = F.zero,
        this.problemExplainCount = F.zero,
--
class Qo extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Qo).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Qo).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Qo, e, t)
--
class ei extends C {
    constructor(e) {
        super(),
        this.modelId = Nr.MODEL_UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ei).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ei).fromJson(e, t)
    }
--
        return (new ei).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class ti extends C {
    constructor(e) {
        super(),
        this.numCommands = F.zero,
        this.numCommandsAccepted = F.zero,
        this.numCommandsRejected = F.zero,
        this.numEdits = F.zero,
        this.numGenerations = F.zero,
        this.locAdded = F.zero,
        this.locRemoved = F.zero,
        this.bytesAdded = F.zero,
        this.bytesRemoved = F.zero,
--
        this.bytesSelected = F.zero,
        this.numCommandsBySource = {},
        Ze.util.initPartial(e, this)
--
class ni extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ni).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ni).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(ni, e, t)
--
class ri extends C {
    constructor(e) {
        super(),
        this.name = "",
        this.email = "",
        this.apiKey = "",
        this.disableCodeium = !1,
        this.activeDays = 0,
        this.role = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
    }
    static fromJson(e, t) {
        return (new ri).fromJson(e, t)
--
class ai extends C {
    constructor(e) {
        super(),
        this.event = fa.CASCADE_NUX_EVENT_UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ai).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ai).fromJson(e, t)
    }
--
        return (new ai).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class oi extends C {
    constructor(e) {
        super(),
        this.event = ha.USER_NUX_EVENT_UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new oi).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new oi).fromJson(e, t)
    }
--
        return (new oi).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class ii extends C {
    constructor(e) {
        super(),
        this.openMostRecentChatConversation = !1,
        this.lastSelectedModel = Nr.MODEL_UNSPECIFIED,
        this.themePreference = la.UNSPECIFIED,
        this.extensionPanelTab = ma.UNSPECIFIED,
        this.fontSize = ca.UNSPECIFIED,
        this.rememberLastModelSelection = pa.UNSPECIFIED,
        this.autocompleteSpeed = ua.UNSPECIFIED,
        this.lastSelectedModelName = "",
        this.cascadeNuxStates = [],
--
        this.cascadeDeniedCommands = [],
        this.userNuxStates = [],
        this.cascadeWebSearchDisabled = !1,
--
class si extends C {
    constructor(e) {
        super(),
        this.supportsContextTokens = !1,
        this.requiresInstructTags = !1,
        this.requiresFimContext = !1,
        this.requiresContextSnippetPrefix = !1,
        this.requiresContextRelevanceTags = !1,
        this.requiresLlama3Tokens = !1,
        this.zeroShotCapable = !1,
        this.requiresAutocompleteAsCommand = !1,
        this.supportsCursorAwareSupercomplete = !1,
--
        this.supportsToolCalls = !1,
        this.supportsCumulativeContext = !1,
        this.tabJumpPrintLineRange = !1,
--
class li extends C {
    constructor(e) {
        super(),
        this.isInternal = !1,
        this.modelId = Nr.MODEL_UNSPECIFIED,
        this.modelName = "",
        this.baseUrl = "",
        this.apiKey = "",
        this.accessKey = "",
        this.secretAccessKey = "",
        this.region = "",
        this.projectId = "",
--
        this.maxCompletionTokens = 0,
        this.maxInputTokens = 0,
        Ze.util.initPartial(e, this)
--
class ci extends C {
    constructor(e) {
        super(),
        this.modelId = Nr.MODEL_UNSPECIFIED,
        this.isInternal = !1,
        this.modelType = Aa.UNSPECIFIED,
        this.maxTokens = 0,
        this.tokenizerType = "",
        this.apiProvider = Ea.API_PROVIDER_UNSPECIFIED,
        this.modelName = "",
        this.supportsContext = !1,
        this.embedDim = 0,
--
        this.chatModelName = "",
        this.maxOutputTokens = 0,
        this.promptTemplaterType = Fa.UNSPECIFIED,
--
class ui extends C {
    constructor(e) {
        super(),
        this.modelMap = {},
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ui).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ui).fromJson(e, t)
    }
--
        return (new ui).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class di extends C {
    constructor(e) {
        super(),
        this.providerMap = {},
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new di).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new di).fromJson(e, t)
    }
--
        return (new di).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class mi extends C {
    constructor(e) {
        super(),
        this.weight = 0,
        this.cacheTtlMinutes = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new mi).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new mi).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new mi).fromJsonString(e, t)
    }
--
class pi extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new pi).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new pi).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(pi, e, t)
--
class fi extends C {
    constructor(e) {
        super(),
        this.uid = "",
        this.completionId = "",
        this.filePath = "",
        this.shortPrefix = "",
        this.completionText = "",
        this.shortSuffix = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
    }
    static fromJson(e, t) {
        return (new fi).fromJson(e, t)
--
class hi extends C {
    constructor(e) {
        super(),
        this.name = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new hi).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new hi).fromJson(e, t)
    }
--
        return (new hi).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class _i extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new _i).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new _i).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(_i, e, t)
--
class gi extends C {
    constructor(e) {
        super(),
        this.snippetType = aa.UNSPECIFIED,
        this.startOffset = F.zero,
        this.endOffset = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new gi).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new gi).fromJsonString(e, t)
--
class yi extends C {
    constructor(e) {
        super(),
        this.absolutePathMigrateMeToUri = "",
        this.absoluteUri = "",
        this.workspaceRelativePathsMigrateMeToWorkspaceUris = {},
        this.workspaceUrisToRelativePaths = {},
        this.numFiles = 0,
        this.numBytes = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
    }
    static fromJson(e, t) {
        return (new yi).fromJson(e, t)
--
class Ai extends C {
    constructor(e) {
        super(),
        this.absoluteUri = "",
        this.startLine = 0,
        this.endLine = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ai).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Ai).fromJsonString(e, t)
--
class Ei extends C {
    constructor(e) {
        super(),
        this.content = "",
        this.identifier = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ei).fromBinary(e, t)
    }
--
        return (new Ei).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class bi extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new bi).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new bi).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(bi, e, t)
--
class vi extends C {
    constructor(e) {
        super(),
        this.relativePath = "",
        this.isDir = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new vi).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new vi).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new vi).fromJsonString(e, t)
    }
--
class wi extends C {
    constructor(e) {
        super(),
        this.documentId = "",
        this.index = Ia.UNSPECIFIED,
        this.documentType = va.UNSPECIFIED,
        this.displayName = "",
        this.description = "",
        this.displaySource = "",
        this.url = "",
        Ze.util.initPartial(e, this)
    }
--
        return (new wi).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
class Si extends C {
    constructor(e) {
        super(),
        this.timestampStr = "",
        this.type = "",
        this.output = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Si).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Si).fromJsonString(e, t)
--
class Ti extends C {
    constructor(e) {
        super(),
        this.lines = [],
        this.serverAddress = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ti).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ti).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Ti).fromJsonString(e, t)
    }
--
class xi extends C {
    constructor(e) {
        super(),
        this.tagName = "",
        this.outerHtml = "",
        this.id = "",
        this.reactComponentName = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new xi).fromBinary(e, t)
    }
--
        return (new xi).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class Ci extends C {
    constructor(e) {
        super(),
        this.recipeId = "",
        this.title = "",
        this.description = "",
        this.systemPrompt = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ci).fromBinary(e, t)
    }
--
        return (new Ci).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class ki extends C {
    constructor(e) {
        super(),
        this.scopeItem = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ki).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new ki).fromJsonString(e, t)
--
class Mi extends C {
    constructor(e) {
        super(),
        this.items = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Mi).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Mi).fromJson(e, t)
    }
--
        return (new Mi).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Li extends C {
    constructor(e) {
        super(),
        this.nodeName = "",
        this.graphStateJson = new Uint8Array(0),
        this.graphStateJsonNumBytes = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Li).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Li).fromJsonString(e, t)
--
class Ii extends C {
    constructor(e) {
        super(),
        this.history = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ii).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ii).fromJson(e, t)
    }
--
        return (new Ii).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Ni extends C {
    constructor(e) {
        super(),
        this.items = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ni).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ni).fromJson(e, t)
    }
--
        return (new Ni).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Oi extends C {
    constructor(e) {
        super(),
        this.guideline = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Oi).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Oi).fromJson(e, t)
    }
--
        return (new Oi).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Ri extends C {
    constructor(e) {
        super(),
        this.model = Nr.MODEL_UNSPECIFIED,
        this.maxInputTokens = 0,
        this.temperature = 0,
        this.maxOutputTokens = 0,
        this.orderSnippetsByFile = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ri).fromBinary(e, t)
--
    static fromJson(e, t) {
        return (new Ri).fromJson(e, t)
    }
--
class Di extends C {
    constructor(e) {
        super(),
        this.shouldBatchCcis = !1,
        this.maxTokensPerSubrange = F.zero,
        this.numParserWorkers = F.zero,
        this.numWorkersPerDistributedScorer = F.zero,
        this.verbose = !1,
        this.ignoreExtensions = [],
        this.ignoreDirectoryStubs = [],
        this.minTokenSpaceForContext = 0,
        this.maxTargetFiles = 0,
--
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
class Pi extends C {
    constructor(e) {
        super(),
        this.deltaText = "",
        this.deltaTokens = 0,
        this.stopReason = Rr.UNSPECIFIED,
        this.deltaToolCalls = [],
        this.deltaThinking = "",
        this.deltaSignature = "",
        this.thinkingRedacted = !1,
        Ze.util.initPartial(e, this)
    }
--
        return (new Pi).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
class Bi extends C {
    constructor(e) {
        super(),
        this.deltas = {},
        this.prompt = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Bi).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Bi).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Bi).fromJsonString(e, t)
    }
--
class Fi extends C {
    constructor(e) {
        super(),
        this.prompt = "",
        this.inferenceAddress = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Fi).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Fi).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Fi).fromJsonString(e, t)
    }
--
class ji extends C {
    constructor(e) {
        super(),
        this.id = "",
        this.name = "",
        this.argumentsJson = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ji).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new ji).fromJsonString(e, t)
--
class Ui extends C {
    constructor(e) {
        super(),
        this.level = Ta.UNSPECIFIED,
        this.message = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ui).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ui).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Ui).fromJsonString(e, t)
    }
--
class Yi extends C {
    constructor(e) {
        super(),
        this.row = F.zero,
        this.col = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Yi).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Yi).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Yi).fromJsonString(e, t)
    }
--
class Hi extends C {
    constructor(e) {
        super(),
        this.startOffset = F.zero,
        this.endOffset = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Hi).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Hi).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Hi).fromJsonString(e, t)
    }
--
class qi extends C {
    constructor(e) {
        super(),
        this.absolutePathMigrateMeToUri = "",
        this.absoluteUri = "",
        this.relativePathMigrateMeToWorkspaceUri = "",
        this.workspaceUri = "",
        this.text = "",
        this.editorLanguage = "",
        this.language = Vr.UNSPECIFIED,
        this.cursorOffset = F.zero,
        this.lineEnding = "",
--
        this.isCutoffEnd = !1,
        this.linesCutoffStart = 0,
        this.linesCutoffEnd = 0,
--
class Gi extends C {
    constructor(e) {
        super(),
        this.otherDocuments = [],
        this.codeContextItems = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Gi).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Gi).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Gi).fromJsonString(e, t)
    }
--
class Ji extends C {
    constructor(e) {
        super(),
        this.chunk = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ji).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Ji).fromJsonString(e, t)
--
class Vi extends C {
    constructor(e) {
        super(),
        this.matchRepoName = "",
        this.matchPath = "",
        this.pinnedContexts = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Vi).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Vi).fromJsonString(e, t)
--
class zi extends C {
    constructor(e) {
        super(),
        this.contextItem = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new zi).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new zi).fromJsonString(e, t)
--
class Wi extends C {
    constructor(e) {
        super(),
        this.remoteRepoName = "",
        this.version = "",
        this.relativePath = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Wi).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Wi).fromJsonString(e, t)
--
class Zi extends C {
    constructor(e) {
        super(),
        this.pinnedContextConfigs = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Zi).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Zi).fromJson(e, t)
    }
--
        return (new Zi).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Ki extends C {
    constructor(e) {
        super(),
        this.id = "",
        this.prompt = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ki).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ki).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Ki).fromJsonString(e, t)
    }
--
class $i extends C {
    constructor(e) {
        super(),
        this.id = "",
        this.startLine = 0,
        this.endLine = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new $i).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new $i).fromJsonString(e, t)
--
class Xi extends C {
    constructor(e) {
        super(),
        this.logs = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Xi).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Xi).fromJson(e, t)
    }
--
        return (new Xi).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Qi extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Qi).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Qi).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Qi, e, t)
--
class es extends C {
    constructor(e) {
        super(),
        this.backend = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new es).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new es).fromJsonString(e, t)
--
class ts extends C {
    constructor(e) {
        super(),
        this.faissStateStats = [],
        this.totalItemCount = F.zero,
        this.quantized = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ts).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new ts).fromJsonString(e, t)
--
class ns extends C {
    constructor(e) {
        super(),
        this.embeddingSource = jr.UNSPECIFIED,
        this.workspace = "",
        this.itemCount = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ns).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new ns).fromJsonString(e, t)
--
class rs extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new rs).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new rs).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(rs, e, t)
--
class as extends C {
    constructor(e) {
        super(),
        this.type = Ca.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new as).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new as).fromJson(e, t)
    }
--
        return (new as).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class os extends C {
    constructor(e) {
        super(),
        this.model = Nr.MODEL_UNSPECIFIED,
        this.inputTokens = F.zero,
        this.outputTokens = F.zero,
        this.cacheWriteTokens = F.zero,
        this.cacheReadTokens = F.zero,
        this.apiProvider = Ea.API_PROVIDER_UNSPECIFIED,
        this.messageId = "",
        this.responseHeader = {},
        Ze.util.initPartial(e, this)
--
    static fromBinary(e, t) {
        return (new os).fromBinary(e, t)
    }
--
class is extends C {
    constructor(e) {
        super(),
        this.reason = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new is).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new is).fromJson(e, t)
    }
--
        return (new is).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class ss extends C {
    constructor(e) {
        super(),
        this.message = "",
        this.severity = "",
        this.source = "",
        this.uri = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ss).fromBinary(e, t)
    }
--
        return (new ss).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class ls extends C {
    constructor(e) {
        super(),
        this.text = "",
        this.label = "",
        this.labelDetail = "",
        this.description = "",
        this.detail = "",
        this.documentation = "",
        this.kind = "",
        this.selected = !1,
        Ze.util.initPartial(e, this)
--
    static fromBinary(e, t) {
        return (new ls).fromBinary(e, t)
    }
--
class cs extends C {
    constructor(e) {
        super(),
        this.overlappedCodeContextItems = [],
        this.firstElementSuffixOverlap = 0,
        this.lastElementPrefixOverlap = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new cs).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new cs).fromJsonString(e, t)
--
class us extends C {
    constructor(e) {
        super(),
        this.text = "",
        this.cursorOffset = 0,
        this.startLine = 0,
        this.endLine = 0,
        this.useCharacterPosition = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new us).fromBinary(e, t)
--
    static fromJson(e, t) {
        return (new us).fromJson(e, t)
    }
--
class ds extends C {
    constructor(e) {
        super(),
        this.element = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ds).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new ds).fromJsonString(e, t)
--
class ms extends C {
    constructor(e) {
        super(),
        this.elements = [],
        this.startIndex = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ms).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ms).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new ms).fromJsonString(e, t)
    }
--
class ps extends C {
    constructor(e) {
        super(),
        this.eventName = "",
        this.apiKey = "",
        this.installationId = "",
        this.ideName = "",
        this.os = "",
        this.codeiumVersion = "",
        this.ideVersion = "",
        this.durationMs = F.zero,
        this.extra = {},
--
    }
    static fromBinary(e, t) {
        return (new ps).fromBinary(e, t)
--
class fs extends C {
    constructor(e) {
        super(),
        this.id = "",
        this.name = "",
        this.description = "",
        this.codebaseRootUri = "",
        this.fileNames = [],
        this.commitMessages = [],
        this.commitSha = [],
        this.commitDescriptions = [],
        this.fileDescriptions = [],
--
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
class hs extends C {
    constructor(e) {
        super(),
        this.clusters = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new hs).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new hs).fromJson(e, t)
    }
--
        return (new hs).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class _s extends C {
    constructor(e) {
        super(),
        this.chunkType = {
            case: void 0
        },
        this.position = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new _s).fromBinary(e, t)
    }
--
        return (new _s).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class gs extends C {
    constructor(e) {
        super(),
        this.documentId = "",
        this.url = "",
        this.title = "",
        this.chunks = [],
        this.summary = "",
        this.text = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
    }
    static fromJson(e, t) {
        return (new gs).fromJson(e, t)
--
class ys extends C {
    constructor(e) {
        super(),
        this.score = 0,
        this.indexName = "",
        this.documentSourceName = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ys).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new ys).fromJsonString(e, t)
--
class As extends C {
    constructor(e) {
        super(),
        this.description = "",
        this.children = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new As).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new As).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new As).fromJsonString(e, t)
    }
--
class Es extends C {
    constructor(e) {
        super(),
        this.base64Data = "",
        this.mimeType = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Es).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Es).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Es).fromJsonString(e, t)
    }
--
class bs extends C {
    constructor(e) {
        super(),
        this.headers = [],
        this.text = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new bs).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new bs).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new bs).fromJsonString(e, t)
    }
--
class vs extends C {
    constructor(e) {
        super(),
        this.type = Na.UNSPECIFIED,
        this.text = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new vs).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new vs).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new vs).fromJsonString(e, t)
    }
--
class ws extends C {
    constructor(e) {
        super(),
        this.terminalId = "",
        this.shellPid = 0,
        this.commandLine = "",
        this.cwd = "",
        this.source = Oa.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ws).fromBinary(e, t)
--
    static fromJson(e, t) {
        return (new ws).fromJson(e, t)
    }
--
class Ss extends C {
    constructor(e) {
        super(),
        this.rawData = new Uint8Array(0),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ss).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ss).fromJson(e, t)
    }
--
        return (new Ss).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Ts extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ts).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ts).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Ts, e, t)
--
class xs extends C {
    constructor(e) {
        super(),
        this.value = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new xs).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new xs).fromJsonString(e, t)
--
class Cs extends C {
    constructor(e) {
        super(),
        this.shellPid = 0,
        this.commandLine = "",
        this.cwd = "",
        this.output = new Uint8Array(0),
        this.status = Ra.UNSPECIFIED,
        this.source = Oa.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
    }
    static fromJson(e, t) {
        return (new Cs).fromJson(e, t)
--
class ks extends C {
    constructor(e) {
        super(),
        this.terminalId = "",
        this.platform = "",
        this.cwd = "",
        this.shellName = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ks).fromBinary(e, t)
    }
--
        return (new ks).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class Ms extends C {
    constructor(e) {
        super(),
        this.windsurfProjectId = "",
        this.authUid = "",
        this.deploymentProvider = Pa.UNSPECIFIED,
        this.providerProjectId = "",
        this.projectName = "",
        this.domain = "",
        this.subdomainName = "",
        this.projectUrl = "",
        Ze.util.initPartial(e, this)
--
    static fromBinary(e, t) {
        return (new Ms).fromBinary(e, t)
    }
--
class Ls extends C {
    constructor(e) {
        super(),
        this.windsurfDeploymentId = "",
        this.authUid = "",
        this.deploymentProvider = Pa.UNSPECIFIED,
        this.providerDeploymentId = "",
        this.windsurfProjectId = "",
        this.projectId = "",
        this.projectName = "",
        this.workspacePath = "",
        this.domain = "",
--
        this.deploymentUrl = "",
        this.buildStatusUrl = "",
        this.projectUrl = "",
--
class Is extends C {
    constructor(e) {
        super(),
        this.label = "",
        this.value = {
            case: void 0
        },
        this.synonyms = [],
        this.isFeatured = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
    }
    static fromJson(e, t) {
        return (new Is).fromJson(e, t)
--
class Ns extends C {
    constructor(e) {
        super(),
        this.teamId = "",
        this.userPromptCreditCap = 0,
        this.userFlowCreditCap = 0,
        this.autoProvisionCascadeSeat = !1,
        this.allowMcpServers = !1,
        this.allowAutoRunCommands = !1,
        this.allowCustomRecipes = !1,
        this.maxUnclaimedSites = 0,
        this.allowAppDeployments = !1,
--
        this.allowGithubReviews = !1,
        this.allowGithubDescriptionEdits = !1,
        this.pullRequestReviewGuidelines = "",
--
class Os extends C {
    constructor(e) {
        super(),
        this.projectId = "",
        this.framework = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Os).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Os).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Os).fromJsonString(e, t)
    }
--
class Rs extends C {
    constructor(e) {
        super(),
        this.title = "",
        this.id = "",
        this.link = "",
        this.description = "",
        this.commands = {},
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Rs).fromBinary(e, t)
--
    static fromJson(e, t) {
        return (new Rs).fromJson(e, t)
    }
--
class Ds extends C {
    constructor(e) {
        super(),
        this.variables = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ds).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ds).fromJson(e, t)
    }
--
        return (new Ds).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Ps extends C {
    constructor(e) {
        super(),
        this.command = "",
        this.args = [],
        this.env = {},
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ps).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Ps).fromJsonString(e, t)
--
class Bs extends C {
    constructor(e) {
        super(),
        this.name = "",
        this.title = "",
        this.description = "",
        this.link = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Bs).fromBinary(e, t)
    }
--
        return (new Bs).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class Fs extends C {
    constructor(e) {
        super(),
        this.userId = "",
        this.sessionId = "",
        this.properties = {},
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Fs).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Fs).fromJsonString(e, t)
--
class js extends C {
    constructor(e) {
        super(),
        this.name = "",
        this.value = 0,
        this.details = {},
        this.lowerBetter = !1,
        this.isBool = !1,
        this.error = "",
        this.trajectoryId = "",
        Ze.util.initPartial(e, this)
    }
--
        return (new js).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
class Us extends C {
    constructor(e) {
        super(),
        this.model = Nr.MODEL_UNSPECIFIED,
        this.message = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Us).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Us).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Us).fromJsonString(e, t)
    }
--
class Ys extends C {
    constructor(e) {
        super(),
        this.modelNotifications = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ys).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ys).fromJson(e, t)
    }
--
        return (new Ys).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Hs extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Hs).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Hs).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Hs, e, t)
--
class qs extends C {
    constructor(e) {
        super(),
        this.request = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new qs).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new qs).fromJsonString(e, t)
--
class Gs extends C {
    constructor(e) {
        super(),
        this.items = [],
        this.images = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Gs).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Gs).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Gs).fromJsonString(e, t)
    }
--
class Js extends C {
    constructor(e) {
        super(),
        this.actionType = "",
        this.payload = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Js).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Js).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Js).fromJsonString(e, t)
    }
--
class tc extends C {
    constructor(e) {
        super(),
        this.lines = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new tc).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new tc).fromJson(e, t)
    }
--
        return (new tc).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class nc extends C {
    constructor(e) {
        super(),
        this.text = "",
        this.type = zs.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new nc).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new nc).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new nc).fromJsonString(e, t)
    }
--
class rc extends C {
    constructor(e) {
        super(),
        this.startLine = 0,
        this.endLine = 0,
        this.fromLanguage = Vr.UNSPECIFIED,
        this.toLanguage = Vr.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new rc).fromBinary(e, t)
    }
--
        return (new rc).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class ac extends C {
    constructor(e) {
        super(),
        this.text = "",
        this.type = Ws.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ac).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ac).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new ac).fromJsonString(e, t)
    }
--
class oc extends C {
    constructor(e) {
        super(),
        this.changes = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new oc).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new oc).fromJson(e, t)
    }
--
        return (new oc).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class ic extends C {
    constructor(e) {
        super(),
        this.text = "",
        this.type = Ws.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ic).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ic).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new ic).fromJsonString(e, t)
    }
--
class sc extends C {
    constructor(e) {
        super(),
        this.lines = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new sc).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new sc).fromJson(e, t)
    }
--
        return (new sc).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class lc extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new lc).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new lc).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(lc, e, t)
--
class cc extends C {
    constructor(e) {
        super(),
        this.diffs = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new cc).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new cc).fromJson(e, t)
    }
--
        return (new cc).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class uc extends C {
    constructor(e) {
        super(),
        this.rawSource = "",
        this.startLine = 0,
        this.startCol = 0,
        this.endLine = 0,
        this.endCol = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new uc).fromBinary(e, t)
--
    static fromJson(e, t) {
        return (new uc).fromJson(e, t)
    }
--
class dc extends C {
    constructor(e) {
        super(),
        this.responseStreamLatencyMs = F.zero,
        this.refreshContextLatencyMs = F.zero,
        this.shouldGetLocalContextForChatLatencyMs = F.zero,
        this.shouldGetLocalContextForChat = !1,
        this.computeChangeEventsLatencyMs = F.zero,
        this.contextToChatPromptLatencyMs = F.zero,
        this.numPromptTokens = 0,
        this.numSystemPromptTokens = 0,
        this.numInputTokens = F.zero,
--
        this.numIndexedFiles = F.zero,
        this.numIndexedCodeContextItems = F.zero,
        this.model = Nr.MODEL_UNSPECIFIED,
--
class mc extends C {
    constructor(e) {
        super(),
        this.text = "",
        this.items = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new mc).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new mc).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new mc).fromJsonString(e, t)
    }
--
class pc extends C {
    constructor(e) {
        super(),
        this.language = Vr.UNSPECIFIED,
        this.filePathMigrateMeToUri = "",
        this.uri = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new pc).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new pc).fromJsonString(e, t)
--
class fc extends C {
    constructor(e) {
        super(),
        this.language = Vr.UNSPECIFIED,
        this.filePathMigrateMeToUri = "",
        this.refactorDescription = "",
        this.uri = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new fc).fromBinary(e, t)
    }
--
        return (new fc).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class hc extends C {
    constructor(e) {
        super(),
        this.language = Vr.UNSPECIFIED,
        this.filePathMigrateMeToUri = "",
        this.uri = "",
        this.instructions = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new hc).fromBinary(e, t)
    }
--
        return (new hc).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class _c extends C {
    constructor(e) {
        super(),
        this.language = Vr.UNSPECIFIED,
        this.filePathMigrateMeToUri = "",
        this.uri = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new _c).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new _c).fromJsonString(e, t)
--
class gc extends C {
    constructor(e) {
        super(),
        this.language = Vr.UNSPECIFIED,
        this.filePathMigrateMeToUri = "",
        this.uri = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new gc).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new gc).fromJsonString(e, t)
--
class yc extends C {
    constructor(e) {
        super(),
        this.language = Vr.UNSPECIFIED,
        this.filePathMigrateMeToUri = "",
        this.uri = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new yc).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new yc).fromJsonString(e, t)
--
class Ac extends C {
    constructor(e) {
        super(),
        this.language = Vr.UNSPECIFIED,
        this.filePathMigrateMeToUri = "",
        this.uri = "",
        this.refactorDescription = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ac).fromBinary(e, t)
    }
--
        return (new Ac).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class Ec extends C {
    constructor(e) {
        super(),
        this.diagnosticMessage = "",
        this.surroundingCodeSnippet = "",
        this.language = Vr.UNSPECIFIED,
        this.filePathMigrateMeToUri = "",
        this.uri = "",
        this.lineNumber = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
    }
    static fromJson(e, t) {
        return (new Ec).fromJson(e, t)
--
class bc extends C {
    constructor(e) {
        super(),
        this.instruction = "",
        this.language = Vr.UNSPECIFIED,
        this.filePathMigrateMeToUri = "",
        this.uri = "",
        this.lineNumber = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new bc).fromBinary(e, t)
--
    static fromJson(e, t) {
        return (new bc).fromJson(e, t)
    }
--
class vc extends C {
    constructor(e) {
        super(),
        this.query = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new vc).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new vc).fromJson(e, t)
    }
--
        return (new vc).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class wc extends C {
    constructor(e) {
        super(),
        this.diffOutline = "",
        this.language = Vr.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new wc).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new wc).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new wc).fromJsonString(e, t)
    }
--
class Sc extends C {
    constructor(e) {
        super(),
        this.intent = {
            case: void 0
        },
        this.numTokens = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Sc).fromBinary(e, t)
    }
--
        return (new Sc).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class Tc extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Tc).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Tc).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Tc, e, t)
--
class xc extends C {
    constructor(e) {
        super(),
        this.filePathMigrateMeToUri = "",
        this.uri = "",
        this.language = Vr.UNSPECIFIED,
        this.textPre = "",
        this.textPost = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new xc).fromBinary(e, t)
--
    static fromJson(e, t) {
        return (new xc).fromJson(e, t)
    }
--
class Cc extends C {
    constructor(e) {
        super(),
        this.text = "",
        this.displayText = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Cc).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Cc).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Cc).fromJsonString(e, t)
    }
--
class kc extends C {
    constructor(e) {
        super(),
        this.isLoading = !1,
        this.isRelevant = !1,
        this.querySuggestions = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new kc).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new kc).fromJsonString(e, t)
--
class Mc extends C {
    constructor(e) {
        super(),
        this.status = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Mc).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Mc).fromJsonString(e, t)
--
class Lc extends C {
    constructor(e) {
        super(),
        this.text = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Lc).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Lc).fromJson(e, t)
    }
--
        return (new Lc).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Ic extends C {
    constructor(e) {
        super(),
        this.action = {
            case: void 0
        },
        this.numTokens = 0,
        this.contextItems = [],
        this.latestIntent = $s.CHAT_INTENT_UNSPECIFIED,
        this.knowledgeBaseItems = [],
        Ze.util.initPartial(e, this)
    }
--
        return (new Ic).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
class Nc extends C {
    constructor(e) {
        super(),
        this.messageId = "",
        this.source = zr.UNSPECIFIED,
        this.conversationId = "",
        this.content = {
            case: void 0
        },
        this.inProgress = !1,
        this.redact = !1,
        Ze.util.initPartial(e, this)
--
    static fromBinary(e, t) {
        return (new Nc).fromBinary(e, t)
    }
--
class Oc extends C {
    constructor(e) {
        super(),
        this.messages = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Oc).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Oc).fromJson(e, t)
    }
--
        return (new Oc).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Rc extends C {
    constructor(e) {
        super(),
        this.messageId = "",
        this.source = zr.UNSPECIFIED,
        this.prompt = "",
        this.numTokens = 0,
        this.safeForCodeTelemetry = !1,
        this.toolCalls = [],
        this.toolCallId = "",
        this.toolResultIsError = !1,
        this.images = [],
--
        this.signature = "",
        this.thinkingRedacted = !1,
        this.promptAnnotationRanges = [],
--
class Dc extends C {
    constructor(e) {
        super(),
        this.type = Xs.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Dc).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Dc).fromJson(e, t)
    }
--
        return (new Dc).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Pc extends C {
    constructor(e) {
        super(),
        this.name = "",
        this.description = "",
        this.jsonSchemaString = "",
        this.strict = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Pc).fromBinary(e, t)
    }
--
        return (new Pc).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class Bc extends C {
    constructor(e) {
        super(),
        this.choice = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Bc).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Bc).fromJsonString(e, t)
--
class Fc extends C {
    constructor(e) {
        super(),
        this.query = "",
        this.allowedTypes = [],
        this.includeRepoInfo = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Fc).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Fc).fromJsonString(e, t)
--
class jc extends C {
    constructor(e) {
        super(),
        this.cciItems = [],
        this.repoInfos = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new jc).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new jc).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new jc).fromJsonString(e, t)
    }
--
class Uc extends C {
    constructor(e) {
        super(),
        this.chatMessages = [],
        this.openDocumentUris = [],
        this.workspaceUris = [],
        this.activeSelection = "",
        this.contextInclusionType = sa.UNSPECIFIED,
        this.chatModel = Nr.MODEL_UNSPECIFIED,
        this.systemPromptOverride = "",
        this.chatModelName = "",
        this.openDocumentPathsMigrateMeToUris = [],
--
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
class Yc extends C {
    constructor(e) {
        super(),
        this.maxOutputTokens = 0,
        this.maxInputTokens = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Yc).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Yc).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Yc).fromJsonString(e, t)
    }
--
class Hc extends C {
    constructor(e) {
        super(),
        this.experimentKey = Mr.UNSPECIFIED,
        this.enabled = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Hc).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Hc).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Hc).fromJsonString(e, t)
    }
--
class qc extends C {
    constructor(e) {
        super(),
        this.role = zr.UNSPECIFIED,
        this.header = "",
        this.content = "",
        this.footer = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new qc).fromBinary(e, t)
    }
--
        return (new qc).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class Gc extends C {
    constructor(e) {
        super(),
        this.contextChangeEvent = {
            case: void 0
        },
        this.contextRefreshReason = tl.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Gc).fromBinary(e, t)
    }
--
        return (new Gc).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class Jc extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Jc).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Jc).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Jc, e, t)
--
class Vc extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Vc).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Vc).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Vc, e, t)
--
class zc extends C {
    constructor(e) {
        super(),
        this.chatMessages = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new zc).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new zc).fromJson(e, t)
    }
--
        return (new zc).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Wc extends C {
    constructor(e) {
        super(),
        this.otherOpenDocuments = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Wc).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Wc).fromJson(e, t)
    }
--
        return (new Wc).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Zc extends C {
    constructor(e) {
        super(),
        this.oracleItems = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Zc).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Zc).fromJson(e, t)
    }
--
        return (new Zc).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Kc extends C {
    constructor(e) {
        super(),
        this.scope = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Kc).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Kc).fromJsonString(e, t)
--
class $c extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new $c).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new $c).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals($c, e, t)
--
class Xc extends C {
    constructor(e) {
        super(),
        this.actualNodeChange = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Xc).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Xc).fromJson(e, t)
    }
--
        return (new Xc).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Qc extends C {
    constructor(e) {
        super(),
        this.contextSources = [],
        this.contextType = na.UNSPECIFIED,
        this.scorer = "",
        this.score = 0,
        this.providerMetadata = {},
        this.isInPinnedScope = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
    }
    static fromJson(e, t) {
        return (new Qc).fromJson(e, t)
--
class eu extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new eu).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new eu).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(eu, e, t)
--
class tu extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new tu).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new tu).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(tu, e, t)
--
class nu extends C {
    constructor(e) {
        super(),
        this.absoluteUri = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new nu).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new nu).fromJson(e, t)
    }
--
        return (new nu).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class ru extends C {
    constructor(e) {
        super(),
        this.relativeWeight = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ru).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ru).fromJson(e, t)
    }
--
        return (new ru).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class au extends C {
    constructor(e) {
        super(),
        this.getStatsLatencyMs = F.zero,
        this.contextModuleAgeS = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new au).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new au).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new au).fromJsonString(e, t)
    }
--
class ou extends C {
    constructor(e) {
        super(),
        this.cciPerSourceBytes = F.zero,
        this.activeDocumentBytes = F.zero,
        this.otherOpenDocumentsBytes = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ou).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new ou).fromJsonString(e, t)
--
class iu extends C {
    constructor(e) {
        super(),
        this.allCcisBytes = F.zero,
        this.numCcisTracked = F.zero,
        this.termFrequencyMapBytes = F.zero,
        this.numTermsTracked = F.zero,
        this.fileToCciMapBytes = F.zero,
        this.numFilesTracked = F.zero,
        this.lastModifiedBytes = F.zero,
        this.hashMapBytes = F.zero,
        Ze.util.initPartial(e, this)
--
    static fromBinary(e, t) {
        return (new iu).fromBinary(e, t)
    }
--
class su extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new su).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new su).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(su, e, t)
--
class lu extends C {
    constructor(e) {
        super(),
        this.retrievedCciWithSubranges = [],
        this.openDocuments = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new lu).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new lu).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new lu).fromJsonString(e, t)
    }
--
class cu extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new cu).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new cu).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(cu, e, t)
--
class uu extends C {
    constructor(e) {
        super(),
        this.version = 0,
        this.enterpriseVersion = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new uu).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new uu).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new uu).fromJsonString(e, t)
    }
--
class du extends C {
    constructor(e) {
        super(),
        this.cciTimeoutSecs = 0,
        this.indexMode = nl.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new du).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new du).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new du).fromJsonString(e, t)
    }
--
class mu extends C {
    constructor(e) {
        super(),
        this.gitUrl = "",
        this.scmProvider = ea.UNSPECIFIED,
        this.storeSnippets = !1,
        this.whitelistedGroups = [],
        this.useGithubApp = !1,
        this.authUid = "",
        this.email = "",
        this.serviceKeyId = "",
        Ze.util.initPartial(e, this)
--
    static fromBinary(e, t) {
        return (new mu).fromBinary(e, t)
    }
--
class pu extends C {
    constructor(e) {
        super(),
        this.branchName = "",
        this.maxNumAutoIndexes = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new pu).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new pu).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new pu).fromJsonString(e, t)
    }
--
class fu extends C {
    constructor(e) {
        super(),
        this.enablePrune = !1,
        this.enableSmallestRepoFirst = !1,
        this.enableRoundRobin = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new fu).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new fu).fromJsonString(e, t)
--
class hu extends C {
    constructor(e) {
        super(),
        this.numEmbeddings = F.zero,
        this.indexBytesCount = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new hu).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new hu).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new hu).fromJsonString(e, t)
    }
--
class _u extends C {
    constructor(e) {
        super(),
        this.progress = 0,
        this.text = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new _u).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new _u).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new _u).fromJsonString(e, t)
    }
--
class gu extends C {
    constructor(e) {
        super(),
        this.id = "",
        this.repoName = "",
        this.workspace = "",
        this.status = rl.UNSPECIFIED,
        this.statusDetail = "",
        this.autoIndexed = !1,
        this.hasSnippets = !1,
        this.authUid = "",
        this.email = "",
--
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
class yu extends C {
    constructor(e) {
        super(),
        this.size = F.zero,
        this.fileCount = F.zero,
        this.sizeNoIgnore = F.zero,
        this.fileCountNoIgnore = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new yu).fromBinary(e, t)
    }
--
        return (new yu).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class Au extends C {
    constructor(e) {
        super(),
        this.repoName = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Au).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Au).fromJson(e, t)
    }
--
        return (new Au).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Eu extends C {
    constructor(e) {
        super(),
        this.version = {
            case: void 0
        },
        this.versionAlias = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Eu).fromBinary(e, t)
    }
--
        return (new Eu).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class bu extends C {
    constructor(e) {
        super(),
        this.authToken = "",
        this.authUid = "",
        this.serviceKey = "",
        this.forceTargetPublicIndex = !1,
        this.forceTeamId = "",
        this.serviceKeyId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
    }
    static fromJson(e, t) {
        return (new bu).fromJson(e, t)
--
class vu extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new vu).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new vu).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(vu, e, t)
--
class wu extends C {
    constructor(e) {
        super(),
        this.repoName = "",
        this.indexId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new wu).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new wu).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new wu).fromJsonString(e, t)
    }
--
class Su extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Su).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Su).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Su, e, t)
--
class Tu extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Tu).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Tu).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Tu, e, t)
--
class xu extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new xu).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new xu).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(xu, e, t)
--
class Cu extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Cu).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Cu).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Cu, e, t)
--
class ku extends C {
    constructor(e) {
        super(),
        this.repoName = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ku).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ku).fromJson(e, t)
    }
--
        return (new ku).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Mu extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Mu).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Mu).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Mu, e, t)
--
class Lu extends C {
    constructor(e) {
        super(),
        this.repoName = "",
        this.repoNames = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Lu).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Lu).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Lu).fromJsonString(e, t)
    }
--
class Iu extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Iu).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Iu).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Iu, e, t)
--
class Nu extends C {
    constructor(e) {
        super(),
        this.repoName = "",
        this.groupId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Nu).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Nu).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Nu).fromJsonString(e, t)
    }
--
class Ou extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ou).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ou).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Ou, e, t)
--
class Ru extends C {
    constructor(e) {
        super(),
        this.repositories = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ru).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ru).fromJson(e, t)
    }
--
        return (new Ru).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Du extends C {
    constructor(e) {
        super(),
        this.repoName = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Du).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Du).fromJson(e, t)
    }
--
        return (new Du).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Pu extends C {
    constructor(e) {
        super(),
        this.indexes = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Pu).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Pu).fromJson(e, t)
    }
--
        return (new Pu).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Bu extends C {
    constructor(e) {
        super(),
        this.indexId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Bu).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Bu).fromJson(e, t)
    }
--
        return (new Bu).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Fu extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Fu).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Fu).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Fu, e, t)
--
class ju extends C {
    constructor(e) {
        super(),
        this.indexId = "",
        this.cciCount = F.zero,
        this.snippetCount = F.zero,
        this.embeddingCount = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ju).fromBinary(e, t)
    }
--
        return (new ju).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class Uu extends C {
    constructor(e) {
        super(),
        this.indexIds = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Uu).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Uu).fromJson(e, t)
    }
--
        return (new Uu).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Yu extends C {
    constructor(e) {
        super(),
        this.indexStats = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Yu).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Yu).fromJson(e, t)
    }
--
        return (new Yu).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Hu extends C {
    constructor(e) {
        super(),
        this.repoName = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Hu).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Hu).fromJson(e, t)
    }
--
        return (new Hu).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class qu extends C {
    constructor(e) {
        super(),
        this.indexId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new qu).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new qu).fromJson(e, t)
    }
--
        return (new qu).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Gu extends C {
    constructor(e) {
        super(),
        this.indexId = "",
        this.indexIds = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Gu).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Gu).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Gu).fromJsonString(e, t)
    }
--
class Ju extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ju).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ju).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Ju, e, t)
--
class Vu extends C {
    constructor(e) {
        super(),
        this.indexId = "",
        this.indexIds = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Vu).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Vu).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Vu).fromJsonString(e, t)
    }
--
class zu extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new zu).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new zu).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(zu, e, t)
--
class Wu extends C {
    constructor(e) {
        super(),
        this.indexId = "",
        this.indexIds = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Wu).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Wu).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Wu).fromJsonString(e, t)
    }
--
class Zu extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Zu).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Zu).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Zu, e, t)
--
class Ku extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ku).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ku).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Ku, e, t)
--
class $u extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new $u).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new $u).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals($u, e, t)
--
class Xu extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Xu).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Xu).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Xu, e, t)
--
class Qu extends C {
    constructor(e) {
        super(),
        this.databaseTotalBytesCount = F.zero,
        this.tableTotalBytesCount = F.zero,
        this.indexTotalBytesCount = F.zero,
        this.estimatePrunableBytes = F.zero,
        this.isPruning = !1,
        this.lastPruneError = "",
        this.allTablesBytesCount = F.zero,
        Ze.util.initPartial(e, this)
    }
--
        return (new Qu).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
class ed extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ed).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ed).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(ed, e, t)
--
class td extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new td).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new td).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(td, e, t)
--
class nd extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new nd).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new nd).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(nd, e, t)
--
class rd extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new rd).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new rd).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(rd, e, t)
--
class ad extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ad).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ad).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(ad, e, t)
--
class od extends C {
    constructor(e) {
        super(),
        this.connectionsMap = {},
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new od).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new od).fromJson(e, t)
    }
--
        return (new od).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class id extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new id).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new id).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(id, e, t)
--
class sd extends C {
    constructor(e) {
        super(),
        this.debugInfo = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new sd).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new sd).fromJson(e, t)
    }
--
        return (new sd).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class ld extends C {
    constructor(e) {
        super(),
        this.includeIncomplete = !1,
        this.groupIdsFilter = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ld).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ld).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new ld).fromJsonString(e, t)
    }
--
class cd extends C {
    constructor(e) {
        super(),
        this.repositories = [],
        this.indexes = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new cd).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new cd).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new cd).fromJsonString(e, t)
    }
--
class ud extends C {
    constructor(e) {
        super(),
        this.excludedFiles = [],
        this.filterPaths = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ud).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ud).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new ud).fromJsonString(e, t)
    }
--
class dd extends C {
    constructor(e) {
        super(),
        this.query = "",
        this.maxItems = 0,
        this.groupIdsFilter = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new dd).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new dd).fromJsonString(e, t)
--
class md extends C {
    constructor(e) {
        super(),
        this.relativeFilePaths = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new md).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new md).fromJson(e, t)
    }
--
        return (new md).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class pd extends C {
    constructor(e) {
        super(),
        this.repositoryFilters = [],
        this.maxResults = F.zero,
        this.groupIdsFilter = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new pd).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new pd).fromJsonString(e, t)
--
class fd extends C {
    constructor(e) {
        super(),
        this.score = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new fd).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new fd).fromJson(e, t)
    }
--
        return (new fd).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class hd extends C {
    constructor(e) {
        super(),
        this.scoredContextItems = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new hd).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new hd).fromJson(e, t)
    }
--
        return (new hd).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class _d extends C {
    constructor(e) {
        super(),
        this.codeContextItems = [],
        this.snippetType = aa.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new _d).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new _d).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new _d).fromJsonString(e, t)
    }
--
class gd extends C {
    constructor(e) {
        super(),
        this.embeddings = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new gd).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new gd).fromJson(e, t)
    }
--
        return (new gd).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class yd extends C {
    constructor(e) {
        super(),
        this.repositoryName = "",
        this.fileCount = F.zero,
        this.codeContextItemCount = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new yd).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new yd).fromJsonString(e, t)
--
class Ad extends C {
    constructor(e) {
        super(),
        this.uid = F.zero,
        this.eventOneof = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ad).fromBinary(e, t)
    }
--
        return (new Ad).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class Ed extends C {
    constructor(e) {
        super(),
        this.absoluteUri = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ed).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ed).fromJson(e, t)
    }
--
        return (new Ed).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class bd extends C {
    constructor(e) {
        super(),
        this.absoluteUri = "",
        this.paths = [],
        this.workspaceUri = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new bd).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new bd).fromJsonString(e, t)
--
class vd extends C {
    constructor(e) {
        super(),
        this.absoluteUri = "",
        this.paths = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new vd).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new vd).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new vd).fromJsonString(e, t)
    }
--
class wd extends C {
    constructor(e) {
        super(),
        this.addWorkspaceUid = F.zero,
        this.addWorkspaceQueueUid = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new wd).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new wd).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new wd).fromJsonString(e, t)
    }
--
class Sd extends C {
    constructor(e) {
        super(),
        this.addWorkspaceUid = F.zero,
        this.addWorkspaceQueueUid = F.zero,
        this.workspaceUri = "",
        this.numFiles = F.zero,
        this.size = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Sd).fromBinary(e, t)
--
    static fromJson(e, t) {
        return (new Sd).fromJson(e, t)
    }
--
class Td extends C {
    constructor(e) {
        super(),
        this.workspaceUri = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Td).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Td).fromJson(e, t)
    }
--
        return (new Td).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class xd extends C {
    constructor(e) {
        super(),
        this.workspaceUri = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new xd).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new xd).fromJson(e, t)
    }
--
        return (new xd).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Cd extends C {
    constructor(e) {
        super(),
        this.sha = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Cd).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Cd).fromJson(e, t)
    }
--
        return (new Cd).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class kd extends C {
    constructor(e) {
        super(),
        this.relevanceReason = al.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new kd).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new kd).fromJson(e, t)
    }
--
        return (new kd).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Md extends C {
    constructor(e) {
        super(),
        this.intent = "",
        this.relevanceScore = 0,
        this.rationale = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Md).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Md).fromJsonString(e, t)
--
class Ld extends C {
    constructor(e) {
        super(),
        this.relevantCodeContexts = [],
        this.descriptionByType = {},
        this.intentRelevance = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ld).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Ld).fromJsonString(e, t)
--
class Id extends C {
    constructor(e) {
        super(),
        this.startFilePathMigrateMeToUri = "",
        this.startFileUri = "",
        this.startFileRelPath = "",
        this.endFilePathMigrateMeToUri = "",
        this.endFileUri = "",
        this.endFileRelPath = "",
        this.oldFileContent = "",
        this.newFileContent = "",
        this.codeContextItemChanges = [],
--
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
class Nd extends C {
    constructor(e) {
        super(),
        this.intent = "",
        this.intentType = il.UNSPECIFIED,
        this.includeTestFiles = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Nd).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Nd).fromJsonString(e, t)
--
class Od extends C {
    constructor(e) {
        super(),
        this.fileChanges = [],
        this.testFileChanges = [],
        this.intent = "",
        this.codeChangeDataSource = {
            case: void 0
        },
        this.unrelatedCcis = [],
        this.syntheticIntents = [],
        Ze.util.initPartial(e, this)
--
    static fromBinary(e, t) {
        return (new Od).fromBinary(e, t)
    }
--
class Rd extends C {
    constructor(e) {
        super(),
        this.commitHash = "",
        this.parentCommitHash = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Rd).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Rd).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Rd).fromJsonString(e, t)
    }
--
class Dd extends C {
    constructor(e) {
        super(),
        this.repoRoot = "",
        this.unrelatedCciMultiple = 0,
        this.dbDir = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Dd).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Dd).fromJsonString(e, t)
--
class Pd extends C {
    constructor(e) {
        super(),
        this.from = "",
        this.to = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Pd).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Pd).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Pd).fromJsonString(e, t)
    }
--
class Bd extends C {
    constructor(e) {
        super(),
        this.fileChanges = [],
        this.parentCommitHash = "",
        this.unrelatedCcis = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Bd).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Bd).fromJsonString(e, t)
--
class Fd extends C {
    constructor(e) {
        super(),
        this.query = "",
        this.targetCodeContexts = [],
        this.subdirectory = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Fd).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Fd).fromJsonString(e, t)
--
class jd extends C {
    constructor(e) {
        super(),
        this.retrieverName = "",
        this.codeContextWithMetadatas = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new jd).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new jd).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new jd).fromJsonString(e, t)
    }
--
class Ud extends C {
    constructor(e) {
        super(),
        this.relevanceScore = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ud).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ud).fromJson(e, t)
    }
--
        return (new Ud).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Yd extends C {
    constructor(e) {
        super(),
        this.relevant = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Yd).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Yd).fromJson(e, t)
    }
--
        return (new Yd).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Hd extends C {
    constructor(e) {
        super(),
        this.type = sl.UNSPECIFIED,
        this.modelName = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Hd).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Hd).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Hd).fromJsonString(e, t)
    }
--
class qd extends C {
    constructor(e) {
        super(),
        this.precisionScore = 0,
        this.recallScore = 0,
        this.accuracyScore = 0,
        this.labelRankingAveragePrecisionScore = 0,
        this.rocAucScore = 0,
        this.averagePrecisionScore = 0,
        this.threshold = 0,
        Ze.util.initPartial(e, this)
    }
--
        return (new qd).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
class Gd extends C {
    constructor(e) {
        super(),
        this.classifiedItems = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Gd).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Gd).fromJson(e, t)
    }
--
        return (new Gd).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Jd extends C {
    constructor(e) {
        super(),
        this.id = 0,
        this.file = "",
        this.function = "",
        this.instruction = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Jd).fromBinary(e, t)
    }
--
        return (new Jd).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class Vd extends C {
    constructor(e) {
        super(),
        this.instructions = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Vd).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Vd).fromJson(e, t)
    }
--
        return (new Vd).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class zd extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new zd).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new zd).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(zd, e, t)
--
class Wd extends C {
    constructor(e) {
        super(),
        this.authUid = "",
        this.username = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Wd).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Wd).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Wd).fromJsonString(e, t)
    }
--
class Zd extends C {
    constructor(e) {
        super(),
        this.users = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Zd).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Zd).fromJson(e, t)
    }
--
        return (new Zd).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Kd extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Kd).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Kd).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Kd, e, t)
--
class $d extends C {
    constructor(e) {
        super(),
        this.authUid = "",
        this.email = "",
        this.name = "",
        this.photoUrl = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new $d).fromBinary(e, t)
    }
--
        return (new $d).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class Xd extends C {
    constructor(e) {
        super(),
        this.users = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Xd).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Xd).fromJson(e, t)
    }
--
        return (new Xd).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Qd extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Qd).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Qd).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Qd, e, t)
--
class em extends C {
    constructor(e) {
        super(),
        this.maxResults = F.zero,
        this.queries = [],
        this.urls = [],
        this.documentIds = [],
        this.aggregateIds = [],
        this.chatMessagePrompts = [],
        this.documentTypes = [],
        this.searchMode = ll.UNSPECIFIED,
        this.disableReranking = !1,
--
        this.indexChoices = [],
        this.query = "",
        Ze.util.initPartial(e, this)
--
class tm extends C {
    constructor(e) {
        super(),
        this.knowledgeBaseGroups = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new tm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new tm).fromJson(e, t)
    }
--
        return (new tm).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class nm extends C {
    constructor(e) {
        super(),
        this.query = "",
        this.documentTypes = [],
        this.indexChoices = [],
        this.indexNames = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new nm).fromBinary(e, t)
    }
--
        return (new nm).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class rm extends C {
    constructor(e) {
        super(),
        this.scopeItems = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new rm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new rm).fromJson(e, t)
    }
--
        return (new rm).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class am extends C {
    constructor(e) {
        super(),
        this.scopeItems = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new am).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new am).fromJson(e, t)
    }
--
        return (new am).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class om extends C {
    constructor(e) {
        super(),
        this.knowledgeBaseItemsWithMetadata = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new om).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new om).fromJson(e, t)
    }
--
        return (new om).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class im extends C {
    constructor(e) {
        super(),
        this.channelIds = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new im).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new im).fromJson(e, t)
    }
--
        return (new im).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class sm extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new sm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new sm).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(sm, e, t)
--
class lm extends C {
    constructor(e) {
        super(),
        this.organization = "",
        this.repository = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new lm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new lm).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new lm).fromJsonString(e, t)
    }
--
class cm extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new cm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new cm).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(cm, e, t)
--
class um extends C {
    constructor(e) {
        super(),
        this.folderIds = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new um).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new um).fromJson(e, t)
    }
--
        return (new um).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class dm extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new dm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new dm).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(dm, e, t)
--
class mm extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new mm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new mm).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(mm, e, t)
--
class pm extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new pm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new pm).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(pm, e, t)
--
class fm extends C {
    constructor(e) {
        super(),
        this.body = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new fm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new fm).fromJson(e, t)
    }
--
        return (new fm).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class hm extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new hm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new hm).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(hm, e, t)
--
class _m extends C {
    constructor(e) {
        super(),
        this.status = cl.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new _m).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new _m).fromJson(e, t)
    }
--
        return (new _m).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class gm extends C {
    constructor(e) {
        super(),
        this.bodies = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new gm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new gm).fromJson(e, t)
    }
--
        return (new gm).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class ym extends C {
    constructor(e) {
        super(),
        this.results = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ym).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ym).fromJson(e, t)
    }
--
        return (new ym).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Am extends C {
    constructor(e) {
        super(),
        this.payload = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Am).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Am).fromJson(e, t)
    }
--
        return (new Am).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Em extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Em).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Em).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Em, e, t)
--
class bm extends C {
    constructor(e) {
        super(),
        this.documentId = "",
        this.text = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new bm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new bm).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new bm).fromJsonString(e, t)
    }
--
class vm extends C {
    constructor(e) {
        super(),
        this.score = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new vm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new vm).fromJson(e, t)
    }
--
        return (new vm).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class wm extends C {
    constructor(e) {
        super(),
        this.text = "",
        this.url = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new wm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new wm).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new wm).fromJsonString(e, t)
    }
--
class Sm extends C {
    constructor(e) {
        super(),
        this.documentWithScores = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Sm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Sm).fromJson(e, t)
    }
--
        return (new Sm).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Tm extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Tm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Tm).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Tm, e, t)
--
class xm extends C {
    constructor(e) {
        super(),
        this.repoName = "",
        this.indexId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new xm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new xm).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new xm).fromJsonString(e, t)
    }
--
class Cm extends C {
    constructor(e) {
        super(),
        this.indexId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Cm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Cm).fromJson(e, t)
    }
--
        return (new Cm).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class km extends C {
    constructor(e) {
        super(),
        this.status = rl.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new km).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new km).fromJson(e, t)
    }
--
        return (new km).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Mm extends C {
    constructor(e) {
        super(),
        this.query = "",
        this.maxResults = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Mm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Mm).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Mm).fromJsonString(e, t)
    }
--
class Lm extends C {
    constructor(e) {
        super(),
        this.documentWithScores = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Lm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Lm).fromJson(e, t)
    }
--
        return (new Lm).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Im extends C {
    constructor(e) {
        super(),
        this.query = "",
        this.maxResults = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Im).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Im).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Im).fromJsonString(e, t)
    }
--
class Nm extends C {
    constructor(e) {
        super(),
        this.documentWithScores = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Nm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Nm).fromJson(e, t)
    }
--
        return (new Nm).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Om extends C {
    constructor(e) {
        super(),
        this.config = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Om).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Om).fromJsonString(e, t)
--
class Rm extends C {
    constructor(e) {
        super(),
        this.includeChannelIds = [],
        this.excludeChannelIds = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Rm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Rm).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Rm).fromJsonString(e, t)
    }
--
class Dm extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Dm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Dm).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Dm, e, t)
--
class Pm extends C {
    constructor(e) {
        super(),
        this.includeDriveIds = [],
        this.excludeDriveIds = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Pm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Pm).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Pm).fromJsonString(e, t)
    }
--
class Bm extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Bm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Bm).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Bm, e, t)
--
class Fm extends C {
    constructor(e) {
        super(),
        this.config = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Fm).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Fm).fromJsonString(e, t)
--
class jm extends C {
    constructor(e) {
        super(),
        this.clientId = "",
        this.clientSecret = "",
        this.signingSecret = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new jm).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new jm).fromJsonString(e, t)
--
class Um extends C {
    constructor(e) {
        super(),
        this.organization = "",
        this.repository = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Um).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Um).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Um).fromJsonString(e, t)
    }
--
class Ym extends C {
    constructor(e) {
        super(),
        this.installationId = F.zero,
        this.repoConfigs = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ym).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ym).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Ym).fromJsonString(e, t)
    }
--
class Hm extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Hm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Hm).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Hm, e, t)
--
class qm extends C {
    constructor(e) {
        super(),
        this.webhookId = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new qm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new qm).fromJson(e, t)
    }
--
        return (new qm).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Gm extends C {
    constructor(e) {
        super(),
        this.connector = ul.UNSPECIFIED,
        this.accessToken = "",
        this.refreshToken = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Gm).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Gm).fromJsonString(e, t)
--
class Jm extends C {
    constructor(e) {
        super(),
        this.connector = ul.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Jm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Jm).fromJson(e, t)
    }
--
        return (new Jm).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Vm extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Vm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Vm).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Vm, e, t)
--
class zm extends C {
    constructor(e) {
        super(),
        this.connector = ul.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new zm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new zm).fromJson(e, t)
    }
--
        return (new zm).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Wm extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Wm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Wm).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Wm, e, t)
--
class Zm extends C {
    constructor(e) {
        super(),
        this.config = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Zm).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Zm).fromJsonString(e, t)
--
class Km extends C {
    constructor(e) {
        super(),
        this.clientId = "",
        this.clientSecret = "",
        this.signingSecret = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Km).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Km).fromJsonString(e, t)
--
class $m extends C {
    constructor(e) {
        super(),
        this.installationId = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new $m).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new $m).fromJson(e, t)
    }
--
        return (new $m).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Xm extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Xm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Xm).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Xm, e, t)
--
class Qm extends C {
    constructor(e) {
        super(),
        this.jobIds = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Qm).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Qm).fromJson(e, t)
    }
--
        return (new Qm).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class ep extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ep).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ep).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(ep, e, t)
--
class tp extends C {
    constructor(e) {
        super(),
        this.documentType = va.UNSPECIFIED,
        this.count = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new tp).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new tp).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new tp).fromJsonString(e, t)
    }
--
class np extends C {
    constructor(e) {
        super(),
        this.connector = ul.UNSPECIFIED,
        this.initialized = !1,
        this.documentTypeCounts = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new np).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new np).fromJsonString(e, t)
--
class rp extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new rp).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new rp).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(rp, e, t)
--
class ap extends C {
    constructor(e) {
        super(),
        this.connectorStates = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ap).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ap).fromJson(e, t)
    }
--
        return (new ap).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class op extends C {
    constructor(e) {
        super(),
        this.connector = ul.UNSPECIFIED,
        this.id = F.zero,
        this.status = dl.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new op).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new op).fromJsonString(e, t)
--
class ip extends C {
    constructor(e) {
        super(),
        this.connectorTypes = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ip).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ip).fromJson(e, t)
    }
--
        return (new ip).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class sp extends C {
    constructor(e) {
        super(),
        this.jobStates = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new sp).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new sp).fromJson(e, t)
    }
--
        return (new sp).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class lp extends C {
    constructor(e) {
        super(),
        this.datasetId = "",
        this.previousMessageDatasetId = "",
        this.type = "",
        this.channelId = "",
        this.user = "",
        this.text = "",
        this.timestamp = "",
        this.threadTimestamp = "",
        this.channelName = "",
--
        this.teamId = "",
        this.isPrivateChannel = !1,
        this.teamDomain = "",
--
class cp extends C {
    constructor(e) {
        super(),
        this.type = "",
        this.channelId = "",
        this.channelName = "",
        this.description = "",
        this.teamId = "",
        this.isPrivateChannel = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
    }
    static fromJson(e, t) {
        return (new cp).fromJson(e, t)
--
class up extends C {
    constructor(e) {
        super(),
        this.payload = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new up).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new up).fromJsonString(e, t)
--
class dp extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new dp).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new dp).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(dp, e, t)
--
class mp extends C {
    constructor(e) {
        super(),
        this.webhookUrl = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new mp).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new mp).fromJson(e, t)
    }
--
        return (new mp).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class pp extends C {
    constructor(e) {
        super(),
        this.connector = ul.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new pp).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new pp).fromJson(e, t)
    }
--
        return (new pp).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class fp extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new fp).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new fp).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(fp, e, t)
--
class hp extends C {
    constructor(e) {
        super(),
        this.path = "",
        this.name = "",
        this.description = "",
        this.content = "",
        this.turbo = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new hp).fromBinary(e, t)
--
    static fromJson(e, t) {
        return (new hp).fromJson(e, t)
    }
--
class _p extends C {
    constructor(e) {
        super(),
        this.component = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new _p).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new _p).fromJsonString(e, t)
--
class gp extends C {
    constructor(e) {
        super(),
        this.planId = "",
        this.goal = "",
        this.actionStates = [],
        this.outlines = [],
        this.summaryComponents = [],
        this.postSummaryText = "",
        this.planFullyGenerated = !1,
        this.planFinished = !1,
        this.planSummaryConfirmed = !1,
--
        this.cciList = [],
        Ze.util.initPartial(e, this)
    }
--
class yp extends C {
    constructor(e) {
        super(),
        this.steps = [],
        this.outlines = [],
        this.currentStepIndex = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new yp).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new yp).fromJsonString(e, t)
--
class Ap extends C {
    constructor(e) {
        super(),
        this.stepNumber = 0,
        this.actionName = "",
        this.jsonArgs = "",
        this.parentStepNumbers = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ap).fromBinary(e, t)
    }
--
        return (new Ap).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class Ep extends C {
    constructor(e) {
        super(),
        this.step = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ep).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Ep).fromJsonString(e, t)
--
class bp extends C {
    constructor(e) {
        super(),
        this.totalRetrievedCount = 0,
        this.topRetrievedItems = [],
        this.fullCciList = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new bp).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new bp).fromJsonString(e, t)
--
class vp extends C {
    constructor(e) {
        super(),
        this.query = "",
        this.filesScanned = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new vp).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new vp).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new vp).fromJsonString(e, t)
    }
--
class wp extends C {
    constructor(e) {
        super(),
        this.requestSource = fl.UNSPECIFIED,
        this.goal = "",
        this.error = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new wp).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new wp).fromJsonString(e, t)
--
class Sp extends C {
    constructor(e) {
        super(),
        this.done = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Sp).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Sp).fromJson(e, t)
    }
--
        return (new Sp).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Tp extends C {
    constructor(e) {
        super(),
        this.goal = "",
        this.nextSteps = [],
        this.targetDirectories = [],
        this.targetFiles = [],
        this.scopeItems = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Tp).fromBinary(e, t)
--
    static fromJson(e, t) {
        return (new Tp).fromJson(e, t)
    }
--
class xp extends C {
    constructor(e) {
        super(),
        this.spec = {
            case: void 0
        },
        this.parentStepIndices = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new xp).fromBinary(e, t)
    }
--
        return (new xp).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class Cp extends C {
    constructor(e) {
        super(),
        this.instruction = "",
        this.referenceCcis = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Cp).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Cp).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Cp).fromJsonString(e, t)
    }
--
class kp extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new kp).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new kp).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(kp, e, t)
--
class Mp extends C {
    constructor(e) {
        super(),
        this.absoluteUri = "",
        this.startLine = 0,
        this.endLine = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Mp).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Mp).fromJsonString(e, t)
--
class Lp extends C {
    constructor(e) {
        super(),
        this.content = "",
        this.absoluteUri = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Lp).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Lp).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Lp).fromJsonString(e, t)
    }
--
class Ip extends C {
    constructor(e) {
        super(),
        this.targetContent = "",
        this.replacementContent = "",
        this.allowMultiple = !1,
        this.targetHasCarriageReturn = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ip).fromBinary(e, t)
    }
--
        return (new Ip).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class Np extends C {
    constructor(e) {
        super(),
        this.instruction = "",
        this.replacementChunks = [],
        this.isEdit = !1,
        this.useFastApply = !1,
        this.target = {
            case: void 0
        },
        this.referenceCcis = [],
        Ze.util.initPartial(e, this)
--
    static fromBinary(e, t) {
        return (new Np).fromBinary(e, t)
    }
--
class Op extends C {
    constructor(e) {
        super(),
        this.stepId = "",
        this.status = ml.UNSPECIFIED,
        this.error = "",
        this.stepVersion = 0,
        this.planVersion = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Op).fromBinary(e, t)
--
    static fromJson(e, t) {
        return (new Op).fromJson(e, t)
    }
--
class Rp extends C {
    constructor(e) {
        super(),
        this.result = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Rp).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Rp).fromJsonString(e, t)
--
class Dp extends C {
    constructor(e) {
        super(),
        this.entries = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Dp).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Dp).fromJson(e, t)
    }
--
        return (new Dp).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Pp extends C {
    constructor(e) {
        super(),
        this.key = "",
        this.value = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Pp).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Pp).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Pp).fromJsonString(e, t)
    }
--
class Bp extends C {
    constructor(e) {
        super(),
        this.absolutePathMigrateMeToUri = "",
        this.contextPrefix = "",
        this.contextSuffix = "",
        this.promptId = "",
        this.completionId = "",
        this.fileContentHash = "",
        this.absoluteUri = "",
        this.resultCcis = [],
        this.originalContent = "",
--
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
class Fp extends C {
    constructor(e) {
        super(),
        this.totalRetrievedCount = 0,
        this.topRetrievedItems = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Fp).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Fp).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Fp).fromJsonString(e, t)
    }
--
class jp extends C {
    constructor(e) {
        super(),
        this.status = pl.UNSPECIFIED,
        this.planId = "",
        this.actions = [],
        this.error = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new jp).fromBinary(e, t)
    }
--
        return (new jp).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class Up extends C {
    constructor(e) {
        super(),
        this.rawResponse = "",
        this.planTokens = 0,
        this.planCost = 0,
        this.systemPrompt = "",
        this.messagePrompts = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Up).fromBinary(e, t)
--
    static fromJson(e, t) {
        return (new Up).fromJson(e, t)
    }
--
class Yp extends C {
    constructor(e) {
        super(),
        this.maxNominalContinuations = 0,
        this.maxErrorContinuations = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Yp).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Yp).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Yp).fromJsonString(e, t)
    }
--
class Hp extends C {
    constructor(e) {
        super(),
        this.recordTelemetry = !1,
        this.addDistillNode = !1,
        this.mQueryModelName = "",
        this.useMacroPlanner = !1,
        this.autoPrepareApply = !1,
        this.numPrepareRetries = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
    }
    static fromJson(e, t) {
        return (new Hp).fromJson(e, t)
--
class qp extends C {
    constructor(e) {
        super(),
        this.planModelName = "",
        this.maxTokensPerPlan = 0,
        this.maxTokenFraction = 0,
        this.chatTemperature = 0,
        this.chatCompletionMaxTokens = F.zero,
        this.augmentCommand = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
    }
    static fromJson(e, t) {
        return (new qp).fromJson(e, t)
--
class Gp extends C {
    constructor(e) {
        super(),
        this.cortexId = "",
        this.done = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Gp).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Gp).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Gp).fromJsonString(e, t)
    }
--
class Jp extends C {
    constructor(e) {
        super(),
        this.mergeBaseCommitHash = "",
        this.repoIsPublic = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Jp).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Jp).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Jp).fromJsonString(e, t)
    }
--
class Vp extends C {
    constructor(e) {
        super(),
        this.stateId = "",
        this.workspaces = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Vp).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Vp).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Vp).fromJsonString(e, t)
    }
--
class zp extends C {
    constructor(e) {
        super(),
        this.workspaceFolderAbsoluteUri = "",
        this.gitRootAbsoluteUri = "",
        this.branchName = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new zp).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new zp).fromJsonString(e, t)
--
class Wp extends C {
    constructor(e) {
        super(),
        this.workspaces = [],
        this.initializationStateId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Wp).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Wp).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Wp).fromJsonString(e, t)
    }
--
class Zp extends C {
    constructor(e) {
        super(),
        this.trajectoryId = "",
        this.cascadeId = "",
        this.trajectoryType = _l.UNSPECIFIED,
        this.steps = [],
        this.parentReferences = [],
        this.generatorMetadata = [],
        this.source = hl.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
--
        return (new Zp).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
class Kp extends C {
    constructor(e) {
        super(),
        this.summary = "",
        this.stepCount = 0,
        this.trajectoryId = "",
        this.status = bl.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Kp).fromBinary(e, t)
    }
--
        return (new Kp).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class $p extends C {
    constructor(e) {
        super(),
        this.summaries = {},
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new $p).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new $p).fromJson(e, t)
    }
--
        return (new $p).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Xp extends C {
    constructor(e) {
        super(),
        this.trajectoryId = "",
        this.stepIndex = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Xp).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Xp).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Xp).fromJsonString(e, t)
    }
--
class Qp extends C {
    constructor(e) {
        super(),
        this.workspaceUri = "",
        this.gitRootUri = "",
        this.branchName = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Qp).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Qp).fromJsonString(e, t)
--
class ef extends C {
    constructor(e) {
        super(),
        this.stepIndices = [],
        this.metadata = {
            case: void 0
        },
        this.executionId = "",
        this.error = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
    }
    static fromJson(e, t) {
        return (new ef).fromJson(e, t)
--
class tf extends C {
    constructor(e) {
        super(),
        this.messageIndex = 0,
        this.segmentIndex = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new tf).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new tf).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new tf).fromJsonString(e, t)
    }
--
class nf extends C {
    constructor(e) {
        super(),
        this.systemPrompt = "",
        this.messagePrompts = [],
        this.messageMetadata = [],
        this.model = Nr.MODEL_UNSPECIFIED,
        this.modelCost = 0,
        this.lastCacheIndex = 0,
        this.tools = [],
        Ze.util.initPartial(e, this)
    }
--
        return (new nf).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
class rf extends C {
    constructor(e) {
        super(),
        this.index = 0,
        this.contentChecksum = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new rf).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new rf).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new rf).fromJsonString(e, t)
    }
--
class af extends C {
    constructor(e) {
        super(),
        this.startStepIndex = 0,
        this.checkpointIndex = 0,
        this.stepsCoveredByCheckpoint = [],
        this.latestStableMessageIndex = 0,
        this.cacheBreakpoints = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new af).fromBinary(e, t)
--
    static fromJson(e, t) {
        return (new af).fromJson(e, t)
    }
--
class of extends C {
    constructor(e) {
        super(),
        this.source = gl.UNSPECIFIED,
        this.argumentsOrder = [],
        this.modelCost = 0,
        this.generatorModel = Nr.MODEL_UNSPECIFIED,
        this.executionId = "",
        this.flowCreditsUsed = 0,
        this.promptCreditsUsed = 0,
        this.nonStandardCreditReasons = [],
        this.toolCallChoices = [],
--
        this.cortexRequestSource = fl.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
--
class sf extends C {
    constructor(e) {
        super(),
        this.stepIndex = 0,
        this.status = El.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new sf).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new sf).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new sf).fromJsonString(e, t)
    }
--
class lf extends C {
    constructor(e) {
        super(),
        this.userErrorMessage = "",
        this.shortError = "",
        this.fullError = "",
        this.isBenign = !1,
        this.errorCode = 0,
        this.details = "",
        this.errorId = "",
        Ze.util.initPartial(e, this)
    }
--
        return (new lf).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
class cf extends C {
    constructor(e) {
        super(),
        this.type = Cl.UNSPECIFIED,
        this.status = El.UNSPECIFIED,
        this.asyncLevelOverride = Al.UNSPECIFIED,
        this.step = {
            case: void 0
        },
        this.subtrajectories = [],
        Ze.util.initPartial(e, this)
    }
--
        return (new cf).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
class uf extends C {
    constructor(e) {
        super(),
        this.workspaceUri = "",
        this.gitRootUri = "",
        this.branchName = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new uf).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new uf).fromJsonString(e, t)
--
class df extends C {
    constructor(e) {
        super(),
        this.maxGeneratorInvocations = 0,
        this.terminalStepTypes = [],
        this.holdForValidCheckpointTimeout = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new df).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new df).fromJsonString(e, t)
--
class mf extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new mf).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new mf).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(mf, e, t)
--
class pf extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new pf).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new pf).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(pf, e, t)
--
class ff extends C {
    constructor(e) {
        super(),
        this.plannerMode = _a.UNSPECIFIED,
        this.clusterPath = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ff).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ff).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new ff).fromJsonString(e, t)
    }
--
class hf extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new hf).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new hf).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(hf, e, t)
--
class _f extends C {
    constructor(e) {
        super(),
        this.model = Nr.MODEL_UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new _f).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new _f).fromJson(e, t)
    }
--
        return (new _f).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class gf extends C {
    constructor(e) {
        super(),
        this.model = Nr.MODEL_UNSPECIFIED,
        this.numRollouts = 0,
        this.judgeModel = Nr.MODEL_UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new gf).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new gf).fromJsonString(e, t)
--
class yf extends C {
    constructor(e) {
        super(),
        this.toolSet = Sl.UNSPECIFIED,
        this.mixin = wl.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new yf).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new yf).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new yf).fromJsonString(e, t)
    }
--
class Af extends C {
    constructor(e) {
        super(),
        this.clusterPath = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Af).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Af).fromJson(e, t)
    }
--
        return (new Af).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Ef extends C {
    constructor(e) {
        super(),
        this.mQueryModel = Nr.MODEL_UNSPECIFIED,
        this.maxTokensPerMQuery = 0,
        this.maxLinesPerSnippet = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ef).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Ef).fromJsonString(e, t)
--
class bf extends C {
    constructor(e) {
        super(),
        this.maxGrepResults = 0,
        this.numFullSourceCcis = 0,
        this.maxBytesPerCci = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new bf).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new bf).fromJsonString(e, t)
--
class vf extends C {
    constructor(e) {
        super(),
        this.maxFindResults = 0,
        this.fdPath = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new vf).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new vf).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new vf).fromJsonString(e, t)
    }
--
class wf extends C {
    constructor(e) {
        super(),
        this.maxClusterQueryResults = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new wf).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new wf).fromJson(e, t)
    }
--
        return (new wf).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Sf extends C {
    constructor(e) {
        super(),
        this.maxTokensPerInspectCluster = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Sf).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Sf).fromJson(e, t)
    }
--
        return (new Sf).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Tf extends C {
    constructor(e) {
        super(),
        this.userAllowlist = [],
        this.userDenylist = [],
        this.systemAllowlist = [],
        this.systemDenylist = [],
        this.systemNooplist = [],
        this.autoExecutionPolicy = da.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
    }
    static fromJson(e, t) {
        return (new Tf).fromJson(e, t)
--
class xf extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new xf).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new xf).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(xf, e, t)
--
class Cf extends C {
    constructor(e) {
        super(),
        this.maxCharsCommandStdout = 0,
        this.shellName = "",
        this.shellPath = "",
        this.maxTimeoutMs = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Cf).fromBinary(e, t)
    }
--
        return (new Cf).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class kf extends C {
    constructor(e) {
        super(),
        this.maxTokensPerKnowledgeBaseSearch = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new kf).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new kf).fromJson(e, t)
    }
--
        return (new kf).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Mf extends C {
    constructor(e) {
        super(),
        this.enabled = !1,
        this.promptUnchangedThreshold = 0,
        this.contentViewRadiusLines = 0,
        this.contentEditRadiusLines = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Mf).fromBinary(e, t)
    }
--
        return (new Mf).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class Lf extends C {
    constructor(e) {
        super(),
        this.maxFuzzyEditDistanceFraction = 0,
        this.allowPartialReplacementSuccess = !1,
        this.viewFileRecencyMaxDistance = 0,
        this.enableFuzzySandwichMatch = !1,
        this.toolVariant = Tl.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Lf).fromBinary(e, t)
--
    static fromJson(e, t) {
        return (new Lf).fromJson(e, t)
    }
--
class If extends C {
    constructor(e) {
        super(),
        this.disableExtensions = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new If).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new If).fromJson(e, t)
    }
--
        return (new If).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Nf extends C {
    constructor(e) {
        super(),
        this.intentModel = Nr.MODEL_UNSPECIFIED,
        this.maxContextTokens = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Nf).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Nf).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Nf).fromJsonString(e, t)
    }
--
class Of extends C {
    constructor(e) {
        super(),
        this.maxTokensPerOutline = 0,
        this.maxDocLinesFraction = 0,
        this.maxTotalOutlineBytes = 0,
        this.maxBytesPerOutlineItem = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Of).fromBinary(e, t)
    }
--
        return (new Of).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class Rf extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Rf).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Rf).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Rf, e, t)
--
class Df extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Df).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Df).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Df, e, t)
--
class Pf extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Pf).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Pf).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Pf, e, t)
--
class Bf extends C {
    constructor(e) {
        super(),
        this.maxOutputBytes = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Bf).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Bf).fromJson(e, t)
    }
--
        return (new Bf).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Ff extends C {
    constructor(e) {
        super(),
        this.subagentModel = Nr.MODEL_UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ff).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ff).fromJson(e, t)
    }
--
        return (new Ff).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class jf extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new jf).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new jf).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(jf, e, t)
--
class Uf extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Uf).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Uf).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Uf, e, t)
--
class Yf extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Yf).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Yf).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Yf, e, t)
--
class Hf extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Hf).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Hf).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Hf, e, t)
--
class qf extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new qf).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new qf).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(qf, e, t)
--
class Gf extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Gf).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Gf).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Gf, e, t)
--
class Jf extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Jf).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Jf).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Jf, e, t)
--
class Vf extends C {
    constructor(e) {
        super(),
        this.knowledgeBaseItems = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Vf).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Vf).fromJson(e, t)
    }
--
        return (new Vf).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class zf extends C {
    constructor(e) {
        super(),
        this.plannerTypeConfig = {
            case: void 0
        },
        this.planModel = Nr.MODEL_UNSPECIFIED,
        this.maxIterations = 0,
        this.maxStepParseRetries = 0,
        this.maxOutputTokens = 0,
        this.truncationThresholdTokens = 0,
        this.numParallelRollouts = 0,
--
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
class Wf extends C {
    constructor(e) {
        super(),
        this.identifier = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Wf).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Wf).fromJsonString(e, t)
--
class Zf extends C {
    constructor(e) {
        super(),
        this.confirm = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Zf).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Zf).fromJson(e, t)
    }
--
        return (new Zf).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Kf extends C {
    constructor(e) {
        super(),
        this.subdomain = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Kf).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Kf).fromJson(e, t)
    }
--
        return (new Kf).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class $f extends C {
    constructor(e) {
        super(),
        this.cancel = !1,
        this.provider = "",
        this.subdomain = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new $f).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new $f).fromJsonString(e, t)
--
class Xf extends C {
    constructor(e) {
        super(),
        this.providerOptions = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Xf).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Xf).fromJson(e, t)
    }
--
        return (new Xf).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Qf extends C {
    constructor(e) {
        super(),
        this.interaction = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Qf).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Qf).fromJsonString(e, t)
--
class eh extends C {
    constructor(e) {
        super(),
        this.trajectoryId = "",
        this.stepIndex = 0,
        this.interaction = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new eh).fromBinary(e, t)
--
    static fromJson(e, t) {
        return (new eh).fromJson(e, t)
    }
--
class th extends C {
    constructor(e) {
        super(),
        this.input = 0,
        this.output = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new th).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new th).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new th).fromJsonString(e, t)
    }
--
class nh extends C {
    constructor(e) {
        super(),
        this.output = {},
        this.outputString = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new nh).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new nh).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new nh).fromJsonString(e, t)
    }
--
class rh extends C {
    constructor(e) {
        super(),
        this.userProvided = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new rh).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new rh).fromJson(e, t)
    }
--
        return (new rh).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class ah extends C {
    constructor(e) {
        super(),
        this.checkpointIndex = 0,
        this.intentOnly = !1,
        this.includedStepIndexStart = 0,
        this.includedStepIndexEnd = 0,
        this.conversationTitle = "",
        this.userIntent = "",
        this.sessionSummary = "",
        this.codeChangeSummary = "",
        this.editedFileMap = {},
--
        this.memorySummary = "",
        Ze.util.initPartial(e, this)
    }
--
class oh extends C {
    constructor(e) {
        super(),
        this.tokenThreshold = 0,
        this.maxOverheadRatio = 0,
        this.movingWindowSize = 0,
        this.maxTokenLimit = 0,
        this.maxOutputTokens = 0,
        this.checkpointModel = Nr.MODEL_UNSPECIFIED,
        this.type = kl.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
--
        return (new oh).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
class ih extends C {
    constructor(e) {
        super(),
        this.ccis = [],
        this.numTokensProcessed = 0,
        this.numItemsScored = 0,
        this.searchType = Ml.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ih).fromBinary(e, t)
    }
--
        return (new ih).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class sh extends C {
    constructor(e) {
        super(),
        this.fuzzyMatch = "",
        this.editDistance = 0,
        this.relEditDistance = 0,
        this.numMatches = 0,
        this.isNonExact = !1,
        this.boundaryLinesMatch = !1,
        this.error = !1,
        this.errorStr = "",
        this.fastApplyFixable = !1,
--
    }
    static fromBinary(e, t) {
        return (new sh).fromBinary(e, t)
--
class lh extends C {
    constructor(e) {
        super(),
        this.fallbackAttempted = !1,
        this.fallbackError = "",
        this.heuristicFailure = Il.UNSPECIFIED,
        this.fastApplyPrompt = "",
        this.numFastApplyEditsMasked = 0,
        this.fallbackMatchHadNoDiff = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
    }
    static fromJson(e, t) {
        return (new lh).fromJson(e, t)
--
class ch extends C {
    constructor(e) {
        super(),
        this.useFastApply = !1,
        this.acknowledgementType = Ll.UNSPECIFIED,
        this.blocking = !1,
        this.heuristicFailure = Il.UNSPECIFIED,
        this.codeInstruction = "",
        this.markdownLanguage = "",
        this.dryRun = !1,
        this.lintErrors = [],
        this.persistentLintErrors = [],
--
        this.lintErrorIdsAimingToFix = [],
        this.targetFileHasCarriageReturns = !1,
        this.targetFileHasAllCarriageReturns = !1,
--
class uh extends C {
    constructor(e) {
        super(),
        this.codeInstruction = "",
        this.markdownLanguage = "",
        this.blocking = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new uh).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new uh).fromJsonString(e, t)
--
class dh extends C {
    constructor(e) {
        super(),
        this.commitMessage = "",
        this.commitHash = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new dh).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new dh).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new dh).fromJsonString(e, t)
    }
--
class mh extends C {
    constructor(e) {
        super(),
        this.relativePath = "",
        this.lineNumber = 0,
        this.content = "",
        this.absolutePath = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new mh).fromBinary(e, t)
    }
--
        return (new mh).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class ph extends C {
    constructor(e) {
        super(),
        this.informCciList = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ph).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ph).fromJson(e, t)
    }
--
        return (new ph).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class fh extends C {
    constructor(e) {
        super(),
        this.cciRatio = 0,
        this.randomize = !1,
        this.manualSeed = 0,
        this.mode = Nl.UNSPECIFIED,
        this.isCertain = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new fh).fromBinary(e, t)
--
    static fromJson(e, t) {
        return (new fh).fromJson(e, t)
    }
--
class hh extends C {
    constructor(e) {
        super(),
        this.numSamplesPerCommit = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new hh).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new hh).fromJson(e, t)
    }
--
        return (new hh).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class _h extends C {
    constructor(e) {
        super(),
        this.searchPathUri = "",
        this.query = "",
        this.matchPerLine = !1,
        this.includes = [],
        this.caseInsensitive = !1,
        this.results = [],
        this.totalResults = 0,
        this.rawOutput = "",
        this.commandRun = "",
--
        this.grepError = "",
        Ze.util.initPartial(e, this)
    }
--
class gh extends C {
    constructor(e) {
        super(),
        this.searchDirectory = "",
        this.pattern = "",
        this.excludes = [],
        this.type = Ol.UNSPECIFIED,
        this.maxDepth = 0,
        this.extensions = [],
        this.fullPath = !1,
        this.truncatedOutput = "",
        this.truncatedTotalResults = 0,
--
        this.rawOutput = "",
        this.commandRun = "",
        this.includes = [],
--
class yh extends C {
    constructor(e) {
        super(),
        this.absolutePathUri = "",
        this.startLine = 0,
        this.endLine = 0,
        this.includeSummaryOfOtherLines = !1,
        this.hasLineNumbers = !1,
        this.maxTokens = 0,
        this.async = !1,
        this.content = "",
        this.rawContent = "",
--
    }
    static fromBinary(e, t) {
        return (new yh).fromBinary(e, t)
--
class Ah extends C {
    constructor(e) {
        super(),
        this.name = "",
        this.isDir = !1,
        this.numChildren = 0,
        this.sizeBytes = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ah).fromBinary(e, t)
    }
--
        return (new Ah).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class Eh extends C {
    constructor(e) {
        super(),
        this.directoryPathUri = "",
        this.children = [],
        this.results = [],
        this.dirNotFound = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Eh).fromBinary(e, t)
    }
--
        return (new Eh).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class bh extends C {
    constructor(e) {
        super(),
        this.message = "",
        this.path = "",
        this.line = 0,
        this.column = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new bh).fromBinary(e, t)
    }
--
        return (new bh).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class vh extends C {
    constructor(e) {
        super(),
        this.query = "",
        this.inputClusters = [],
        this.repoName = "",
        this.scores = [],
        this.outputClusters = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new vh).fromBinary(e, t)
--
    static fromJson(e, t) {
        return (new vh).fromJson(e, t)
    }
--
class wh extends C {
    constructor(e) {
        super(),
        this.clusters = [],
        this.repoName = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new wh).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new wh).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new wh).fromJsonString(e, t)
    }
--
class Sh extends C {
    constructor(e) {
        super(),
        this.tool = Rl.UNSPECIFIED,
        this.inputSpec = "",
        this.options = {},
        this.target = "",
        this.artifactPath = "",
        this.artifactIsExecutable = !1,
        this.errors = [],
        this.warnings = [],
        Ze.util.initPartial(e, this)
--
    static fromBinary(e, t) {
        return (new Sh).fromBinary(e, t)
    }
--
class Th extends C {
    constructor(e) {
        super(),
        this.promptFraction = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Th).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Th).fromJson(e, t)
    }
--
        return (new Th).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class xh extends C {
    constructor(e) {
        super(),
        this.query = "",
        this.userResponse = "",
        this.items = [],
        this.images = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new xh).fromBinary(e, t)
    }
--
        return (new xh).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class Ch extends C {
    constructor(e) {
        super(),
        this.openDocuments = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ch).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ch).fromJson(e, t)
    }
--
        return (new Ch).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class kh extends C {
    constructor(e) {
        super(),
        this.response = "",
        this.thinking = "",
        this.signature = "",
        this.thinkingRedacted = !1,
        this.messageId = "",
        this.knowledgeBaseItems = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
    }
    static fromJson(e, t) {
        return (new kh).fromJson(e, t)
--
class Mh extends C {
    constructor(e) {
        super(),
        this.absolutePath = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Mh).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Mh).fromJson(e, t)
    }
--
        return (new Mh).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Lh extends C {
    constructor(e) {
        super(),
        this.absoluteUri = "",
        this.nodePaths = [],
        this.ccis = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Lh).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Lh).fromJsonString(e, t)
--
class Ih extends C {
    constructor(e) {
        super(),
        this.targetFileUri = "",
        this.codeContent = [],
        this.fileCreated = !1,
        this.acknowledgementType = Ll.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ih).fromBinary(e, t)
    }
--
        return (new Ih).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class Nh extends C {
    constructor(e) {
        super(),
        this.queries = [],
        this.connectorTypes = [],
        this.aggregateIds = [],
        this.knowledgeBaseGroups = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Nh).fromBinary(e, t)
    }
--
        return (new Nh).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class Oh extends C {
    constructor(e) {
        super(),
        this.urls = [],
        this.documentIds = [],
        this.knowledgeBaseItems = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Oh).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Oh).fromJsonString(e, t)
--
class Rh extends C {
    constructor(e) {
        super(),
        this.suggestions = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Rh).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Rh).fromJson(e, t)
    }
--
        return (new Rh).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Dh extends C {
    constructor(e) {
        super(),
        this.shouldShowModel = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Dh).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Dh).fromJson(e, t)
    }
--
        return (new Dh).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Ph extends C {
    constructor(e) {
        super(),
        this.clusterId = "",
        this.query = "",
        this.ccis = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ph).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Ph).fromJsonString(e, t)
--
class Bh extends C {
    constructor(e) {
        super(),
        this.full = "",
        this.truncated = "",
        this.numLinesAbove = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Bh).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Bh).fromJsonString(e, t)
--
class Fh extends C {
    constructor(e) {
        super(),
        this.commandLine = "",
        this.cwd = "",
        this.blocking = !1,
        this.waitMsBeforeAsync = F.zero,
        this.shouldAutoRun = !1,
        this.requestedTerminalId = "",
        this.commandId = "",
        this.userRejected = !1,
        this.autoRunDecision = Dl.UNSPECIFIED,
--
        this.usedIdeTerminal = !1,
        this.rawDebugOutput = "",
        this.command = "",
--
class jh extends C {
    constructor(e) {
        super(),
        this.absoluteUri = "",
        this.relatedFileAbsoluteUris = [],
        this.scores = [],
        this.relatedFileError = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new jh).fromBinary(e, t)
    }
--
        return (new jh).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class Uh extends C {
    constructor(e) {
        super(),
        this.url = "",
        this.resolvedUrl = "",
        this.latencyMs = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Uh).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Uh).fromJsonString(e, t)
--
class Yh extends C {
    constructor(e) {
        super(),
        this.identifier = "",
        this.connectorType = ul.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Yh).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Yh).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Yh).fromJsonString(e, t)
    }
--
class Hh extends C {
    constructor(e) {
        super(),
        this.documentId = "",
        this.position = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Hh).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Hh).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Hh).fromJsonString(e, t)
    }
--
class qh extends C {
    constructor(e) {
        super(),
        this.query = "",
        this.domain = "",
        this.webDocuments = [],
        this.webSearchUrl = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new qh).fromBinary(e, t)
    }
--
        return (new qh).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class Gh extends C {
    constructor(e) {
        super(),
        this.projectPath = "",
        this.deploymentConfigUri = "",
        this.missingFileUris = [],
        this.willUploadNodeModules = !1,
        this.willUploadDist = !1,
        this.ignoreFileUris = [],
        this.numFilesToUpload = 0,
        this.envFileUris = [],
        Ze.util.initPartial(e, this)
--
    static fromBinary(e, t) {
        return (new Gh).fromBinary(e, t)
    }
--
class Jh extends C {
    constructor(e) {
        super(),
        this.projectPath = "",
        this.subdomain = "",
        this.projectId = "",
        this.framework = "",
        this.userConfirmed = !1,
        this.fileUploadStatus = {},
        this.deploymentConfigUri = "",
        this.subdomainForProjectId = "",
        this.subdomainUserSpecified = "",
--
        this.projectIdUsed = "",
        this.claimUrl = "",
        Ze.util.initPartial(e, this)
--
class Vh extends C {
    constructor(e) {
        super(),
        this.windsurfDeploymentId = "",
        this.buildStatus = Da.UNSPECIFIED,
        this.buildError = "",
        this.buildLogs = "",
        this.isClaimed = !1,
        this.claimUrl = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
    }
    static fromJson(e, t) {
        return (new Vh).fromJson(e, t)
--
class zh extends C {
    constructor(e) {
        super(),
        this.content = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new zh).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new zh).fromJson(e, t)
    }
--
        return (new zh).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Wh extends C {
    constructor(e) {
        super(),
        this.cascadeId = "",
        this.status = bl.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Wh).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Wh).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Wh).fromJsonString(e, t)
    }
--
class Zh extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Zh).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Zh).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Zh, e, t)
--
class Kh extends C {
    constructor(e) {
        super(),
        this.commandId = "",
        this.outputPriority = Bl.UNSPECIFIED,
        this.outputCharacterCount = 0,
        this.waitDurationSeconds = 0,
        this.status = El.UNSPECIFIED,
        this.stdout = "",
        this.stderr = "",
        this.combined = "",
        this.waitedDurationSeconds = 0,
--
    }
    static fromBinary(e, t) {
        return (new Kh).fromBinary(e, t)
--
class $h extends C {
    constructor(e) {
        super(),
        this.memoryId = "",
        this.title = "",
        this.source = Fl.UNSPECIFIED,
        this.memory = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
    }
    static fromJson(e, t) {
        return (new $h).fromJson(e, t)
--
class Xh extends C {
    constructor(e) {
        super(),
        this.tags = [],
        this.userTriggered = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Xh).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Xh).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Xh).fromJsonString(e, t)
    }
--
class Qh extends C {
    constructor(e) {
        super(),
        this.content = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Qh).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Qh).fromJson(e, t)
    }
--
        return (new Qh).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class e_ extends C {
    constructor(e) {
        super(),
        this.scope = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new e_).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new e_).fromJsonString(e, t)
--
class t_ extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new t_).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new t_).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(t_, e, t)
--
class n_ extends C {
    constructor(e) {
        super(),
        this.corpusNames = [],
        this.baseDirUris = [],
        this.repoBaseDirUri = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new n_).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new n_).fromJsonString(e, t)
--
class r_ extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new r_).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new r_).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(r_, e, t)
--
class a_ extends C {
    constructor(e) {
        super(),
        this.memoryId = "",
        this.action = jl.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new a_).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new a_).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new a_).fromJsonString(e, t)
    }
--
class o_ extends C {
    constructor(e) {
        super(),
        this.runSubagent = !1,
        this.addUserMemories = !1,
        this.addAutoCascadeMemories = !1,
        this.cascadeMemorySummary = "",
        this.userMemorySummary = "",
        this.autoCascadeMemorySummary = "",
        this.reason = "",
        this.showReason = !1,
        this.retrievedMemories = [],
--
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
class i_ extends C {
    constructor(e) {
        super(),
        this.memoryModel = Nr.MODEL_UNSPECIFIED,
        this.numCheckpointsForContext = 0,
        this.numMemoriesToConsider = 0,
        this.maxGlobalCascadeMemories = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new i_).fromBinary(e, t)
    }
--
        return (new i_).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class s_ extends C {
    constructor(e) {
        super(),
        this.maxFilesInPrompt = 0,
        this.maxLinesPerFileInPrompt = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new s_).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new s_).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new s_).fromJsonString(e, t)
    }
--
class l_ extends C {
    constructor(e) {
        super(),
        this.diffBlockSeparationThreshold = F.zero,
        this.handleDeletions = !1,
        this.handleCreations = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new l_).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new l_).fromJsonString(e, t)
--
class c_ extends C {
    constructor(e) {
        super(),
        this.conditionOnEditStep = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new c_).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new c_).fromJson(e, t)
    }
--
        return (new c_).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class u_ extends C {
    constructor(e) {
        super(),
        this.numSearchEvents = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new u_).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new u_).fromJson(e, t)
    }
--
        return (new u_).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class d_ extends C {
    constructor(e) {
        super(),
        this.stepTypeAllowList = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new d_).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new d_).fromJson(e, t)
    }
--
        return (new d_).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class m_ extends C {
    constructor(e) {
        super(),
        this.recipeId = "",
        this.systemPrompt = "",
        this.requiresWriteMode = !1,
        this.isBuiltin = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new m_).fromBinary(e, t)
    }
--
        return (new m_).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class p_ extends C {
    constructor(e) {
        super(),
        this.recipeId = "",
        this.argumentsJson = "",
        this.output = "",
        this.recipeName = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new p_).fromBinary(e, t)
    }
--
        return (new p_).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class f_ extends C {
    constructor(e) {
        super(),
        this.message = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new f_).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new f_).fromJson(e, t)
    }
--
        return (new f_).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class h_ extends C {
    constructor(e) {
        super(),
        this.body = "",
        this.commitId = "",
        this.path = "",
        this.side = "",
        this.startLine = 0,
        this.endLine = 0,
        this.category = "",
        Ze.util.initPartial(e, this)
    }
--
        return (new h_).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
class __ extends C {
    constructor(e) {
        super(),
        this.serverName = "",
        this.command = "",
        this.args = [],
        this.env = {},
        this.serverIndex = 0,
        this.serverUrl = "",
        this.disabled = !1,
        this.disabledTools = [],
        Ze.util.initPartial(e, this)
--
    static fromBinary(e, t) {
        return (new __).fromBinary(e, t)
    }
--
class g_ extends C {
    constructor(e) {
        super(),
        this.name = "",
        this.version = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new g_).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new g_).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new g_).fromJsonString(e, t)
    }
--
class y_ extends C {
    constructor(e) {
        super(),
        this.serverName = "",
        this.resultString = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new y_).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new y_).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new y_).fromJsonString(e, t)
    }
--
class A_ extends C {
    constructor(e) {
        super(),
        this.status = Ul.UNSPECIFIED,
        this.feedback = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new A_).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new A_).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new A_).fromJsonString(e, t)
    }
--
class E_ extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new E_).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new E_).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(E_, e, t)
--
class b_ extends C {
    constructor(e) {
        super(),
        this.proposalToolCalls = [],
        this.choice = 0,
        this.reason = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new b_).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new b_).fromJsonString(e, t)
--
class v_ extends C {
    constructor(e) {
        super(),
        this.proposalTrajectoryIds = [],
        this.choice = 0,
        this.reason = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new v_).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new v_).fromJsonString(e, t)
--
class w_ extends C {
    constructor(e) {
        super(),
        this.referenceTrajectoryId = "",
        this.referenceStepIndices = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new w_).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new w_).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new w_).fromJsonString(e, t)
    }
--
class S_ extends C {
    constructor(e) {
        super(),
        this.targetUrl = "",
        this.name = "",
        this.proxyUrl = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new S_).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new S_).fromJsonString(e, t)
--
class T_ extends C {
    constructor(e) {
        super(),
        this.status = Yl.UNSPECIFIED,
        this.error = "",
        this.tools = [],
        this.toolErrors = [],
        this.instructions = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new T_).fromBinary(e, t)
--
    static fromJson(e, t) {
        return (new T_).fromJson(e, t)
    }
--
class x_ extends C {
    constructor(e) {
        super(),
        this.maxStepsToJudge = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new x_).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new x_).fromJson(e, t)
    }
--
        return (new x_).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class C_ extends C {
    constructor(e) {
        super(),
        this.absolutePathUri = "",
        this.cciOffset = 0,
        this.ccis = [],
        this.outlineItems = [],
        this.numItemsScanned = 0,
        this.totalCciCount = 0,
        this.numLines = 0,
        this.numBytes = 0,
        this.contents = "",
--
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
class k_ extends C {
    constructor(e) {
        super(),
        this.numSteps = 0,
        this.heuristicPrompts = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new k_).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new k_).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new k_).fromJsonString(e, t)
    }
--
class M_ extends C {
    constructor(e) {
        super(),
        this.heuristic = "",
        this.prompt = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new M_).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new M_).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new M_).fromJsonString(e, t)
    }
--
class L_ extends C {
    constructor(e) {
        super(),
        this.revertedUris = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new L_).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new L_).fromJson(e, t)
    }
--
        return (new L_).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class I_ extends C {
    constructor(e) {
        super(),
        this.length = 0,
        this.tokens = 0,
        this.numSkipped = 0,
        this.numTruncated = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new I_).fromBinary(e, t)
    }
--
        return (new I_).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class N_ extends C {
    constructor(e) {
        super(),
        this.repoName = "",
        this.branch = "",
        this.commit = "",
        this.prUrl = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new N_).fromBinary(e, t)
    }
--
        return (new N_).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class O_ extends C {
    constructor(e) {
        super(),
        this.sessionId = "",
        this.explanation = "",
        this.sshUrl = "",
        this.status = bl.UNSPECIFIED,
        this.summary = "",
        this.sessionKey = "",
        this.gitRepos = [],
        Ze.util.initPartial(e, this)
    }
--
        return (new O_).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
class R_ extends C {
    constructor(e) {
        super(),
        this.url = "",
        this.owner = "",
        this.repo = "",
        this.title = "",
        this.number = "",
        this.ciStatus = Gl.GITHUB_CI_CHECK_STATUS_UNSPECIFIED,
        this.branchStatus = Jl.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
--
        return (new R_).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
class D_ extends C {
    constructor(e) {
        super(),
        this.title = "",
        this.id = "",
        this.link = "",
        this.description = "",
        this.commands = {},
        this.installationCount = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
    }
    static fromJson(e, t) {
        return (new D_).fromJson(e, t)
--
class P_ extends C {
    constructor(e) {
        super(),
        this.variables = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new P_).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new P_).fromJson(e, t)
    }
--
        return (new P_).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class B_ extends C {
    constructor(e) {
        super(),
        this.command = "",
        this.args = [],
        this.env = {},
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new B_).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new B_).fromJsonString(e, t)
--
class F_ extends C {
    constructor(e) {
        super(),
        this.name = "",
        this.title = "",
        this.description = "",
        this.link = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new F_).fromBinary(e, t)
    }
--
        return (new F_).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class j_ extends C {
    constructor(e) {
        super(),
        this.os = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new j_).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new j_).fromJson(e, t)
    }
--
        return (new j_).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class U_ extends C {
    constructor(e) {
        super(),
        this.plugins = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new U_).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new U_).fromJson(e, t)
    }
--
        return (new U_).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Y_ extends C {
    constructor(e) {
        super(),
        this.pluginId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Y_).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Y_).fromJson(e, t)
    }
--
        return (new Y_).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class H_ extends C {
    constructor(e) {
        super(),
        this.installationCount = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new H_).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new H_).fromJson(e, t)
    }
--
        return (new H_).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class q_ extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new q_).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new q_).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(q_, e, t)
--
class G_ extends C {
    constructor(e) {
        super(),
        this.pullRequestInfos = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new G_).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new G_).fromJson(e, t)
    }
--
        return (new G_).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class J_ extends C {
    constructor(e) {
        super(),
        this.githubToken = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new J_).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new J_).fromJson(e, t)
    }
--
        return (new J_).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class V_ extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new V_).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new V_).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(V_, e, t)
--
class z_ extends C {
    constructor(e) {
        super(),
        this.items = [],
        this.images = [],
        this.sessionKey = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new z_).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new z_).fromJsonString(e, t)
--
class W_ extends C {
    constructor(e) {
        super(),
        this.sessionKey = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new W_).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new W_).fromJson(e, t)
    }
--
        return (new W_).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Z_ extends C {
    constructor(e) {
        super(),
        this.sessionKey = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Z_).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Z_).fromJson(e, t)
    }
--
        return (new Z_).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class K_ extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new K_).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new K_).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(K_, e, t)
--
class $_ extends C {
    constructor(e) {
        super(),
        this.gitRepoInfos = [],
        this.workspaceUris = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new $_).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new $_).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new $_).fromJsonString(e, t)
    }
--
class X_ extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new X_).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new X_).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(X_, e, t)
--
class Q_ extends C {
    constructor(e) {
        super(),
        this.gitRepoInfos = [],
        this.workspaceUris = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Q_).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Q_).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Q_).fromJsonString(e, t)
    }
--
class eg extends C {
    constructor(e) {
        super(),
        this.validationStates = [],
        this.canMerge = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new eg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new eg).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new eg).fromJsonString(e, t)
    }
--
class tg extends C {
    constructor(e) {
        super(),
        this.gitRepoInfos = [],
        this.workspaceUris = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new tg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new tg).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new tg).fromJsonString(e, t)
    }
--
class ng extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ng).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ng).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(ng, e, t)
--
class rg extends C {
    constructor(e) {
        super(),
        this.planId = "",
        this.summary = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new rg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new rg).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new rg).fromJsonString(e, t)
    }
--
class ag extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ag).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ag).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(ag, e, t)
--
class og extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new og).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new og).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(og, e, t)
--
class ig extends C {
    constructor(e) {
        super(),
        this.plans = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ig).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ig).fromJson(e, t)
    }
--
        return (new ig).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class sg extends C {
    constructor(e) {
        super(),
        this.cortexId = "",
        this.feedback = "",
        this.rating = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new sg).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new sg).fromJsonString(e, t)
--
class lg extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new lg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new lg).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(lg, e, t)
--
class cg extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new cg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new cg).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(cg, e, t)
--
class ug extends C {
    constructor(e) {
        super(),
        this.cortexId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ug).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ug).fromJson(e, t)
    }
--
        return (new ug).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class dg extends C {
    constructor(e) {
        super(),
        this.cortexId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new dg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new dg).fromJson(e, t)
    }
--
        return (new dg).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class mg extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new mg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new mg).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(mg, e, t)
--
class pg extends C {
    constructor(e) {
        super(),
        this.planId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new pg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new pg).fromJson(e, t)
    }
--
        return (new pg).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class fg extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new fg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new fg).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(fg, e, t)
--
class hg extends C {
    constructor(e) {
        super(),
        this.planId = "",
        this.feedback = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new hg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new hg).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new hg).fromJsonString(e, t)
    }
--
class _g extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new _g).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new _g).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(_g, e, t)
--
class gg extends C {
    constructor(e) {
        super(),
        this.planId = "",
        this.actionIndex = 0,
        this.completionId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new gg).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new gg).fromJsonString(e, t)
--
class yg extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new yg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new yg).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(yg, e, t)
--
class Ag extends C {
    constructor(e) {
        super(),
        this.planId = "",
        this.actionIndex = 0,
        this.completionId = "",
        this.applyActionType = Vl.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ag).fromBinary(e, t)
    }
--
        return (new Ag).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class Eg extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Eg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Eg).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Eg, e, t)
--
class bg extends C {
    constructor(e) {
        super(),
        this.planId = "",
        this.actionIndex = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new bg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new bg).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new bg).fromJsonString(e, t)
    }
--
class vg extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new vg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new vg).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(vg, e, t)
--
class wg extends C {
    constructor(e) {
        super(),
        this.requestedModelId = Nr.MODEL_UNSPECIFIED,
        this.selectionStartLine = F.zero,
        this.selectionEndLine = F.zero,
        this.commandText = "",
        this.requestSource = Sa.UNSPECIFIED,
        this.parentCompletionId = "",
        this.diffType = Zs.UNSPECIFIED,
        this.diagnostics = [],
        this.supercompleteTriggerCondition = Ma.UNSPECIFIED,
--
        this.clipboardEntry = "",
        this.intellisenseSuggestions = [],
        Ze.util.initPartial(e, this)
--
class Sg extends C {
    constructor(e) {
        super(),
        this.completionId = "",
        this.promptId = "",
        this.selectionStartLine = F.zero,
        this.selectionEndLine = F.zero,
        this.score = 0,
        this.stopReason = Rr.UNSPECIFIED,
        this.rawText = "",
        Ze.util.initPartial(e, this)
    }
--
        return (new Sg).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
class Tg extends C {
    constructor(e) {
        super(),
        this.threshold = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Tg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Tg).fromJson(e, t)
    }
--
        return (new Tg).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class xg extends C {
    constructor(e) {
        super(),
        this.otherDocuments = [],
        this.disableCache = !1,
        this.oracleItems = [],
        this.modelName = "",
        this.requestedModelId = Nr.MODEL_UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new xg).fromBinary(e, t)
--
    static fromJson(e, t) {
        return (new xg).fromJson(e, t)
    }
--
class Cg extends C {
    constructor(e) {
        super(),
        this.completionItems = [],
        this.filteredCompletionItems = [],
        this.modelTag = "",
        this.promptId = "",
        this.codeRanges = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Cg).fromBinary(e, t)
--
    static fromJson(e, t) {
        return (new Cg).fromJson(e, t)
    }
--
class kg extends C {
    constructor(e) {
        super(),
        this.completionId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new kg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new kg).fromJson(e, t)
    }
--
        return (new kg).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Mg extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Mg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Mg).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Mg, e, t)
--
class Lg extends C {
    constructor(e) {
        super(),
        this.isAccepted = !1,
        this.feedbackDelayMs = F.zero,
        this.completionId = "",
        this.promptId = "",
        this.source = xr.UNSPECIFIED,
        this.viewColumnsOpen = F.zero,
        this.isIntentionalReject = !1,
        this.isPartial = !1,
        this.midstreamAutocompleteText = "",
--
    }
    static fromBinary(e, t) {
        return (new Lg).fromBinary(e, t)
--
class Ig extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ig).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ig).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Ig, e, t)
--
class Ng extends C {
    constructor(e) {
        super(),
        this.previousErrorTraces = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ng).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ng).fromJson(e, t)
    }
--
        return (new Ng).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Og extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Og).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Og).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Og, e, t)
--
class Rg extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Rg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Rg).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Rg, e, t)
--
class Dg extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Dg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Dg).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Dg, e, t)
--
class Pg extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Pg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Pg).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Pg, e, t)
--
class Bg extends C {
    constructor(e) {
        super(),
        this.clientModelConfigs = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Bg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Bg).fromJson(e, t)
    }
--
        return (new Bg).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Fg extends C {
    constructor(e) {
        super(),
        this.teamId = "",
        this.cascadeModelLabels = [],
        this.commandModelLabels = [],
        this.extensionModelLabels = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Fg).fromBinary(e, t)
    }
--
        return (new Fg).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class jg extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new jg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new jg).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(jg, e, t)
--
class Ug extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ug).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ug).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Ug, e, t)
--
class Yg extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Yg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Yg).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Yg, e, t)
--
class Hg extends C {
    constructor(e) {
        super(),
        this.templates = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Hg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Hg).fromJson(e, t)
    }
--
        return (new Hg).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class qg extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new qg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new qg).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(qg, e, t)
--
class Gg extends C {
    constructor(e) {
        super(),
        this.clientModelConfigs = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Gg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Gg).fromJson(e, t)
    }
--
        return (new Gg).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Jg extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Jg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Jg).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Jg, e, t)
--
class Vg extends C {
    constructor(e) {
        super(),
        this.models = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Vg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Vg).fromJson(e, t)
    }
--
        return (new Vg).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class zg extends C {
    constructor(e) {
        super(),
        this.apiKey = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new zg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new zg).fromJson(e, t)
    }
--
        return (new zg).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Wg extends C {
    constructor(e) {
        super(),
        this.lspPort = 0,
        this.chatWebServerPort = 0,
        this.chatClientPort = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Wg).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Wg).fromJsonString(e, t)
--
class Zg extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Zg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Zg).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Zg, e, t)
--
class Kg extends C {
    constructor(e) {
        super(),
        this.authToken = "",
        this.uuid = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Kg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Kg).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Kg).fromJsonString(e, t)
    }
--
class $g extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new $g).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new $g).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals($g, e, t)
--
class Xg extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Xg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Xg).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Xg, e, t)
--
class Qg extends C {
    constructor(e) {
        super(),
        this.requestId = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Qg).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Qg).fromJson(e, t)
    }
--
        return (new Qg).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class ey extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ey).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ey).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(ey, e, t)
--
class ty extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ty).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ty).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(ty, e, t)
--
class ny extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ny).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ny).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(ny, e, t)
--
class ry extends C {
    constructor(e) {
        super(),
        this.projectName = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ry).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ry).fromJson(e, t)
    }
--
        return (new ry).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class ay extends C {
    constructor(e) {
        super(),
        this.status = Ba.UNSPECIFIED,
        this.invalidReason = "",
        this.alternativeNames = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ay).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new ay).fromJsonString(e, t)
--
class oy extends C {
    constructor(e) {
        super(),
        this.workspaceUri = "",
        this.projectName = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new oy).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new oy).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new oy).fromJsonString(e, t)
    }
--
class iy extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new iy).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new iy).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(iy, e, t)
--
class sy extends C {
    constructor(e) {
        super(),
        this.firebaseIdToken = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new sy).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new sy).fromJson(e, t)
    }
--
        return (new sy).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class ly extends C {
    constructor(e) {
        super(),
        this.apiKey = "",
        this.name = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ly).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ly).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new ly).fromJsonString(e, t)
    }
--
class cy extends C {
    constructor(e) {
        super(),
        this.query = "",
        this.numResults = 0,
        this.numClusters = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new cy).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new cy).fromJsonString(e, t)
--
class uy extends C {
    constructor(e) {
        super(),
        this.clusters = [],
        this.searchId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new uy).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new uy).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new uy).fromJsonString(e, t)
    }
--
class dy extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new dy).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new dy).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(dy, e, t)
--
class my extends C {
    constructor(e) {
        super(),
        this.languages = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new my).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new my).fromJson(e, t)
    }
--
        return (new my).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class py extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new py).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new py).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(py, e, t)
--
class fy extends C {
    constructor(e) {
        super(),
        this.progressBars = {},
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new fy).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new fy).fromJson(e, t)
    }
--
        return (new fy).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class hy extends C {
    constructor(e) {
        super(),
        this.resultId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new hy).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new hy).fromJson(e, t)
    }
--
        return (new hy).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class _y extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new _y).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new _y).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(_y, e, t)
--
class gy extends C {
    constructor(e) {
        super(),
        this.clusterSearchId = "",
        this.exactSearchId = "",
        this.searchResultIds = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new gy).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new gy).fromJsonString(e, t)
--
class yy extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new yy).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new yy).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(yy, e, t)
--
class Ay extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ay).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ay).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Ay, e, t)
--
class Ey extends C {
    constructor(e) {
        super(),
        this.activeWorkspaces = [],
        this.ignoredWorkspaces = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ey).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ey).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Ey).fromJsonString(e, t)
    }
--
class by extends C {
    constructor(e) {
        super(),
        this.openDocumentFilepathsMigrateMeToUri = [],
        this.openDocumentUris = [],
        this.otherDocuments = [],
        this.workspacePathsMigrateMeToUri = [],
        this.workspaceUris = [],
        this.blocking = !1,
        this.ideAction = zl.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
--
        return (new by).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
class vy extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new vy).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new vy).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(vy, e, t)
--
class wy extends C {
    constructor(e) {
        super(),
        this.query = "",
        this.fuzzyMatch = !1,
        this.allowedTypes = [],
        this.maxItems = 0,
        this.caseInsensitive = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new wy).fromBinary(e, t)
--
    static fromJson(e, t) {
        return (new wy).fromJson(e, t)
    }
--
class Sy extends C {
    constructor(e) {
        super(),
        this.matchedItems = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Sy).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Sy).fromJson(e, t)
    }
--
        return (new Sy).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Ty extends C {
    constructor(e) {
        super(),
        this.query = "",
        this.fuzzyMatch = !1,
        this.maxItems = 0,
        this.caseInsensitive = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ty).fromBinary(e, t)
    }
--
        return (new Ty).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class xy extends C {
    constructor(e) {
        super(),
        this.matchedRepositories = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new xy).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new xy).fromJson(e, t)
    }
--
        return (new xy).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Cy extends C {
    constructor(e) {
        super(),
        this.numTokensInIntent = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Cy).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Cy).fromJson(e, t)
    }
--
        return (new Cy).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class ky extends C {
    constructor(e) {
        super(),
        this.chatMessage = "",
        this.requestedModelId = Nr.MODEL_UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ky).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ky).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new ky).fromJsonString(e, t)
    }
--
class My extends C {
    constructor(e) {
        super(),
        this.tokenCount = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new My).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new My).fromJson(e, t)
    }
--
        return (new My).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Ly extends C {
    constructor(e) {
        super(),
        this.messageId = "",
        this.feedback = Ks.FEEDBACK_TYPE_UNSPECIFIED,
        this.reason = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ly).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Ly).fromJsonString(e, t)
--
class Iy extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Iy).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Iy).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Iy, e, t)
--
class Ny extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ny).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ny).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Ny, e, t)
--
class Oy extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Oy).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Oy).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Oy, e, t)
--
class Ry extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ry).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ry).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Ry, e, t)
--
class Dy extends C {
    constructor(e) {
        super(),
        this.experiments = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Dy).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Dy).fromJson(e, t)
    }
--
        return (new Dy).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Py extends C {
    constructor(e) {
        super(),
        this.timeZone = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Py).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Py).fromJson(e, t)
    }
--
        return (new Py).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class By extends C {
    constructor(e) {
        super(),
        this.completionsByDay = [],
        this.completionsByLanguage = [],
        this.chatsByModel = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new By).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new By).fromJsonString(e, t)
--
class Fy extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Fy).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Fy).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Fy, e, t)
--
class jy extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new jy).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new jy).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(jy, e, t)
--
class Uy extends C {
    constructor(e) {
        super(),
        this.apiKey = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Uy).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Uy).fromJson(e, t)
    }
--
        return (new Uy).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Yy extends C {
    constructor(e) {
        super(),
        this.profilePictureUrl = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Yy).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Yy).fromJson(e, t)
    }
--
        return (new Yy).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Hy extends C {
    constructor(e) {
        super(),
        this.promptId = "",
        this.code = "",
        this.timeoutSec = F.zero,
        this.completionText = "",
        this.providerSource = xr.UNSPECIFIED,
        this.completionId = "",
        this.diagnosticSeverity = "",
        Ze.util.initPartial(e, this)
    }
--
        return (new Hy).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
class qy extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new qy).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new qy).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(qy, e, t)
--
class Gy extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Gy).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Gy).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Gy, e, t)
--
class Jy extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Jy).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Jy).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Jy, e, t)
--
class Vy extends C {
    constructor(e) {
        super(),
        this.version = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Vy).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Vy).fromJson(e, t)
    }
--
        return (new Vy).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class zy extends C {
    constructor(e) {
        super(),
        this.path = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new zy).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new zy).fromJson(e, t)
    }
--
        return (new zy).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Wy extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Wy).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Wy).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Wy, e, t)
--
class Zy extends C {
    constructor(e) {
        super(),
        this.functionCaptures = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Zy).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Zy).fromJson(e, t)
    }
--
        return (new Zy).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Ky extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ky).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ky).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Ky, e, t)
--
class $y extends C {
    constructor(e) {
        super(),
        this.classCaptures = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new $y).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new $y).fromJson(e, t)
    }
--
        return (new $y).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Xy extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Xy).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Xy).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Xy, e, t)
--
class Qy extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Qy).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Qy).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Qy, e, t)
--
class eA extends C {
    constructor(e) {
        super(),
        this.state = Wl.UNSPECIFIED,
        this.message = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new eA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new eA).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new eA).fromJsonString(e, t)
    }
--
class tA extends C {
    constructor(e) {
        super(),
        this.promptId = "",
        this.typingAsSuggestedPromptSuffix = "",
        this.completionType = Jr.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new tA).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new tA).fromJsonString(e, t)
--
class nA extends C {
    constructor(e) {
        super(),
        this.clientLatencyMs = F.zero,
        this.promptLatencyMs = F.zero,
        this.promptStageLatencies = [],
        this.debounceLatencyMs = F.zero,
        this.rpcLatencyMs = F.zero,
        this.networkLatencyMs = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
    }
    static fromJson(e, t) {
        return (new nA).fromJson(e, t)
--
class rA extends C {
    constructor(e) {
        super(),
        this.text = "",
        this.deltaCursorOffset = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new rA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new rA).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new rA).fromJsonString(e, t)
    }
--
class aA extends C {
    constructor(e) {
        super(),
        this.text = "",
        this.offset = F.zero,
        this.type = Zl.UNSPECIFIED,
        this.prefix = "",
        this.line = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new aA).fromBinary(e, t)
--
    static fromJson(e, t) {
        return (new aA).fromJson(e, t)
    }
--
class oA extends C {
    constructor(e) {
        super(),
        this.source = Gr.UNSPECIFIED,
        this.completionParts = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new oA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new oA).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new oA).fromJsonString(e, t)
    }
--
class iA extends C {
    constructor(e) {
        super(),
        this.embeddingId = F.zero,
        this.absolutePathMigrateMeToUri = "",
        this.absoluteUri = "",
        this.workspacePaths = [],
        this.similarityScore = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new iA).fromBinary(e, t)
--
    static fromJson(e, t) {
        return (new iA).fromJson(e, t)
    }
--
class sA extends C {
    constructor(e) {
        super(),
        this.searchResults = [],
        this.representativePath = "",
        this.description = "",
        this.meanSimilarityScore = 0,
        this.searchId = "",
        this.resultId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
    }
    static fromJson(e, t) {
        return (new sA).fromJson(e, t)
--
class lA extends C {
    constructor(e) {
        super(),
        this.progress = 0,
        this.text = "",
        this.hidden = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new lA).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new lA).fromJsonString(e, t)
--
class cA extends C {
    constructor(e) {
        super(),
        this.pattern = "",
        this.isMultiline = !1,
        this.isRegExp = !1,
        this.isCaseSensitive = !1,
        this.isWordMatch = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new cA).fromBinary(e, t)
--
    static fromJson(e, t) {
        return (new cA).fromJson(e, t)
    }
--
class uA extends C {
    constructor(e) {
        super(),
        this.folder = "",
        this.includes = [],
        this.excludes = [],
        this.disregardIgnoreFiles = !1,
        this.followSymlinks = !1,
        this.disregardGlobalIgnoreFiles = !1,
        this.disregardParentIgnoreFiles = !1,
        this.maxFileSize = 0,
        this.encoding = "",
--
        this.afterContextLines = 0,
        this.maxResults = 0,
        Ze.util.initPartial(e, this)
--
class dA extends C {
    constructor(e) {
        super(),
        this.matchLines = 0,
        this.charsPerLine = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new dA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new dA).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new dA).fromJsonString(e, t)
    }
--
class mA extends C {
    constructor(e) {
        super(),
        this.absolutePath = "",
        this.relativePath = "",
        this.ranges = [],
        this.resultId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new mA).fromBinary(e, t)
    }
--
        return (new mA).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class pA extends C {
    constructor(e) {
        super(),
        this.text = "",
        this.ranges = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new pA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new pA).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new pA).fromJsonString(e, t)
    }
--
class fA extends C {
    constructor(e) {
        super(),
        this.workspace = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new fA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new fA).fromJson(e, t)
    }
--
        return (new fA).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class hA extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new hA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new hA).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(hA, e, t)
--
class _A extends C {
    constructor(e) {
        super(),
        this.workspace = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new _A).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new _A).fromJson(e, t)
    }
--
        return (new _A).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class gA extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new gA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new gA).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(gA, e, t)
--
class yA extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new yA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new yA).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(yA, e, t)
--
class AA extends C {
    constructor(e) {
        super(),
        this.repoRoot = "",
        this.numAdditions = F.zero,
        this.numDeletions = F.zero,
        this.edits = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new AA).fromBinary(e, t)
    }
--
        return (new AA).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class EA extends C {
    constructor(e) {
        super(),
        this.workspaceEdits = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new EA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new EA).fromJson(e, t)
    }
--
        return (new EA).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class bA extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new bA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new bA).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(bA, e, t)
--
class vA extends C {
    constructor(e) {
        super(),
        this.workspaceUri = "",
        this.gitRootUri = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new vA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new vA).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new vA).fromJsonString(e, t)
    }
--
class wA extends C {
    constructor(e) {
        super(),
        this.homeDirPath = "",
        this.workspaceInfos = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new wA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new wA).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new wA).fromJsonString(e, t)
    }
--
class SA extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new SA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new SA).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(SA, e, t)
--
class TA extends C {
    constructor(e) {
        super(),
        this.repoRoot = "",
        this.commitMessageSummary = "",
        this.commitMessageDescription = "",
        this.changedFilesMigrateMeToUri = [],
        this.changedFileUris = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new TA).fromBinary(e, t)
--
    static fromJson(e, t) {
        return (new TA).fromJson(e, t)
    }
--
class xA extends C {
    constructor(e) {
        super(),
        this.commitMessages = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new xA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new xA).fromJson(e, t)
    }
--
        return (new xA).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class CA extends C {
    constructor(e) {
        super(),
        this.repoRoot = "",
        this.branchName = "",
        this.commitHash = "",
        this.commitMessage = "",
        this.parentCommitHash = "",
        this.authorName = "",
        this.authorEmail = "",
        Ze.util.initPartial(e, this)
    }
--
        return (new CA).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
class kA extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new kA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new kA).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(kA, e, t)
--
class MA extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new MA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new MA).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(MA, e, t)
--
class LA extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new LA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new LA).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(LA, e, t)
--
class IA extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new IA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new IA).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(IA, e, t)
--
class NA extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new NA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new NA).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(NA, e, t)
--
class OA extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new OA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new OA).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(OA, e, t)
--
class RA extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new RA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new RA).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(RA, e, t)
--
class DA extends C {
    constructor(e) {
        super(),
        this.source = ba.UNSPECIFIED,
        this.startOffset = F.zero,
        this.endOffset = F.zero,
        this.modified = !1,
        this.completionId = "",
        this.completionType = Jr.UNSPECIFIED,
        this.providerSource = xr.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
--
        return (new DA).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
class PA extends C {
    constructor(e) {
        super(),
        this.absolutePathMigrateMeToUri = "",
        this.absoluteUri = "",
        this.text = "",
        this.ranges = [],
        this.commit = "",
        this.repoRootMigrateMeToUri = "",
        this.repoRootUri = "",
        Ze.util.initPartial(e, this)
    }
--
        return (new PA).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
class BA extends C {
    constructor(e) {
        super(),
        this.suggestionSources = [],
        this.query = "",
        this.autoExpandFileLimit = F.zero,
        this.maxItems = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new BA).fromBinary(e, t)
    }
--
        return (new BA).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class FA extends C {
    constructor(e) {
        super(),
        this.items = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new FA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new FA).fromJson(e, t)
    }
--
        return (new FA).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class jA extends C {
    constructor(e) {
        super(),
        this.allowedTypes = [],
        this.allowedContextTypes = [],
        this.query = "",
        this.fuzzyMatch = !1,
        this.maxItems = 0,
        this.caseInsensitive = !1,
        this.repoFilter = "",
        this.cancelToken = F.zero,
        Ze.util.initPartial(e, this)
--
    static fromBinary(e, t) {
        return (new jA).fromBinary(e, t)
    }
--
class UA extends C {
    constructor(e) {
        super(),
        this.items = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new UA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new UA).fromJson(e, t)
    }
--
        return (new UA).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class YA extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new YA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new YA).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(YA, e, t)
--
class HA extends C {
    constructor(e) {
        super(),
        this.workspaceFolder = "",
        this.gitRoot = "",
        this.repoName = "",
        this.indexProgress = {},
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new HA).fromBinary(e, t)
    }
--
        return (new HA).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class qA extends C {
    constructor(e) {
        super(),
        this.localIndexes = [],
        this.ignoredLocalWorkspaces = [],
        this.localFilesIndexCapacity = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new qA).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new qA).fromJsonString(e, t)
--
class GA extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new GA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new GA).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(GA, e, t)
--
class JA extends C {
    constructor(e) {
        super(),
        this.forceRefresh = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new JA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new JA).fromJson(e, t)
    }
--
        return (new JA).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class VA extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new VA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new VA).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(VA, e, t)
--
class zA extends C {
    constructor(e) {
        super(),
        this.maxSessions = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new zA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new zA).fromJson(e, t)
    }
--
        return (new zA).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class WA extends C {
    constructor(e) {
        super(),
        this.sessions = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new WA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new WA).fromJson(e, t)
    }
--
        return (new WA).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class ZA extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ZA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ZA).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(ZA, e, t)
--
class KA extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new KA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new KA).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(KA, e, t)
--
class $A extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new $A).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new $A).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals($A, e, t)
--
class XA extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new XA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new XA).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(XA, e, t)
--
class QA extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new QA).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new QA).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(QA, e, t)
--
class eE extends C {
    constructor(e) {
        super(),
        this.baseDirectory = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new eE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new eE).fromJson(e, t)
    }
--
        return (new eE).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class tE extends C {
    constructor(e) {
        super(),
        this.text = "",
        this.type = $l.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new tE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new tE).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new tE).fromJsonString(e, t)
    }
--
class nE extends C {
    constructor(e) {
        super(),
        this.changes = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new nE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new nE).fromJson(e, t)
    }
--
        return (new nE).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class rE extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new rE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new rE).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(rE, e, t)
--
class aE extends C {
    constructor(e) {
        super(),
        this.data = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new aE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new aE).fromJson(e, t)
    }
--
        return (new aE).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class oE extends C {
    constructor(e) {
        super(),
        this.fontFamily = "",
        this.themeName = "",
        this.lineHeight = 0,
        this.themeType = Xl.UNSPECIFIED,
        this.fontSize = 0,
        this.shortcut = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
    }
    static fromJson(e, t) {
        return (new oE).fromJson(e, t)
--
class iE extends C {
    constructor(e) {
        super(),
        this.language = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new iE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new iE).fromJson(e, t)
    }
--
        return (new iE).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class sE extends C {
    constructor(e) {
        super(),
        this.width = 0,
        this.height = 0,
        this.dpmm = 0,
        this.scale = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new sE).fromBinary(e, t)
    }
--
        return (new sE).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class lE extends C {
    constructor(e) {
        super(),
        this.background = "",
        this.text = "",
        this.whitespace = "",
        this.other = "",
        this.literal = "",
        this.literalString = "",
        this.number = "",
        this.operator = "",
        this.punctuation = "",
--
        this.name = "",
        this.keyword = "",
        this.comment = "",
--
class cE extends C {
    constructor(e) {
        super(),
        this.actionType = ka.UNSPECIFIED,
        this.completed = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new cE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new cE).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new cE).fromJsonString(e, t)
    }
--
class uE extends C {
    constructor(e) {
        super(),
        this.hasSkipped = !1,
        this.items = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new uE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new uE).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new uE).fromJsonString(e, t)
    }
--
class dE extends C {
    constructor(e) {
        super(),
        this.clearHistory = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new dE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new dE).fromJson(e, t)
    }
--
        return (new dE).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class mE extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new mE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new mE).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(mE, e, t)
--
class pE extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new pE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new pE).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(pE, e, t)
--
class fE extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new fE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new fE).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(fE, e, t)
--
class hE extends C {
    constructor(e) {
        super(),
        this.includeAllTrajectories = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new hE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new hE).fromJson(e, t)
    }
--
        return (new hE).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class _E extends C {
    constructor(e) {
        super(),
        this.mainline = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new _E).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new _E).fromJson(e, t)
    }
--
        return (new _E).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class gE extends C {
    constructor(e) {
        super(),
        this.mainlineTrajectoryId = "",
        this.blocking = !1,
        this.fullRefresh = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new gE).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new gE).fromJsonString(e, t)
--
class yE extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new yE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new yE).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(yE, e, t)
--
class AE extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new AE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new AE).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(AE, e, t)
--
class EE extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new EE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new EE).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(EE, e, t)
--
class bE extends C {
    constructor(e) {
        super(),
        this.source = hl.UNSPECIFIED,
        this.trajectoryType = _l.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new bE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new bE).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new bE).fromJsonString(e, t)
    }
--
class vE extends C {
    constructor(e) {
        super(),
        this.cascadeId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new vE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new vE).fromJson(e, t)
    }
--
        return (new vE).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class wE extends C {
    constructor(e) {
        super(),
        this.cascadeId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new wE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new wE).fromJson(e, t)
    }
--
        return (new wE).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class SE extends C {
    constructor(e) {
        super(),
        this.status = bl.UNSPECIFIED,
        this.numTotalSteps = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new SE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new SE).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new SE).fromJsonString(e, t)
    }
--
class TE extends C {
    constructor(e) {
        super(),
        this.cascadeId = "",
        this.stepOffset = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new TE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new TE).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new TE).fromJsonString(e, t)
    }
--
class xE extends C {
    constructor(e) {
        super(),
        this.steps = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new xE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new xE).fromJson(e, t)
    }
--
        return (new xE).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class CE extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new CE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new CE).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(CE, e, t)
--
class kE extends C {
    constructor(e) {
        super(),
        this.trajectorySummaries = {},
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new kE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new kE).fromJson(e, t)
    }
--
        return (new kE).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class ME extends C {
    constructor(e) {
        super(),
        this.cascadeId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ME).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ME).fromJson(e, t)
    }
--
        return (new ME).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class LE extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new LE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new LE).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(LE, e, t)
--
class IE extends C {
    constructor(e) {
        super(),
        this.cascadeId = "",
        this.stepIndices = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new IE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new IE).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new IE).fromJsonString(e, t)
    }
--
class NE extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new NE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new NE).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(NE, e, t)
--
class OE extends C {
    constructor(e) {
        super(),
        this.cascadeId = "",
        this.items = [],
        this.images = [],
        this.recipeIds = [],
        this.blocking = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new OE).fromBinary(e, t)
--
    static fromJson(e, t) {
        return (new OE).fromJson(e, t)
    }
--
class RE extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new RE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new RE).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(RE, e, t)
--
class DE extends C {
    constructor(e) {
        super(),
        this.cascadeId = "",
        this.stepIndex = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new DE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new DE).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new DE).fromJsonString(e, t)
    }
--
class PE extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new PE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new PE).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(PE, e, t)
--
class BE extends C {
    constructor(e) {
        super(),
        this.cascadeId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new BE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new BE).fromJson(e, t)
    }
--
        return (new BE).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class FE extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new FE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new FE).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(FE, e, t)
--
class jE extends C {
    constructor(e) {
        super(),
        this.cascadeId = "",
        this.absoluteUri = [],
        this.contents = [],
        this.accept = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new jE).fromBinary(e, t)
    }
--
        return (new jE).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class UE extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new UE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new UE).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(UE, e, t)
--
class YE extends C {
    constructor(e) {
        super(),
        this.cascadeId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new YE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new YE).fromJson(e, t)
    }
--
        return (new YE).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class HE extends C {
    constructor(e) {
        super(),
        this.states = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new HE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new HE).fromJson(e, t)
    }
--
        return (new HE).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class qE extends C {
    constructor(e) {
        super(),
        this.uri = "",
        this.lastAcknowledgedState = "",
        this.currentState = "",
        this.lastStateFileNonexistent = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new qE).fromBinary(e, t)
    }
--
        return (new qE).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class GE extends C {
    constructor(e) {
        super(),
        this.cascadeId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new GE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new GE).fromJson(e, t)
    }
--
        return (new GE).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class JE extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new JE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new JE).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(JE, e, t)
--
class VE extends C {
    constructor(e) {
        super(),
        this.cascadeId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new VE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new VE).fromJson(e, t)
    }
--
        return (new VE).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class zE extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new zE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new zE).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(zE, e, t)
--
class WE extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new WE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new WE).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(WE, e, t)
--
class ZE extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ZE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ZE).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(ZE, e, t)
--
class KE extends C {
    constructor(e) {
        super(),
        this.options = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new KE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new KE).fromJson(e, t)
    }
--
        return (new KE).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class $E extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new $E).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new $E).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals($E, e, t)
--
class XE extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new XE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new XE).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(XE, e, t)
--
class QE extends C {
    constructor(e) {
        super(),
        this.workspaceUri = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new QE).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new QE).fromJson(e, t)
    }
--
        return (new QE).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class eb extends C {
    constructor(e) {
        super(),
        this.projectName = "",
        this.subdomain = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new eb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new eb).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new eb).fromJsonString(e, t)
    }
--
class tb extends C {
    constructor(e) {
        super(),
        this.deploymentId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new tb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new tb).fromJson(e, t)
    }
--
        return (new tb).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class nb extends C {
    constructor(e) {
        super(),
        this.buildStatus = Da.UNSPECIFIED,
        this.deploymentUrl = "",
        this.buildError = "",
        this.buildLogs = "",
        this.isClaimed = !1,
        this.claimUrl = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
    }
    static fromJson(e, t) {
        return (new nb).fromJson(e, t)
--
class rb extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new rb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new rb).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(rb, e, t)
--
class ab extends C {
    constructor(e) {
        super(),
        this.memories = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ab).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ab).fromJson(e, t)
    }
--
        return (new ab).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class ob extends C {
    constructor(e) {
        super(),
        this.memoryId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ob).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ob).fromJson(e, t)
    }
--
        return (new ob).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class ib extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ib).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ib).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(ib, e, t)
--
class sb extends C {
    constructor(e) {
        super(),
        this.memoryId = "",
        this.title = "",
        this.content = "",
        this.tags = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new sb).fromBinary(e, t)
    }
--
        return (new sb).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class lb extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new lb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new lb).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(lb, e, t)
--
class cb extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new cb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new cb).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(cb, e, t)
--
class ub extends C {
    constructor(e) {
        super(),
        this.memories = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ub).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ub).fromJson(e, t)
    }
--
        return (new ub).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class db extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new db).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new db).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(db, e, t)
--
class mb extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new mb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new mb).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(mb, e, t)
--
class pb extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new pb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new pb).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(pb, e, t)
--
class fb extends C {
    constructor(e) {
        super(),
        this.states = [],
        this.isLoading = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new fb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new fb).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new fb).fromJsonString(e, t)
    }
--
class hb extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new hb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new hb).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(hb, e, t)
--
class _b extends C {
    constructor(e) {
        super(),
        this.workflows = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new _b).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new _b).fromJson(e, t)
    }
--
        return (new _b).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class gb extends C {
    constructor(e) {
        super(),
        this.actionType = "",
        this.payload = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new gb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new gb).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new gb).fromJsonString(e, t)
    }
--
class yb extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new yb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new yb).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(yb, e, t)
--
class Ab extends C {
    constructor(e) {
        super(),
        this.query = "",
        this.results = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ab).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ab).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Ab).fromJsonString(e, t)
    }
--
class Eb extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Eb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Eb).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Eb, e, t)
--
class bb extends C {
    constructor(e) {
        super(),
        this.properties = {},
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new bb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new bb).fromJson(e, t)
    }
--
        return (new bb).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class vb extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new vb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new vb).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(vb, e, t)
--
class wb extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new wb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new wb).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(wb, e, t)
--
class Sb extends C {
    constructor(e) {
        super(),
        this.shouldEnable = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Sb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Sb).fromJson(e, t)
    }
--
        return (new Sb).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Tb extends C {
    constructor(e) {
        super(),
        this.intent = "",
        this.repoPath = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Tb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Tb).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Tb).fromJsonString(e, t)
    }
--
class xb extends C {
    constructor(e) {
        super(),
        this.patchString = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new xb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new xb).fromJson(e, t)
    }
--
        return (new xb).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Cb extends C {
    constructor(e) {
        super(),
        this.shareStatus = Hl.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Cb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Cb).fromJson(e, t)
    }
--
        return (new Cb).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class kb extends C {
    constructor(e) {
        super(),
        this.url = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new kb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new kb).fromJson(e, t)
    }
--
        return (new kb).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Mb extends C {
    constructor(e) {
        super(),
        this.os = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Mb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Mb).fromJson(e, t)
    }
--
        return (new Mb).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Lb extends C {
    constructor(e) {
        super(),
        this.plugins = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Lb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Lb).fromJson(e, t)
    }
--
        return (new Lb).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Ib extends C {
    constructor(e) {
        super(),
        this.pluginId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ib).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ib).fromJson(e, t)
    }
--
        return (new Ib).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Nb extends C {
    constructor(e) {
        super(),
        this.installationCount = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Nb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Nb).fromJson(e, t)
    }
--
        return (new Nb).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Ob extends C {
    constructor(e) {
        super(),
        this.languageServerPort = 0,
        this.lspPort = 0,
        this.chatClientPort = 0,
        this.csrfToken = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ob).fromBinary(e, t)
    }
--
        return (new Ob).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class Rb extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Rb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Rb).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Rb, e, t)
--
class Db extends C {
    constructor(e) {
        super(),
        this.settingId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Db).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Db).fromJson(e, t)
    }
--
        return (new Db).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Pb extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Pb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Pb).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Pb, e, t)
--
class Bb extends C {
    constructor(e) {
        super(),
        this.fileUri = "",
        this.startLine = 0,
        this.startCol = 0,
        this.endLine = 0,
        this.endCol = 0,
        this.isCascadeDiff = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
    }
    static fromJson(e, t) {
        return (new Bb).fromJson(e, t)
--
class Fb extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Fb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Fb).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Fb, e, t)
--
class jb extends C {
    constructor(e) {
        super(),
        this.text = "",
        this.editorType = Ql.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new jb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new jb).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new jb).fromJsonString(e, t)
    }
--
class Ub extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ub).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ub).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Ub, e, t)
--
class Yb extends C {
    constructor(e) {
        super(),
        this.key = "",
        this.value = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Yb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Yb).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Yb).fromJsonString(e, t)
    }
--
class Hb extends C {
    constructor(e) {
        super(),
        this.event = La.EVENT_UNSPECIFIED,
        this.metadata = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Hb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Hb).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Hb).fromJsonString(e, t)
    }
--
class qb extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new qb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new qb).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(qb, e, t)
--
class Gb extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Gb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Gb).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Gb, e, t)
--
class Jb extends C {
    constructor(e) {
        super(),
        this.hasShellIntegration = !1,
        this.shellName = "",
        this.shellPath = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Jb).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Jb).fromJsonString(e, t)
--
class Vb extends C {
    constructor(e) {
        super(),
        this.commandLine = "",
        this.cwd = "",
        this.terminalId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Vb).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Vb).fromJsonString(e, t)
--
class zb extends C {
    constructor(e) {
        super(),
        this.terminalId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new zb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new zb).fromJson(e, t)
    }
--
        return (new zb).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Wb extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Wb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Wb).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Wb, e, t)
--
class Zb extends C {
    constructor(e) {
        super(),
        this.text = "",
        this.showMarkdownPreview = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Zb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Zb).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Zb).fromJsonString(e, t)
    }
--
class Kb extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Kb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Kb).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Kb, e, t)
--
class $b extends C {
    constructor(e) {
        super(),
        this.uri = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new $b).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new $b).fromJson(e, t)
    }
--
        return (new $b).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Xb extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Xb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Xb).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Xb, e, t)
--
class Qb extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Qb).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Qb).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Qb, e, t)
--
class ev extends C {
    constructor(e) {
        super(),
        this.acknowledgerId = "",
        this.timeoutMs = 0,
        this.gracePeriodMs = 0,
        this.includeSaved = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ev).fromBinary(e, t)
    }
--
        return (new ev).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class tv extends C {
    constructor(e) {
        super(),
        this.lintErrors = [],
        this.persistentLintErrors = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new tv).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new tv).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new tv).fromJsonString(e, t)
    }
--
class nv extends C {
    constructor(e) {
        super(),
        this.cascadeId = "",
        this.validationStates = [],
        this.writeNewState = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new nv).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new nv).fromJsonString(e, t)
--
class rv extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new rv).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new rv).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(rv, e, t)
--
class av extends C {
    constructor(e) {
        super(),
        this.url = "",
        this.useIdeBrowser = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new av).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new av).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new av).fromJsonString(e, t)
    }
--
class ov extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ov).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ov).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(ov, e, t)
--
class iv extends C {
    constructor(e) {
        super(),
        this.messageType = "",
        this.messageContent = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new iv).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new iv).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new iv).fromJsonString(e, t)
    }
--
class sv extends C {
    constructor(e) {
        super(),
        this.responseContent = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new sv).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new sv).fromJson(e, t)
    }
--
        return (new sv).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class lv extends C {
    constructor(e) {
        super(),
        this.soundType = ec.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new lv).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new lv).fromJson(e, t)
    }
--
        return (new lv).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class cv extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new cv).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new cv).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(cv, e, t)
--
class uv extends C {
    constructor(e) {
        super(),
        this.isWorkspaceRules = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new uv).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new uv).fromJson(e, t)
    }
--
        return (new uv).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class dv extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new dv).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new dv).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(dv, e, t)
--
class mv extends C {
    constructor(e) {
        super(),
        this.uris = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new mv).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new mv).fromJson(e, t)
    }
--
        return (new mv).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class pv extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new pv).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new pv).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(pv, e, t)
--
class fv extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new fv).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new fv).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(fv, e, t)
--
class hv extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new hv).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new hv).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(hv, e, t)
--
class _v extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new _v).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new _v).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(_v, e, t)
--
class gv extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new gv).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new gv).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(gv, e, t)
--
class Ev extends C {
    constructor(e) {
        super(),
        this.protocolVersion = 0,
        this.id = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ev).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ev).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Ev).fromJsonString(e, t)
    }
--
class bv extends C {
    constructor(e) {
        super(),
        this.version = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new bv).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new bv).fromJson(e, t)
    }
--
        return (new bv).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class vv extends C {
    constructor(e) {
        super(),
        this.counter = 0,
        this.values = [],
        this.nestedRepeated = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new vv).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new vv).fromJsonString(e, t)
--
class wv extends C {
    constructor(e) {
        super(),
        this.fieldDiffs = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new wv).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new wv).fromJson(e, t)
    }
--
        return (new wv).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Sv extends C {
    constructor(e) {
        super(),
        this.fieldNumber = 0,
        this.diff = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Sv).fromBinary(e, t)
    }
--
        return (new Sv).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class Tv extends C {
    constructor(e) {
        super(),
        this.newLength = 0,
        this.updateValues = [],
        this.updateIndices = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Tv).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Tv).fromJsonString(e, t)
--
class xv extends C {
    constructor(e) {
        super(),
        this.mapKeyDiffs = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new xv).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new xv).fromJson(e, t)
    }
--
        return (new xv).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Cv extends C {
    constructor(e) {
        super(),
        this.diff = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Cv).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Cv).fromJsonString(e, t)
--
class kv extends C {
    constructor(e) {
        super(),
        this.value = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new kv).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new kv).fromJsonString(e, t)
--
class Mv extends C {
    constructor(e) {
        super(),
        this.singularScalarValue = 0,
        this.repeatedScalarValue = [],
        this.repeatedMessageValue = [],
        this.mapScalarValue = {},
        this.mapMessageValue = {},
        this.oneofTest = {
            case: void 0
        },
        this.enumValue = Av.UNSPECIFIED,
--
    }
    static fromBinary(e, t) {
        return (new Mv).fromBinary(e, t)
--
class ow extends C {
    constructor(e) {
        super(),
        this.feedback = Ks.FEEDBACK_TYPE_UNSPECIFIED,
        this.streamId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ow).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ow).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new ow).fromJsonString(e, t)
    }
--
class iw extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new iw).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new iw).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(iw, e, t)
--
class sw extends C {
    constructor(e) {
        super(),
        this.type = "",
        this.title = "",
        this.message = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new sw).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new sw).fromJsonString(e, t)
--
class lw extends C {
    constructor(e) {
        super(),
        this.payload = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new lw).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new lw).fromJsonString(e, t)
--
class cw extends C {
    constructor(e) {
        super(),
        this.messages = [],
        this.isReceivingMessage = !1,
        this.draftQuery = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new cw).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new cw).fromJsonString(e, t)
--
class uw extends C {
    constructor(e) {
        super(),
        this.conversationId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new uw).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new uw).fromJson(e, t)
    }
--
        return (new uw).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class dw extends C {
    constructor(e) {
        super(),
        this.filePathMigrateMeToUri = "",
        this.fileUri = "",
        this.startLine = 0,
        this.startCol = 0,
        this.endLine = 0,
        this.endCol = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
    }
    static fromJson(e, t) {
        return (new dw).fromJson(e, t)
--
class mw extends C {
    constructor(e) {
        super(),
        this.text = "",
        this.editorType = rw.UNSPECIFIED,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new mw).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new mw).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new mw).fromJsonString(e, t)
    }
--
class pw extends C {
    constructor(e) {
        super(),
        this.messageId = "",
        this.filePathMigrateMeToUri = "",
        this.providerSource = xr.UNSPECIFIED,
        this.fileContentHash = "",
        this.diffDocPrefix = "",
        this.diffDocSuffix = "",
        this.uri = "",
        Ze.util.initPartial(e, this)
    }
--
        return (new pw).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
class fw extends C {
    constructor(e) {
        super(),
        this.messageId = "",
        this.filePathMigrateMeToUri = "",
        this.providerSource = xr.UNSPECIFIED,
        this.uri = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new fw).fromBinary(e, t)
    }
--
        return (new fw).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
class hw extends C {
    constructor(e) {
        super(),
        this.userId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new hw).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new hw).fromJson(e, t)
    }
--
        return (new hw).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class _w extends C {
    constructor(e) {
        super(),
        this.error = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new _w).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new _w).fromJson(e, t)
    }
--
        return (new _w).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class gw extends C {
    constructor(e) {
        super(),
        this.experimentKey = Mr.UNSPECIFIED,
        this.enabled = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new gw).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new gw).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new gw).fromJsonString(e, t)
    }
--
class yw extends C {
    constructor(e) {
        super(),
        this.languageServerAddress = "",
        this.experiments = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new yw).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new yw).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new yw).fromJsonString(e, t)
    }
--
class Aw extends C {
    constructor(e) {
        super(),
        this.isPartialUpdate = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Aw).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Aw).fromJson(e, t)
    }
--
        return (new Aw).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Ew extends C {
    constructor(e) {
        super(),
        this.streamId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Ew).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Ew).fromJson(e, t)
    }
--
        return (new Ew).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class bw extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new bw).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new bw).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(bw, e, t)
--
class vw extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new vw).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new vw).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(vw, e, t)
--
class ww extends C {
    constructor(e) {
        super(),
        this.draftQuery = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ww).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ww).fromJson(e, t)
    }
--
        return (new ww).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Sw extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Sw).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Sw).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Sw, e, t)
--
class Tw extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Tw).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Tw).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Tw, e, t)
--
class xw extends C {
    constructor(e) {
        super(),
        this.payload = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new xw).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new xw).fromJsonString(e, t)
--
class Cw extends C {
    constructor(e) {
        super(),
        this.payload = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Cw).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Cw).fromJsonString(e, t)
--
class kw extends C {
    constructor(e) {
        super(),
        this.actionType = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new kw).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new kw).fromJson(e, t)
    }
--
        return (new kw).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Mw extends C {
    constructor(e) {
        super(),
        this.query = "",
        this.maxItems = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Mw).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Mw).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new Mw).fromJsonString(e, t)
    }
--
class Lw extends C {
    constructor(e) {
        super(),
        this.matchedRepositories = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Lw).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Lw).fromJson(e, t)
    }
--
        return (new Lw).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Iw extends C {
    constructor(e) {
        super(),
        this.query = "",
        this.allowedTypes = [],
        this.maxItems = 0,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Iw).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new Iw).fromJsonString(e, t)
--
class Nw extends C {
    constructor(e) {
        super(),
        this.matchedItems = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Nw).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Nw).fromJson(e, t)
    }
--
        return (new Nw).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class Xw {
    constructor(e) {
        this.socket = null,
        this.bridgeType = "websocket-bridge",
        this.serverUrl = e
    }
    connect() {
        this.socket = new WebSocket(this.serverUrl),
        this.socket.onopen = this.onOpen.bind(this),
        this.socket.onclose = this.onClose.bind(this),
        this.socket.onmessage = async e => {
            const t = e.data
--
              , r = new Uint8Array(n)
              , a = Cw.fromBinary(r);
            this.onMessage(a)
--
class zS extends Error {
    constructor(e, t, n) {
        const r = [null, null];
        let a = {
            start: {
                line: null,
                column: null
            },
            end: {
                line: null,
                column: null
            }
--
        if (super(),
        "string" == typeof t && (n = t,
        t = void 0),
--
class eT {
    constructor(e) {
        let t;
        t = e ? "string" == typeof e || function(e) {
            return HS(e)
        }(e) ? {
            value: e
        } : $S(e) ? {
            path: e
        } : e : {},
        this.data = {},
        this.messages = [],
--
        this.cwd = KS.cwd(),
        this.value,
        this.stored,
--
class qC {
    constructor(e, t, n) {
        this.property = e,
        this.normal = t,
        n && (this.space = n)
    }
}
function GC(e, t) {
    const n = {}
      , r = {};
    let a = -1;
    for (; ++a < e.length; )
--
        Object.assign(r, e[a].normal);
    return new qC(n,r,t)
}
--
class VC {
    constructor(e, t) {
        this.property = e,
        this.attribute = t
    }
}
VC.prototype.space = null,
VC.prototype.boolean = !1,
VC.prototype.booleanish = !1,
VC.prototype.overloadedBoolean = !1,
VC.prototype.number = !1,
VC.prototype.commaSeparated = !1,
--
VC.prototype.commaOrSpaceSeparated = !1,
VC.prototype.mustUseProperty = !1,
VC.prototype.defined = !1;
--
class rk extends VC {
    constructor(e, t, n, r) {
        let a = -1;
        if (super(e, t),
        ak(this, "space", r),
        "number" == typeof n)
            for (; ++a < nk.length; ) {
                const e = nk[a];
                ak(this, nk[a], (n & i[e]) === i[e])
            }
    }
}
--
    afterCloneFrom(e) {
        this.__parent = e.__parent,
        this.__next = e.__next,
        this.__prev = e.__prev
    }
    constructor(e) {
        this.__type = this.constructor.getType(),
        this.__parent = null,
        this.__prev = null,
--
class fF extends pF {
    static getType() {
        return "linebreak"
    }
    static clone(e) {
        return new fF(e.__key)
    }
    constructor(e) {
        super(e)
    }
    getTextContent() {
        return "\n"
    }
    createDOM() {
        return document.createElement("br")
    }
--
class TF extends pF {
--
        this.__format = e.__format,
        this.__style = e.__style,
        this.__mode = e.__mode,
        this.__detail = e.__detail
    }
    constructor(e="", t) {
--
class BF extends TF {
    static getType() {
        return "tab"
    }
    static clone(e) {
        return new BF(e.__key)
    }
    constructor(e) {
        super("\t", e),
        this.__detail = 2
    }
    static importDOM() {
        return null
    }
    createDOM(e) {
        const t = super.createDOM(e)
--
class jF {
    constructor(e, t, n) {
        this._selection = null,
        this.key = e,
        this.offset = t,
        this.type = n
    }
    is(e) {
        return this.key === e.key && this.offset === e.offset && this.type === e.type
    }
    isBefore(e) {
        let t = this.getNode()
--
        const r = this.offset
          , a = e.offset;
        if (Yj(t)) {
--
class GF {
    constructor(e) {
        this._cachedNodes = null,
        this._nodes = e,
        this.dirty = !1
    }
    getCachedNodes() {
        return this._cachedNodes
    }
    setCachedNodes(e) {
        this._cachedNodes = e
    }
--
        if (!zF(e))
            return !1;
        const t = this._nodes
--
class VF {
    constructor(e, t, n, r) {
        this.anchor = e,
        this.focus = t,
        e._selection = this,
        t._selection = this,
        this._cachedNodes = null,
        this.format = n,
        this.style = r,
        this.dirty = !1
    }
    getCachedNodes() {
--
    }
    setCachedNodes(e) {
        this._cachedNodes = e
--
class Fj {
    constructor(e, t, n) {
        this.element = e,
        this.before = t || null,
        this.after = n || null
    }
    withBefore(e) {
        return new Fj(this.element,e,this.after)
    }
    withAfter(e) {
        return new Fj(this.element,this.before,e)
    }
--
        return new Fj(e,this.before,this.after)
    }
    insertChild(e) {
--
class Uj extends pF {
    constructor(e) {
        super(e),
        this.__first = null,
        this.__last = null,
        this.__size = 0,
        this.__format = 0,
        this.__style = "",
        this.__indent = 0,
        this.__dir = null,
        this.__textFormat = 0,
        this.__textStyle = ""
--
        return "root"
    }
    static clone() {
        return new Jj
    }
    constructor() {
        super("root"),
        this.__cachedText = null
    }
    getTopLevelElementOrThrow() {
        xD(51)
    }
    getTextContent() {
        const e = this.__cachedText;
--
class Kj {
    constructor(e, t) {
        this._nodeMap = e,
        this._selection = t || null,
        this._flushSync = !1,
        this._readOnly = !1
    }
    isEmpty() {
        return 1 === this._nodeMap.size && null === this._selection
    }
    read(e, t) {
        return Ij(t && t.editor || null, this, e)
--
    updateDOM(e, t, n) {
        return !1
    }
--
class sU {
    constructor(e, t, n, r, a, o, i) {
        this._parentEditor = t,
        this._rootElement = null,
        this._editorState = e,
        this._pendingEditorState = null,
        this._compositionKey = null,
        this._deferred = [],
        this._keyToDOMMap = new Map,
        this._updates = [],
        this._updating = !1,
        this._listeners = {
--
            rel: e.__rel,
            target: e.__target,
            title: e.__title
        },e.__key)
    }
    constructor(e="", t={}, n) {
        super(n);
        const {target: r=null, rel: a=null, title: o=null} = t;
        this.__url = e,
        this.__target = r,
--
class NY extends kY {
    constructor(e="", t={}, n) {
        super(e, t, n),
        this.__isUnlinked = void 0 !== t.isUnlinked && null !== t.isUnlinked && t.isUnlinked
    }
    static getType() {
        return "autolink"
    }
    static clone(e) {
        return new NY(e.__url,{
            isUnlinked: e.__isUnlinked,
            rel: e.__rel,
--
            title: e.__title
        },e.__key)
    }
--
class tH {
    constructor(e) {
        this.key = e,
        this.ref = {
            current: null
        },
        this.setRefElement = this.setRefElement.bind(this)
    }
    setRefElement(e) {
        this.ref = {
            current: e
        }
--
    afterCloneFrom(e) {
        this.__parent = e.__parent,
        this.__next = e.__next,
        this.__prev = e.__prev
    }
    constructor(e) {
        this.__type = this.constructor.getType(),
        this.__parent = null,
        this.__prev = null,
--
class hV extends fV {
    static getType() {
        return "linebreak"
    }
    static clone(e) {
        return new hV(e.__key)
    }
    constructor(e) {
        super(e)
    }
    getTextContent() {
        return "\n"
    }
    createDOM() {
        return document.createElement("br")
    }
--
class xV extends fV {
--
        this.__format = e.__format,
        this.__style = e.__style,
        this.__mode = e.__mode,
        this.__detail = e.__detail
    }
    constructor(e="", t) {
--
class FV extends xV {
    static getType() {
        return "tab"
    }
    static clone(e) {
        return new FV(e.__key)
    }
    constructor(e) {
        super("\t", e),
        this.__detail = 2
    }
    static importDOM() {
        return null
    }
    createDOM(e) {
        const t = super.createDOM(e)
--
class UV {
    constructor(e, t, n) {
        this._selection = null,
        this.key = e,
        this.offset = t,
        this.type = n
    }
    is(e) {
        return this.key === e.key && this.offset === e.offset && this.type === e.type
    }
    isBefore(e) {
        let t = this.getNode()
--
        const r = this.offset
          , a = e.offset;
        if (Fz(t)) {
--
class GV {
    constructor(e) {
        this._cachedNodes = null,
        this._nodes = e,
        this.dirty = !1
    }
    getCachedNodes() {
        return this._cachedNodes
    }
    setCachedNodes(e) {
        this._cachedNodes = e
    }
--
        if (!zV(e))
            return !1;
        const t = this._nodes
--
class VV {
    constructor(e, t, n, r) {
        this.anchor = e,
        this.focus = t,
        e._selection = this,
        t._selection = this,
        this._cachedNodes = null,
        this.format = n,
        this.style = r,
        this.dirty = !1
    }
    getCachedNodes() {
--
    }
    setCachedNodes(e) {
        this._cachedNodes = e
--
class Dz {
    constructor(e, t, n) {
        this.element = e,
        this.before = t || null,
        this.after = n || null
    }
    withBefore(e) {
        return new Dz(this.element,e,this.after)
    }
    withAfter(e) {
        return new Dz(this.element,this.before,e)
    }
--
        return new Dz(e,this.before,this.after)
    }
    insertChild(e) {
--
class Bz extends fV {
    constructor(e) {
        super(e),
        this.__first = null,
        this.__last = null,
        this.__size = 0,
        this.__format = 0,
        this.__style = "",
        this.__indent = 0,
        this.__dir = null,
        this.__textFormat = 0,
        this.__textStyle = ""
--
        return "root"
    }
    static clone() {
        return new Hz
    }
    constructor() {
        super("root"),
        this.__cachedText = null
    }
    getTopLevelElementOrThrow() {
        Mq(51)
    }
    getTextContent() {
        const e = this.__cachedText;
--
class zz {
    constructor(e, t) {
        this._nodeMap = e,
        this._selection = t || null,
        this._flushSync = !1,
        this._readOnly = !1
    }
    isEmpty() {
        return 1 === this._nodeMap.size && null === this._selection
    }
    read(e, t) {
        return kz(t && t.editor || null, this, e)
--
    updateDOM(e, t, n) {
        return !1
    }
--
class Xz {
    constructor(e, t, n, r, a, o, i) {
        this._parentEditor = t,
        this._rootElement = null,
        this._editorState = e,
        this._pendingEditorState = null,
        this._compositionKey = null,
        this._deferred = [],
        this._keyToDOMMap = new Map,
        this._updates = [],
        this._updating = !1,
        this._listeners = {
--
            const t = new rW(e);
            return t.setMode("segmented"),
            GP(t)
        }()
    }
    constructor(e, t) {
        super("​", t),
--
class yW extends qj {
    static getType() {
        return "beautifulMention"
    }
    static clone(e) {
        return new yW(e.__trigger,e.__value,e.__data,e.__key)
    }
    constructor(e, t, n, r) {
        super(r),
        this.__trigger = e,
        this.__value = t,
        this.__data = n
    }
    createDOM() {
        return document.createElement("span")
    }
--
class NW extends yW {
--
        e.href = this.getURL(),
        e
    }
--
class oZ extends tH {
    constructor(e, t, n) {
        super(t),
        this.trigger = e,
        this.mentionText = t,
        this.itemProps = n
    }
}
class iZ {
    constructor(e, t, n) {
        if (1 !== e.length)
            throw new Error("Trigger must be one character long");
        this.trigger = e,
        this.baseCategories = t,
        this.customCategories = n?.reduce(( (e, t) => (t.categoryName && (e[t.categoryName] = t),
        e)), {})
    }
    getTrigger() {
        return this.trigger
    }
--
        return [...this.baseCategories, ...Object.values(this.customCategories ?? {}).map((e => e.getCategory()))]
    }
    getCustomCategory(e) {
--
class sZ {
    constructor(e) {
        this.itemProps = e
    }
    convertToTextOrScopeItem() {
        return new Ji({
            chunk: {
                case: "text",
                value: this.itemProps.data.data
            }
        })
    }
--
                data: "[web](use web search tool)",
                dataType: aZ.STRING,
                displayTitle: "Web",
--
class uZ extends iZ {
    constructor(e, t, n=!1, r=!1, a={}, o=!1) {
        const i = r ? pZ : dZ
          , s = n && o ? [...i, ...mZ] : i;
        super(uZ.trigger, s, t),
        this.handleEmptyQuery = () => {
            const e = [];
            if (this.config.webSearchEnabled && this.hasCascade) {
                const t = (new cZ).createDefaultNodeData();
                t && e.push(new oZ(uZ.trigger,t.getDisplayValue(),t.getMenuItemProps()))
            }
            return e.push(...super.handleEmptyQuery()),
--
        }
        ,
        this.searchMention = e,
--
class hZ {
    constructor(e) {
        this.itemProps = e
    }
    convertToTextOrScopeItem() {
        const e = this.itemProps.data;
        try {
            return new Ji({
                chunk: {
                    case: "item",
                    value: ki.fromJsonString(e.data)
                }
--
        } catch (t) {
            if (console.error("Error: unable to parse context item", e.mentionText),
            e.mentionText)
--
class _Z {
    constructor(e) {
        this.text = e
    }
    convertToTextOrScopeItem() {
        return new Ji({
            chunk: {
                case: "text",
                value: this.text
            }
        })
    }
--
        return {
            detail: 0,
            format: 0,
--
class gZ extends _Z {
    constructor() {
        super("\n")
    }
    getDisplayValue() {
        return ""
    }
}
class yZ extends _Z {
    constructor() {
        super("\t")
    }
    getDisplayValue() {
        return "\t"
    }
}
class AZ {
    constructor(e) {
        this.url = e
    }
    convertToTextOrScopeItem() {
        return new Ji({
            chunk: {
                case: "text",
                value: this.url
            }
        })
    }
--
            const e = JSON.parse(n);
            return LZ(e.type, e)
        } catch (e) {
--
class NZ {
    constructor() {
        this.parsers = [new wZ, new TZ, new xZ, new IZ, new CZ]
    }
    getParsers() {
        return this.parsers
    }
    setParsers(e) {
        this.parsers = e
    }
}
const OZ = e => {
--
      , n = [];
    return t.root.children.forEach(( (e, r) => {
        e.children.forEach((e => {
--
class zK extends C {
    constructor(e) {
        super(),
        this.aggregationFunction = GK.UNSPECIFIED,
        this.field = "",
        this.name = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new zK).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new zK).fromJsonString(e, t)
--
class WK extends C {
    constructor(e) {
        super(),
        this.filter = JK.UNSPECIFIED,
        this.name = "",
        this.value = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new WK).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new WK).fromJsonString(e, t)
--
class ZK extends C {
    constructor(e) {
        super(),
        this.field = "",
        this.name = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new ZK).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new ZK).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new ZK).fromJsonString(e, t)
    }
--
class KK extends C {
    constructor(e) {
        super(),
        this.ascending = !1,
        this.name = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new KK).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new KK).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new KK).fromJsonString(e, t)
    }
--
class $K extends C {
    constructor(e) {
        super(),
        this.dataSource = qK.UNSPECIFIED,
        this.selections = [],
        this.filters = [],
        this.aggregations = [],
        this.orderings = [],
        this.useRealApiKey = !1,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
--
    }
    static fromJson(e, t) {
        return (new $K).fromJson(e, t)
--
class XK extends C {
    constructor(e) {
        super(),
        this.item = {},
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new XK).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new XK).fromJson(e, t)
    }
--
        return (new XK).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class QK extends C {
    constructor(e) {
        super(),
        this.responseItems = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new QK).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new QK).fromJson(e, t)
    }
--
        return (new QK).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class e$ extends C {
    constructor(e) {
        super(),
        this.queryRequests = [],
        this.apiKey = "",
        this.groupId = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new e$).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new e$).fromJsonString(e, t)
--
class t$ extends C {
    constructor(e) {
        super(),
        this.queryResults = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new t$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new t$).fromJson(e, t)
    }
--
        return (new t$).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class n$ extends C {
    constructor(e) {
        super(),
        this.queryRequests = [],
        this.serviceKey = "",
        this.groupName = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new n$).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new n$).fromJsonString(e, t)
--
class r$ extends C {
    constructor(e) {
        super(),
        this.queryResults = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new r$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new r$).fromJson(e, t)
    }
--
        return (new r$).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class a$ extends C {
    constructor(e) {
        super(),
        this.serviceKey = "",
        this.groupName = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new a$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new a$).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new a$).fromJsonString(e, t)
    }
--
class o$ extends C {
    constructor(e) {
        super(),
        this.userTableStats = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new o$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new o$).fromJson(e, t)
    }
--
        return (new o$).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class i$ extends C {
    constructor(e) {
        super(),
        this.username = "",
        this.queryRequests = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new i$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new i$).fromJson(e, t)
--
    static fromJsonString(e, t) {
        return (new i$).fromJsonString(e, t)
    }
--
class s$ extends C {
    constructor(e) {
        super(),
        this.queryResults = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new s$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new s$).fromJson(e, t)
    }
--
        return (new s$).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class l$ extends C {
    constructor(e) {
        super(),
        this.requestType = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new l$).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new l$).fromJsonString(e, t)
--
class c$ extends C {
    constructor(e) {
        super(),
        this.resultType = {
            case: void 0
        },
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new c$).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new c$).fromJsonString(e, t)
--
class u$ extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new u$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new u$).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(u$, e, t)
--
class d$ extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new d$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new d$).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(d$, e, t)
--
class m$ extends C {
    constructor(e) {
        super(),
        this.timeZone = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new m$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new m$).fromJson(e, t)
    }
--
        return (new m$).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class p$ extends C {
    constructor(e) {
        super(),
        this.completionsByDay = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new p$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new p$).fromJson(e, t)
    }
--
        return (new p$).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class f$ extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new f$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new f$).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(f$, e, t)
--
class h$ extends C {
    constructor(e) {
        super(),
        this.completionsByLanguage = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new h$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new h$).fromJson(e, t)
    }
--
        return (new h$).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class _$ extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new _$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new _$).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(_$, e, t)
--
class g$ extends C {
    constructor(e) {
        super(),
        this.completionsByIde = {},
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new g$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new g$).fromJson(e, t)
    }
--
        return (new g$).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class y$ extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new y$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new y$).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(y$, e, t)
--
class A$ extends C {
    constructor(e) {
        super(),
        this.completionsByRepository = {},
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new A$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new A$).fromJson(e, t)
    }
--
        return (new A$).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class E$ extends C {
    constructor(e) {
        super(),
        this.timeZone = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new E$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new E$).fromJson(e, t)
    }
--
        return (new E$).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class b$ extends C {
    constructor(e) {
        super(),
        this.chatsByDay = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new b$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new b$).fromJson(e, t)
    }
--
        return (new b$).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class v$ extends C {
    constructor(e) {
        super(),
        this.timeZone = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new v$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new v$).fromJson(e, t)
    }
--
        return (new v$).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class w$ extends C {
    constructor(e) {
        super(),
        this.timeZone = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new w$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new w$).fromJson(e, t)
    }
--
        return (new w$).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class S$ extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new S$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new S$).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(S$, e, t)
--
class T$ extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new T$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new T$).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(T$, e, t)
--
class x$ extends C {
    constructor(e) {
        super(),
        this.chatsByModel = [],
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new x$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new x$).fromJson(e, t)
    }
--
        return (new x$).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class C$ extends C {
    constructor(e) {
        super(),
        this.timeZone = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new C$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new C$).fromJson(e, t)
    }
--
        return (new C$).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class k$ extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new k$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new k$).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(k$, e, t)
--
class M$ extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new M$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new M$).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(M$, e, t)
--
class L$ extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new L$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new L$).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(L$, e, t)
--
class I$ extends C {
    constructor(e) {
        super(),
        this.completionsByApiKey = {},
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new I$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new I$).fromJson(e, t)
    }
--
        return (new I$).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class N$ extends C {
    constructor(e) {
        super(),
        this.activeUserCount = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new N$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new N$).fromJson(e, t)
    }
--
        return (new N$).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class O$ extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new O$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new O$).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(O$, e, t)
--
class R$ extends C {
    constructor(e) {
        super(),
        this.percentCodeWritten = 0,
        this.codeiumBytesByAutocomplete = F.zero,
        this.codeiumBytesByCommand = F.zero,
        this.codeiumBytesBySupercomplete = F.zero,
        this.userBytes = F.zero,
        this.codeiumBytes = F.zero,
        this.totalBytes = F.zero,
        Ze.util.initPartial(e, this)
    }
--
        return (new R$).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
class D$ extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new D$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new D$).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(D$, e, t)
--
class P$ extends C {
    constructor(e) {
        super(),
        this.charsPerOpportunity = 0,
        this.numBytesAccepted = F.zero,
        this.numCompletionAttempts = F.zero,
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new P$).fromBinary(e, t)
    }
    static fromJson(e, t) {
--
    }
    static fromJsonString(e, t) {
        return (new P$).fromJsonString(e, t)
--
class B$ extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new B$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new B$).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(B$, e, t)
--
class F$ extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new F$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new F$).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(F$, e, t)
--
class j$ extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new j$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new j$).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(j$, e, t)
--
class U$ extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new U$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new U$).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(U$, e, t)
--
class Y$ extends C {
    constructor(e) {
        super(),
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new Y$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new Y$).fromJson(e, t)
    }
    static fromJsonString(e, t) {
--
    }
    static equals(e, t) {
        return Ze.util.equals(Y$, e, t)
--
class H$ extends C {
    constructor(e) {
        super(),
        this.activeDaysByApiKey = {},
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new H$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new H$).fromJson(e, t)
    }
--
        return (new H$).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class q$ extends C {
    constructor(e) {
        super(),
        this.error = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new q$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new q$).fromJson(e, t)
    }
--
        return (new q$).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class G$ extends C {
    constructor(e) {
        super(),
        this.apiKey = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new G$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new G$).fromJson(e, t)
    }
--
        return (new G$).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class J$ extends C {
    constructor(e) {
        super(),
        this.preferredTimeZone = "",
        Ze.util.initPartial(e, this)
    }
    static fromBinary(e, t) {
        return (new J$).fromBinary(e, t)
    }
    static fromJson(e, t) {
        return (new J$).fromJson(e, t)
    }
--
        return (new J$).fromJsonString(e, t)
    }
    static equals(e, t) {
--
class u0 {
    constructor(e) {
        this._state = s0.PENDING,
        this._handlers = [],
        this._runExecutor(e)
    }
    then(e, t) {
        return new u0(( (n, r) => {
            this._handlers.push([!1, t => {
                if (e)
                    try {
                        n(e(t))
--
                        r(e)
                    }
                else
--
class A0 {
    constructor() {
        this._notifyingListeners = !1,
        this._scopeListeners = [],
        this._eventProcessors = [],
        this._breadcrumbs = [],
        this._attachments = [],
        this._user = {},
        this._tags = {},
        this._extra = {},
        this._contexts = {},
        this._sdkProcessingMetadata = {},
--
            traceId: p0(),
            sampleRand: Math.random()
        }
--
class E0 {
    constructor(e, t) {
        let n, r;
        n = e || new A0,
        r = t || new A0,
        this._stack = [{
            scope: n
        }],
        this._isolationScope = r
    }
    withScope(e) {
        const t = this._pushScope();
--
        try {
            n = e(t)
        } catch (e) {
--
class E1 {
    constructor(e={}) {
        this._traceId = e.traceId || p0(),
        this._spanId = e.spanId || f0()
    }
    spanContext() {
        return {
            spanId: this._spanId,
            traceId: this._traceId,
            traceFlags: 0
        }
    }
--
    setAttribute(e, t) {
        return this
    }
--
class U1 {
    constructor(e={}) {
        this._traceId = e.traceId || p0(),
        this._spanId = e.spanId || f0(),
        this._startTime = e.startTimestamp || SQ(),
        this._links = e.links,
        this._attributes = {},
        this.setAttributes({
            [D0]: "manual",
            [R0]: e.op,
            ...e.attributes
        }),
--
        e.parentSpanId && (this._parentSpanId = e.parentSpanId),
        "sampled"in e && (this._sampled = e.sampled),
        e.endTimestamp && (this._endTime = e.endTimestamp),
--
class N2 {
    constructor(e) {
        if (this._options = e,
        this._integrations = {},
        this._numProcessing = 0,
        this._outcomes = {},
        this._hooks = {},
        this._eventProcessors = [],
        e.dsn ? this._dsn = S1(e.dsn) : JX && tQ.warn("No DSN provided, client will not send events."),
        this._dsn) {
            const t = g2(this._dsn, e.tunnel, e._metadata ? e._metadata.sdk : void 0);
            this._transport = e.transport({
--
                recordDroppedEvent: this.recordDroppedEvent.bind(this),
                ...e.transportOptions,
                url: t
--
class Z5 extends N2 {
    constructor(e) {
        const t = {
            parentSpanIsAlwaysRootSpan: !0,
            ...e
        };
        z2(t, "browser", ["browser"], R5.SENTRY_SDK_SOURCE || "npm"),
        super(t);
        const n = this
          , {sendDefaultPii: r, _experiments: a} = n._options
          , o = a?.enableLogs;
        t.sendClientReports && R5.document && R5.document.addEventListener("visibilitychange", ( () => {
--
            o && B2(n))
        }
        )),
--
class W3 {
    constructor() {
        H3(this, "idNodeMap", new Map),
        H3(this, "nodeMetaMap", new WeakMap)
    }
    getId(e) {
        if (!e)
            return -1;
        const t = this.getMeta(e)?.id;
        return t ?? -1
    }
    getNode(e) {
--
    }
    getIds() {
        return Array.from(this.idNodeMap.keys())
--
class X7 {
    constructor() {
        this.id = 1,
        this.styleIDMap = new WeakMap,
        this.idStyleMap = new Map
    }
    getId(e) {
        return this.styleIDMap.get(e) ?? -1
    }
    has(e) {
        return this.styleIDMap.has(e)
    }
--
        if (this.has(e))
            return this.getId(e);
        let n;
--
class m4 {
    constructor() {
        this.length = 0,
        this.head = null,
        this.tail = null
    }
    get(e) {
        if (e >= this.length)
            throw new Error("Position outside of list range");
        let t = this.head;
        for (let n = 0; n < e; n++)
            t = t?.next || null;
--
    }
    addNode(e) {
        const t = {
--
class f4 {
    constructor() {
        this.frozen = !1,
        this.locked = !1,
        this.texts = [],
        this.attributes = [],
        this.attributeMap = new WeakMap,
        this.removes = [],
        this.mapRemoves = [],
        this.movedMap = {},
        this.addedSet = new Set,
        this.movedSet = new Set,
--
        this.processMutations = e => {
            e.forEach(this.processMutation),
            this.emit()
--
class D4 {
    constructor(e) {
        this.generateIdFn = e,
        this.iframeIdToRemoteIdMap = new WeakMap,
        this.iframeRemoteIdToIdMap = new WeakMap
    }
    getId(e, t, n, r) {
        const a = n || this.getIdToRemoteIdMap(e)
          , o = r || this.getRemoteIdToIdMap(e);
        let i = a.get(t);
        return i || (i = this.generateIdFn(),
        a.set(t, i),
--
        i
    }
    getIds(e, t) {
--
class P4 {
    constructor() {
        this.crossOriginIframeMirror = new D4(d7),
        this.crossOriginIframeRootIdMap = new WeakMap
    }
    addIframe() {}
    addLoadListener() {}
    attachIframe() {}
}
class B4 {
    constructor(e) {
        this.iframes = new WeakMap,
        this.crossOriginIframeMap = new WeakMap,
        this.crossOriginIframeMirror = new D4(d7),
        this.crossOriginIframeRootIdMap = new WeakMap,
        this.mutationCb = e.mutationCb,
        this.wrappedEmit = e.wrappedEmit,
        this.stylesheetManager = e.stylesheetManager,
        this.recordCrossOriginIframes = e.recordCrossOriginIframes,
        this.crossOriginIframeStyleMirror = new D4(this.stylesheetManager.styleMirror.generateId.bind(this.stylesheetManager.styleMirror)),
        this.mirror = e.mirror,
--
    addShadowRoot() {}
    observeAttachShadow() {}
    reset() {}
}
class j4 {
    constructor(e) {
        this.shadowDoms = new WeakSet,
        this.restoreHandlers = [],
        this.mutationCb = e.mutationCb,
        this.scrollCb = e.scrollCb,
        this.bypassOptions = e.bypassOptions,
        this.mirror = e.mirror,
        this.init()
    }
    init() {
        this.reset(),
--
    addWindow() {}
    addShadowRoot() {}
    resetShadowRoots() {}
}
class G4 {
    constructor(e) {
        this.trackedLinkElements = new WeakSet,
        this.styleMirror = new X7,
        this.mutationCb = e.mutationCb,
        this.adoptedStyleSheetCb = e.adoptedStyleSheetCb
    }
    attachLinkElement(e, t) {
        "_cssText"in t.attributes && this.mutationCb({
            adds: [],
            removes: [],
            texts: [],
--
                id: t.id,
                attributes: t.attributes
            }]
--
class J4 {
    constructor() {
        this.nodeMap = new WeakMap,
        this.active = !1
    }
    inOtherBuffer(e, t) {
        const n = this.nodeMap.get(e);
        return n && Array.from(n).some((e => e !== t))
    }
    add(e, t) {
        this.active || (this.active = !0,
        function(...e) {
--
        }(( () => {
            this.nodeMap = new WeakMap,
            this.active = !1
--
class a6 {
    constructor() {
        r6(this, "idNodeMap", new Map),
        r6(this, "nodeMetaMap", new WeakMap)
    }
    getId(e) {
        if (!e)
            return -1;
        const t = this.getMeta(e)?.id;
        return t ?? -1
    }
    getNode(e) {
--
    }
    getIds() {
        return Array.from(this.idNodeMap.keys())
--
class u9 extends s.Component {
    constructor(e) {
        super(e);
        const {name: t, disabled: n=!1} = this.props;
        n || (this._mountSpan = G1({
            name: `<${t}>`,
            onlyIfParent: !0,
            op: "ui.react.mount",
            attributes: {
                [D0]: "auto.ui.react.profiler",
                "ui.component_name": t
            }
--
    }
    componentDidMount() {
        this._mountSpan && this._mountSpan.end()
--
class B9 {
    constructor(e) {
        this.unsubs = [],
        this.scrollElement = null,
        this.targetWindow = null,
        this.isScrolling = !1,
        this.scrollToIndexTimeoutId = null,
        this.measurementsCache = [],
        this.itemSizeCache = new Map,
        this.pendingMeasuredCacheIndexes = [],
        this.scrollRect = null,
        this.scrollOffset = null,
--
        this.scrollAdjustments = 0,
        this.elementsCache = new Map,
        this.observer = ( () => {
--
let q9 = new class {
    constructor() {
        H9(this, "current", this.detect()),
        H9(this, "handoffState", "pending"),
        H9(this, "currentId", 0)
    }
    set(e) {
        this.current !== e && (this.handoffState = "pending",
        this.currentId = 0,
        this.current = e)
    }
    reset() {
--
    }
    nextId() {
        return ++this.currentId
--
class Aoe extends iZ {
    constructor(e) {
        const t = e ? [e] : [];
        super(Aoe.trigger, [], t),
        this.workflowCategory = e
    }
    async handleAsyncSearch(e) {
        return this.workflowCategory ? Promise.resolve([]) : Promise.resolve(["/explain"].filter((t => t.toLowerCase().includes(e.toLowerCase()))))
    }
    handleEmptyQuery() {
        return this.workflowCategory ? this.workflowCategory.handleQuerySync(void 0).map((e => new oZ(Aoe.trigger,e.getMenuItemProps().data.mentionText,e.getMenuItemProps()))) : super.handleEmptyQuery()
    }
--
        return !!this.workflowCategory || 0 === t.leadOffset
    }
    createMentionNodeData(e) {
--
class Loe {
    constructor(e, t) {
        if (1 !== e.length)
            throw new Error("Trigger must be a single character");
        this.trigger = e,
        this.categoryName = t
    }
    handleOpenMenu() {}
    handleCloseMenu() {}
    handleCategorySelect() {}
    async transformData(e) {
        return null
    }
}
class Ioe extends Loe {
    constructor(e) {
        super(Ioe.trigger, Ioe.category),
        this.workspaceEdits = [],
        this.isSelected = !1,
        this.lsClient = e
    }
    getCategory() {
        return {
            data: {
                trigger: this.trigger,
                category: this.categoryName,
--
                data: "Diff",
                dataType: aZ.STRING,
                displayTitle: "Diff (Beta)",
--
class Roe extends Loe {
    constructor(e, t, n) {
        super(e, "terminal"),
        this.readTerminal = t,
        this.focusEditor = n
    }
    getCategory() {
        return {
            data: {
                trigger: this.trigger,
                category: this.categoryName,
                optionType: rZ.CATEGORY,
--
        return n && r ? _se.createDocsNode(n, r) : null
    }
    static createDocsNode(e, t) {
--
var Sle = new class {
    constructor(e) {
        this.autoFreeze_ = !0,
        this.useStrictShallowCopy_ = !1,
        this.produce = (e, t, n) => {
            if ("function" == typeof e && "function" != typeof t) {
                const n = t;
                t = e;
                const r = this;
                return function(e=n, ...a) {
                    return r.produce(e, (e => t.call(this, e, ...a)))
                }
--
            let r;
            if ("function" != typeof t && Use(6),
            void 0 !== n && "function" != typeof n && Use(7),
--
var Mle = "undefined" != typeof WeakRef ? WeakRef : class {
    constructor(e) {
        this.value = e
    }
    deref() {
        return this.value
    }
}
  , Lle = 0
  , Ile = 1;
function Nle() {
    return {
--
        v: void 0,
        o: null,
        p: null
--
var Hle = class e extends Array {
    constructor(...t) {
        super(...t),
        Object.setPrototypeOf(this, e.prototype)
    }
    static get[Symbol.species]() {
        return e
    }
    concat(...e) {
        return super.concat.apply(this, e)
    }
    prepend(...t) {
--
    }
}
;
--
class Fce {
    constructor() {
        this.map = []
    }
    add(e, t, n) {
        !function(e, t, n, r) {
            let a = 0;
            if (0 === n && 0 === r.length)
                return;
            for (; a < e.map.length; ) {
                if (e.map[a][0] === t)
                    return e.map[a][1] += n,
--
                a += 1
            }
            e.map.push([t, n, r])
--
class vpe {
    constructor(e, t, n) {
        this.steps = [],
        this.firstStep = e,
        this.steps = [e],
        this.firstStepIndex = t,
        this.sectionType = vpe.getSectionType(e, n),
        this.createdAt = e.metadata?.createdAt
    }
    static getSectionType(e, t) {
        switch (e.step.case) {
        case "suggestedResponses":
--
    validate(e, t) {
        return !0
    }
}
class kfe extends Cfe {
    constructor(e, t, n, r, a) {
        super(),
        this.value = e,
        this.validateValue = t,
        this.setValue = n,
        this.priority = r,
        a && (this.subPriority = a)
    }
    validate(e, t) {
        return this.validateValue(e, this.value, t)
    }
--
const hhe = (e, t) => {
    const n = t.flatMap((t => {
        const n = t.findMatches(e);
--
class Nhe extends Loe {
    constructor(e, t) {
        super(e, "docs"),
        this.getWebDocsOptions = t,
        this.webDocsOptions = Ihe(Lhe),
        this.isLoading = !1,
        this.error = null,
        this.refreshOptions()
    }
    async refreshOptions() {
        try {
            this.isLoading = !0,
--
            const e = await this.getWebDocsOptions();
            e.length > 0 ? this.webDocsOptions = Ihe(e) : this.webDocsOptions = Ihe(Lhe)
        } catch (e) {
--
class Ohe extends Loe {
    constructor(e, t) {
        super(e, "workflows"),
        this.getAllWorkflows = t,
        this.error = null,
        this.workflowOptions = [],
        this.refreshOptions()
    }
    async refreshOptions() {
        try {
            this.error = null;
            const e = await this.getAllWorkflows();
--
                scopeItem: {
                    case: "recipe",
                    value: new Ci({
--
class f_e {
    constructor(e, t, n, r) {
        this.uri = e,
        this.diffType = t,
        this.numInsertions = n,
        this.numDeletions = r
    }
    static fromValidationState(e) {
        const t = "" === e.lastAcknowledgedState ? m_e.Addition : m_e.Modified
          , {numInsertions: n, numDeletions: r} = jS(e.lastAcknowledgedState, e.currentState);
        return new f_e(e.uri,t,n,r)
    }
